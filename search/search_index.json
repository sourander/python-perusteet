{"config":{"lang":["fi"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tervetuloa kurssille","text":"<p>Oppimateriaali on tarkoitettu Kajaanin Ammattikorkeakoulun ensimm\u00e4isen tai toisen vuoden opiskelijoille. Kurssilla tutustutaan Python-ohjelmointiin yleisesti. Aiempi ohjelmointikokemus ei ole vaadittua. Materiaalin komennot voi suorittaa Windowsilla, macOS:ll\u00e4 tai itselleen tutulla Linux-distribuutiolla kuten Ubuntulla.</p> <p></p> <p>Kuvio 1: DALL-E 3:n n\u00e4kymys Pythonista opettelemassa ABC:t\u00e4.</p> <p>Huomaathan, ett\u00e4 varsinaiset harjoitukset ja kurssiteht\u00e4v\u00e4t ovat muualla. Katso kurssin Moodle-sivulta tai kysy opettajalta.</p>"},{"location":"#faktavirheet","title":"Faktavirheet","text":"<p>Mik\u00e4li oppimateriaali sis\u00e4lt\u00e4\u00e4 virheellist\u00e4 tietoa, tee jompi kumpi:</p> <ul> <li>Forkkaa GitHubin repository ja tarjoa Pull Request, joka sis\u00e4lt\u00e4\u00e4 korjausehdotukset.</li> <li>Ota yhteytt\u00e4 yll\u00e4pitoon ja esittele virheellisen tiedon korjaus.</li> </ul>"},{"location":"ajaminen/REPL/","title":"REPL","text":"<p>REPL:n (Integrated Development and Learning Environment) on interaktiivinen prompt, joka muistaa yhden session ajan kaikki luomasi muuttujat, funktiot ja objektit. Sill\u00e4 on vaikea kirjoittaa yht\u00e4 tai kahta rivi\u00e4 pidempi\u00e4 funktioita, mutta ensimm\u00e4isten askeleiden ottamiseen se on t\u00e4ydellinen leikkikentt\u00e4. Pythoniin liittyy my\u00f6s kevyt IDE nimelt\u00e4\u00e4n IDLE, mutta siihen perehtyminen voidaan j\u00e4tt\u00e4\u00e4 t\u00e4ll\u00e4 kurssilla pois: k\u00e4ytet\u00e4\u00e4n sen sijasta esimerkiksi Visual Studio Codea.</p> <p>Tip</p> <p>REPL on my\u00f6s huomattavan nopea tapa tehd\u00e4 perus laskutoimituksia: sit\u00e4 voi k\u00e4ytt\u00e4\u00e4 korvaamaan k\u00e4ytt\u00f6j\u00e4rjestem\u00e4n vakio Calculator-sovelluksen nopeissa laskutoimituksissa.</p> <p>REPL:n voi k\u00e4ynnist\u00e4\u00e4 <code>uv</code>-komennolla, ja <code>uv</code> k\u00e4ytt\u00e4\u00e4 vakiona tuoreinta asennettua Python-versiota, suosien omia asennuksiaan, mutta tukien my\u00f6s j\u00e4rjestelm\u00e4tason Pythonia. Toistaiseksi Git Bash:ss\u00e4 <code>node</code>, <code>python</code> ja muut pseudoterminaalia k\u00e4ytt\u00e4v\u00e4t komentotulkit tulee ajaa <code>winpty</code>-ohjelmalla. Mik\u00e4li t\u00e4t\u00e4 lukiessa ei ole vuosi 2023 vaan jokin tuoreempi, t\u00e4m\u00e4 on voinut muuttua.</p> <pre><code># macOS tai Linux tai PowerShell\n$ uv run python\n\n# Git Bash (Git for Windows)\n$ winpty uv run python\n</code></pre> <p>Shelliin aukeaa uudenlainen prompt, jossa eiv\u00e4t en\u00e4\u00e4 toimi vanhat <code>ls</code> ja <code>pwd</code> komennot laisinkaan. Kyseess\u00e4 on REPL, joka ymm\u00e4rt\u00e4\u00e4 Pythonia. P\u00e4\u00e4set siit\u00e4 pois komennolla <code>quit()</code> tai painamalla n\u00e4pp\u00e4inyhdistelm\u00e4\u00e4 <code>CTRL + D</code> (EOF, End Of File).</p> <p></p> <p>Kuvio 1: REPL k\u00e4ynniss\u00e4 macOS:ss\u00e4. Mik\u00e4li sinulla on Windows, REPL:n ymp\u00e4rill\u00e4 n\u00e4kyv\u00e4 ikkuna on eri n\u00e4k\u00f6inen. Huomaa, ett\u00e4 kuvassa ei k\u00e4ytet\u00e4 <code>uv</code>:ta vaan j\u00e4rjestelm\u00e4tason Pythonia. K\u00e4yt\u00e4 sin\u00e4 <code>uv</code>:ta.</p> <p>Alla on esimerkkikoodia. Kokeile ajaa sama koodi REPL:ss\u00e4 itse. Huomaa, ett\u00e4 jos kirjoitat pelk\u00e4n muuttujan nimen, se tulostaa sen arvon (nimelt\u00e4\u00e4n <code>repr</code>, printable representation). Vaihtoehtoisesti voit sy\u00f6tt\u00e4\u00e4 muuttujan sis\u00e4\u00e4nrakennetulle <code>print</code>-funktiolle, joka tulostaa sen merkkijonona (<code>str</code>). Ero on pieni, mutta joissakin tapauksissa merkitt\u00e4v\u00e4.</p> <pre><code>&gt;&gt;&gt; kilometers = 60\n&gt;&gt;&gt; minutes = 20\n&gt;&gt;&gt; speed_km_minute = kilometers / minutes\n&gt;&gt;&gt; speed_km_minute\n3.0\n&gt;&gt;&gt; speed_km_hour = speed_km_minutes * 60\n&gt;&gt;&gt; print(speed_km_hour)\n180.0\n&gt;&gt;&gt; name = \"Robin\"\n&gt;&gt;&gt; message = f\"{name} once drove {speed_km_hour} km/h \\U0001F603\"\n&gt;&gt;&gt; print(message)\nRobin once drove 180.0 km/h \ud83d\ude03\n</code></pre> <p>Alla lis\u00e4\u00e4 harjoituksia. Harjoitukset ovat tyypillist\u00e4 Pythonia, joten kommentit alkavat <code>#</code>-merkill\u00e4 ja REPL:st\u00e4 tuttu <code>&gt;&gt;&gt;</code> puuttuu rivin alusta.</p> <pre><code># Teht\u00e4v\u00e4 1: keskiarvo\na, b, c, d = 5, 5, 10, 10\naverage = _\n# Keksi, kuinka t\u00e4m\u00e4 lasketaan\n\n# Teht\u00e4v\u00e4 2: muuttujan jyr\u00e4\u00e4minen\na = 5\na = \"Kissa\"\nprint(a)\n# Tutki, mit\u00e4 tulostuu.\n\n# Teht\u00e4v\u00e4 3: docstring\nhelp(print)\n# Katso, mit\u00e4 help tekee. P\u00e4\u00e4set pois q-n\u00e4pp\u00e4int\u00e4 painamalla.\n\n# Teht\u00e4v\u00e4 4: nollalla jakaminen\nresult = 500 / 0\n# Tutki, mit\u00e4 tapahtuu kun painat enteri\u00e4\n\n# Teht\u00e4v\u00e4 5: f-string\nnumber = 42\nprint(f\"{number:08b}\")\n# Pohdi, mit\u00e4 t\u00e4m\u00e4 tekee.\n\n# Teht\u00e4v\u00e4 6: sammuta REPL\nquit()\n# Tai n\u00e4pp\u00e4inyhdistelm\u00e4 CTRL + D (EOF, End Of File)\n</code></pre>"},{"location":"ajaminen/jupyter/","title":"Jupyter","text":"<p>Bug</p> <p>T\u00e4t\u00e4 materiaalia ei ole p\u00e4ivitetty <code>uv</code>-aikakaudelle.</p> <p>Koodia voi ajaa my\u00f6s Jupyter Notebookissa, joka on web-selainpohjainen interaktiivinen IDE. Projektin voi asentaa joko k\u00e4ytt\u00e4en tuoreempaa <code>JupyterLab</code>:ia tai klassista <code>Jupyter Notebookia</code>. Notebook on hieman karsitumpi ominaisuuksiltaan, mutta sill\u00e4 p\u00e4rj\u00e4\u00e4 yll\u00e4tt\u00e4v\u00e4n pitk\u00e4lle.</p> <p>JupyterLabin hy\u00f6tyj\u00e4 ovat muun muassa:</p> <ul> <li>V\u00e4lilehdet. Jupyter Notebook vaatii yhden selainikkunan per notebook. JupyterLabissa voit avata monta yhteen.</li> <li>Tiedostoselain.</li> <li>Tuki extensioneille (esim. Jupyter Tabnine)</li> </ul> <p>Tiiviisti sanottuna: klassinen Jupyter Notebook, jos ty\u00f6skentelet yhden tiedoston koodin parissa.</p>"},{"location":"ajaminen/jupyter/#asennus","title":"Asennus","text":"<p>Bug</p> <p>Eth\u00e4n asenna Jupyter Notebookia j\u00e4rjestelm\u00e4tason Pythoniin vaan virtuaaliymp\u00e4rist\u00f6\u00f6n. K\u00e4yt\u00e4nn\u00f6ss\u00e4 asennus hoituu seuraavilla komennoilla, mutta ajan kanssa t\u00e4t\u00e4 materiaalia t\u00e4ydennet\u00e4\u00e4n.</p> <pre><code>$ uv init\n$ uv add jupyter\n</code></pre> <p>Ja k\u00e4ynnistet\u00e4\u00e4n n\u00e4in:</p> <pre><code>$ uv run jupyter notebook\n</code></pre> <p>Vaihtoethoisesti voit asentaa <code>jupyterlab</code>:n ja k\u00e4ytt\u00e4\u00e4 sit\u00e4. Se tarjoaa enemm\u00e4n ominaisuuksia, kuten tiedostoselaimen ja v\u00e4lilehdet. Yksinkertaisessa k\u00e4yt\u00f6ss\u00e4 legacy Jupyter Notebook riitt\u00e4\u00e4.</p> <p>Komento joko avaa suoraan selaimeesi Jupyter Notebook -n\u00e4kym\u00e4n, tai tarjoaa linkin, jota klikkaamalla p\u00e4\u00e4set siihen. Eth\u00e4n sulje terminaalia tai palvelin kuolee pois. Kun haluat lopettaa ty\u00f6skentelyn, varmista ett\u00e4 tiedosto on tallennettu Ctrl+S n\u00e4pp\u00e4inyhdistelm\u00e4ll\u00e4 ja valitse Jupyter Notebookista <code>File =&gt; Shut Down</code>.</p>"},{"location":"ajaminen/jupyter/#mita-ovat-solut","title":"Mit\u00e4 ovat solut?","text":"<p>Yksitt\u00e4inen solu (cell) on monirivinen tekstikentt\u00e4, joka voi sis\u00e4lt\u00e4\u00e4 joko koodia tai Markdown-teksti\u00e4. Se, kumpaa solu sis\u00e4lt\u00e4\u00e4, on k\u00e4ytt\u00e4j\u00e4n p\u00e4\u00e4tett\u00e4viss\u00e4.</p> <p></p> <p>Kuvio 1: Jupyter Notebookin k\u00e4ytt\u00f6liittym\u00e4.</p> <p>Yll\u00e4 olevassa Kuvio 1:ss\u00e4 n\u00e4kyy Jupyter Notebookin k\u00e4ytt\u00f6liittym\u00e4. Alla muutama havainto:</p> <ul> <li>Kuvassa n\u00e4kyy kuusi solua.</li> <li>Ylin on sinisell\u00e4 rajattu, aktiivinen Markdown-solu.</li> <li>Turkoosi rajaus n\u00e4ytt\u00e4\u00e4 valinnan, jossa voi m\u00e4\u00e4ritell\u00e4 solun tyypin.</li> <li>Alin on Python-solu, jossa lukee <code>z = 42</code>.</li> <li>Kolmesta koodisolusta vain yksi on ajettu. T\u00e4m\u00e4n n\u00e4kee violetilla neli\u00f6idyst\u00e4 j\u00e4rjestysnumerosta. Muuttujia <code>y</code> ja <code>z</code> ei siis ole viel\u00e4 lis\u00e4tty Python-kernelin muistiin.</li> <li>Keltainen rajaus osoittaa Play-nappulan, joka ajaa valitun solun. T\u00e4ll\u00e4 hetkell\u00e4 se ajaisi aktiivisen Markdown-solun. Se ei sis\u00e4ll\u00e4 koodia, mutta sen voi silti ajaa, jolloin sen muotoilu k\u00e4\u00e4nnet\u00e4\u00e4n HTML:ksi.</li> </ul> <p>Warning</p> <p>Tyypillisesti Python-skriptit (<code>jotain.py</code>) suoritetaan komennolla <code>python jotain.py</code>, ja t\u00e4ll\u00f6in tiedostot suoritetaan kokonaisuudessaan ylh\u00e4\u00e4lt\u00e4 alas lukien, juuri siin\u00e4 j\u00e4rjestyksess\u00e4. Jupyter Notebook poikkeaa t\u00e4st\u00e4 merkitt\u00e4v\u00e4sti. Voit ajaa solut miss\u00e4 tahansa j\u00e4rjestyksess\u00e4 ja niin monta kertaa kuin haluat.</p> <p>Python-kernel muistaa kaikki muuttuja-arvot: jopa sellaiset, joita ei en\u00e4\u00e4 n\u00e4y miss\u00e4\u00e4n, koska olet poistanut solun. T\u00e4m\u00e4 vaatii tottumista, ja on sek\u00e4 voima ett\u00e4 kirous!</p>"},{"location":"ajaminen/jupyter/#hyodyllisia-pikanappaimia","title":"Hy\u00f6dyllisi\u00e4 pikan\u00e4pp\u00e4imi\u00e4","text":"<p>Jupyter Notebookia k\u00e4ytett\u00e4ess\u00e4 on hyv\u00e4 tiet\u00e4\u00e4, ett\u00e4 siin\u00e4 on kaksi eri tilaa: Command Mode ja Edit Mode. T\u00e4ss\u00e4 mieless\u00e4 se toimii samalla tavalla kuin pahamainen <code>vim</code>, joka on gitiss\u00e4 usein vakioeditori.</p> <p>T\u00e4rkeimm\u00e4t pikan\u00e4pp\u00e4imet toimivat joka moodissa ja ne ovat ehdottomasti:</p> <ul> <li>Shift+Enter. Se ajaa aktiivisen solun ja siirtyy seuraavaan soluun. Jos seuraavaa solua ei ole, se luodaan.</li> <li>Ctrl+Enter joka ajaa solun siirtym\u00e4tt\u00e4 seuraavaan.</li> <li>Ctrl+S. Tallentaa.</li> </ul> <p>Command Modessa toimivat pikan\u00e4pp\u00e4imet.</p> Pikan\u00e4pp\u00e4in Komento Esc Poistuu Edit Modesta Command Modeen. Y Vaihtaa solun koodiksi. M Vaihtaa solun markdowniksi. A Lis\u00e4\u00e4 solun aktiivisen solun ylle B Lis\u00e4\u00e4 solun aktiivisen solun alle D+D Tuplaklikkaus. Poistaa aktiivisen solun. Up, Down tai J, K Selaa soluja yl\u00f6s ja alas <p>Edit Modessa toimivat pikan\u00e4pp\u00e4imet.</p> Pikan\u00e4pp\u00e4in Komento Enter Siirtyy Command Modesta Edit Modeen. <p>Mik\u00e4li tarvitset muita pikan\u00e4pp\u00e4imi\u00e4, ne l\u00f6ytyy <code>Help =&gt; Show Keyboard Shortcuts</code>.</p> <p>Tip</p> <p>Jupyter Notebookin k\u00e4yt\u00f6n oppii vain k\u00e4ytt\u00e4m\u00e4ll\u00e4 sit\u00e4! Kirjoita koodia eri soluihin ja kokeile, miten se toimii.</p>"},{"location":"ajaminen/syntaksi/","title":"Syntaksi","text":"<p>Warning</p> <p>T\u00e4m\u00e4 materiaali on historiasyist\u00e4 t\u00e4ss\u00e4. Tulevaisuudessa sen sis\u00e4lt\u00f6 hajautetaan eri lukujen alle (esim. Muuttujatyypit/Yleist\u00e4).</p> <p>Python lyhyesti:</p> <ul> <li>Python-ohjelma koostuu riveist\u00e4, jotka suoritetaan j\u00e4rjestyksess\u00e4 ylh\u00e4\u00e4lt\u00e4 alas.</li> <li>Rivit p\u00e4\u00e4ttyv\u00e4n rivinvaihtoon (tarkemmin merkkeihin <code>LF</code> tai <code>CR+LF</code>). Siisp\u00e4 komentoja ei p\u00e4\u00e4tet\u00e4 esimerkiksi <code>;</code>-merkkiin, kuten monissa muissa kieliss\u00e4.</li> <li>Tyhj\u00e4t rivit ovat sallittuja ja luettavuuden parantamiseksi jopa suositeltavia. Koodin voi jakaa loogisiin kokonaisuuksiin samalla tavalla kuin tavallisessa tekstiss\u00e4 kappaleet.</li> <li>Koodia ei erikseen k\u00e4\u00e4nnet\u00e4 bin\u00e4\u00e4riksi vaan Python-tulkki lukee <code>.py</code>-tiedostoa ja tulkkaa sit\u00e4 tavukoodiksi. Kyseess\u00e4 on siis tulkattava ohjelmointikieli.</li> <li>Python on olio-ohjelmointikieli, mutta ei sulje pois muiden paradigmojen kuten proseduraalisen tai funktionaalisen ohjelmoinnin k\u00e4ytt\u00f6\u00e4.</li> <li>Koodin on luonut Guido van Rossum ja sen nimi tulee Monty Python's Flying Circus -tv-sarjasta. Mik\u00e4li sarja on sinulle tuttu, tulet huomaamaan dokumentaatiossa useita viitteit\u00e4 ohjelmaan, kuten egg, ham, spam, spam, spam ...</li> <li>Kooditiedostot ovat tavallisesti UTF-8 -enkoodattuja ja tukevat n\u00e4in valtavaa merkist\u00f6\u00e4. My\u00f6s emojit toimivat. </li> <li>Sisennyksell\u00e4 on erityinen merkitys! Sill\u00e4 on siis merkityst\u00e4, ett\u00e4 alkaako rivi ilman v\u00e4lily\u00f6ntej\u00e4 vai 4, 8, 16 tai jollakin muulla m\u00e4\u00e4r\u00e4ll\u00e4 v\u00e4lily\u00f6ntej\u00e4. Konventio on, ett\u00e4 v\u00e4lily\u00f6ntej\u00e4 on aina nelj\u00e4ll\u00e4 jaollinen m\u00e4\u00e4r\u00e4, ja ett\u00e4 sisennykseen k\u00e4ytet\u00e4\u00e4n nimenomaan v\u00e4lily\u00f6nti\u00e4 eik\u00e4 koskaan tabulaattoria.</li> </ul> <p>Teht\u00e4v\u00e4</p> <p>Lue Python Docsin oma Whetting Your Appetite, joka mainostaa Pythonin vahvuuksia</p> <p>Tietokoneohjelmat tallentavat tietokoneen muistiin (eli \"rammiin\") muuttujien arvot. Monissa matalamman tason ohjelmointikieliss\u00e4, kuten C-kieless\u00e4, arvot tallennetaan muistiin kohtalaisen raakana. Python on hyvin korkean tason (eng. high level) ohjelmointikieli, joten yksinkertaisimmatkin asiat kuten kokonaisluvut (eng. integer) tallennetaan muistiin objekteina. Pythonissa ei ole C-kielest\u00e4 tuttu pointtereita.</p>"},{"location":"ajaminen/syntaksi/#esimerkkikoodia","title":"Esimerkkikoodia","text":"<p>Jotta Python tulisi v\u00e4litt\u00f6m\u00e4sti tutuksi, hyp\u00e4t\u00e4\u00e4n suoraan altaan syv\u00e4\u00e4n p\u00e4\u00e4tyyn ja tuijotetaan koodia. Mik\u00e4li et ole aiemmin ohjelmoinut mill\u00e4\u00e4n kielell\u00e4, et v\u00e4ltt\u00e4m\u00e4tt\u00e4 ymm\u00e4rr\u00e4 alla olevaa koodia kokonaisuudessaan. Yritet\u00e4\u00e4n silti silm\u00e4ill\u00e4, mit\u00e4 siin\u00e4 tapahtuu. Koodissa m\u00e4\u00e4ritell\u00e4\u00e4n tyypillinen Python-funktio. Kyseinen funktio ottaa sis\u00e4\u00e4ns\u00e4 yhden positionaalisen argumentin (<code>words</code>) sek\u00e4 kaksi keyword argumenttia (<code>per_row</code> sek\u00e4 <code>margin</code>). Funktio ottaa sis\u00e4\u00e4ns\u00e4 listan sanoja ja tulostaa ne ruudulle tabulaarisessa muodossa. Esimerkki funktiokutsusta on hieman alempana.</p> <pre><code>def print_as_tabular(           # (1)\n        words:list[str],        # (2)\n        per_row:int=5,\n        margin:int=2\n    ):                          # (3)\n\n    # Calculate variables       # (4)\n    column_width = max([len(x) for x in words]) + margin\n    n_words = len(words)                                  # (5)\n\n    # Loop and print\n    for batch in range(0, n_words, per_row):              # (6)\n        row_words = words[batch:batch + per_row]\n        for word in row_words:\n            print(f\"{word:&lt;{column_width}}\", end=\"\")      # (7)\n        print()\n</code></pre> <ol> <li>Funktio m\u00e4\u00e4ritell\u00e4\u00e4n <code>def</code>-sanalla. Funktion nimi on t\u00e4ss\u00e4 tapauksessa <code>print_as_tabular</code>. Argumentit m\u00e4\u00e4ritell\u00e4\u00e4n funktion nimen j\u00e4lkeen sulkujen v\u00e4liin pilkulla erotettuna.</li> <li>Funktion ensimm\u00e4inen argumentti ei sis\u00e4ll\u00e4 default-arvoa ja on n\u00e4in positionaalinen argumentti. K\u00e4ytt\u00e4j\u00e4n on pakko antaa sille arvo funktiota kutsuttaessa. Rivi sis\u00e4lt\u00e4\u00e4 my\u00f6s Pythonissa suhteellisen tuoreen <code>type hint</code>-vihjeen, joka on <code>list[str]</code>. N\u00e4in k\u00e4ytt\u00e4j\u00e4 sek\u00e4 IDE kuten VSCode tiet\u00e4v\u00e4t, ett\u00e4 ensimm\u00e4isen argumentin kuuluisi olla lista, joka sis\u00e4lt\u00e4\u00e4 merkkijonoja. Kaksi muuta argumenttia ovat vailla default-arvoa, mutta my\u00f6s niill\u00e4 on tyyppivihje (<code>int</code>). Positionaaliset argumentit tulee aina m\u00e4\u00e4ritell\u00e4 ennen keyword-argumentteja.</li> <li>Funktion m\u00e4\u00e4rittely lopetetaan sulken j\u00e4lkeen puolipisteeseen. Funktion runko jatkuu seuraavilla riveill\u00e4 siten, ett\u00e4 sit\u00e4 on sisennetty nelj\u00e4ll\u00e4 v\u00e4lily\u00f6nnill\u00e4. Pythonissa l\u00e4hes aina yksitt\u00e4inen rivi sis\u00e4lt\u00e4\u00e4 jonkin kokonaisuuden, kuten funktion m\u00e4\u00e4rittelyn. Sulkeet ovat poikkeus. Sulkeiden v\u00e4liss\u00e4 olevan sis\u00e4ll\u00f6n saa jakaa haluamalleen m\u00e4\u00e4r\u00e4lle rivej\u00e4, kunhan noudattaa sisennyss\u00e4\u00e4nt\u00f6j\u00e4.</li> <li>Yhden rivin kommentit aloitetaan risuaidalla.</li> <li>Uusia muuttujia ei tarvitse erikseen alustaa mitenk\u00e4\u00e4n eik\u00e4 niille tarvitse m\u00e4\u00e4ritell\u00e4 tietty\u00e4 tyyppi\u00e4 kuten <code>int</code> tai <code>str</code>. Tyyppivihje on kuitenkin tuettuna; sit\u00e4 ei vain k\u00e4ytet\u00e4 t\u00e4ss\u00e4 esimerkiss\u00e4.</li> <li>Kontrolli- ja silmukkarakenteet kuten <code>for</code> muistuttavat funktion m\u00e4\u00e4rittely\u00e4 rakenteeltaan. Rivin viimeinen merkki on puolipiste. Rakenteen runko on sisennetty 4 v\u00e4lily\u00f6nnill\u00e4 m\u00e4\u00e4rittelyyn n\u00e4hden.</li> <li>Tavallisesti sis\u00e4\u00e4nrakennetun <code>print</code>-funktion kutsuminen luo yhden rivin per kutsu. T\u00e4ss\u00e4 sit\u00e4 rikotaan antamalla funktiolle keyword-argumentti <code>end</code>, jossa rivi lopetetaan rivinvaihdon sijasta pelk\u00e4ll\u00e4 tyhj\u00e4ll\u00e4.</li> </ol>"},{"location":"ajaminen/syntaksi/#varatut-avainsanat","title":"Varatut avainsanat","text":"<p>Pythonissa, kuten muissakin ohjelmointikieliss\u00e4, on tiettyj\u00e4 sanoja, joita ei saa k\u00e4ytt\u00e4\u00e4 koodissa esimerkiksi muuttujien nimin\u00e4. Kehitysymp\u00e4rist\u00f6t kuten Visual Studio Code onneksi useimmiten varoittavat n\u00e4ist\u00e4, tai v\u00e4hint\u00e4\u00e4n sanat piirtyy ruutuun eri v\u00e4rill\u00e4 kuin muut sanat. Pythonin varatut avainsanat l\u00f6ytyv\u00e4t <code>keyword</code>-kirjastosta. Kirjasto on sis\u00e4\u00e4nrakennetut, joten sit\u00e4 ei tarvitse erikseen asentaa tai ladata.</p> <pre><code>import keyword\n\n# Kutsutaan yll\u00e4 luomaamme funktiota.\n# Funktio tulostaa ruudulle listan tabulaariseen muotoon.\nprint_as_tabular(keyword.kwlist)\n</code></pre> <p>Ruudulle tulostuu:</p> <pre><code>False     None      True      and       as\nassert    async     await     break     class\ncontinue  def       del       elif      else\nexcept    finally   for       from      global\nif        import    in        is        lambda\nnonlocal  not       or        pass      raise\nreturn    try       while     with      yield\n</code></pre> <p>Listalla n\u00e4kyvist\u00e4 sanoista l\u00e4hes jokainen tulee t\u00e4m\u00e4n kurssin aikana sinulle tutuksi.</p>"},{"location":"ajaminen/syntaksi/#valteltavat-avainsanat","title":"V\u00e4ltelt\u00e4v\u00e4t avainsanat","text":"<p>Yll\u00e4 listattujen ehdottomasti kiellettyjen sanojen lis\u00e4ksi on sis\u00e4\u00e4nrakennettuja funktioita, joiden jyr\u00e4\u00e4minen omille funktioilla on hyv\u00e4n tavan vastaista. N\u00e4m\u00e4 l\u00f6ytyv\u00e4t <code>builtins</code>-kirjastosta. Tulostetaan niist\u00e4 vain ne, jotka alkavat pienell\u00e4 kirjaimella. Suurella kirjaimella alkavat ovat p\u00e4\u00e4osin poikkeuksia (eng. exceptions). N\u00e4it\u00e4 ovat muun muassa <code>SyntaxError</code>, jonka Python nostaa aina kun koodi sis\u00e4lt\u00e4\u00e4 jotakin, mit\u00e4 ei voi suorittaa, tai <code>IndentationError</code>, jonka Python nostaa mik\u00e4li sinulla on ep\u00e4kelpo m\u00e4\u00e4r\u00e4 v\u00e4lily\u00f6ntej\u00e4 koodissa. Alla on koodi, joka tulostaa vain pienell\u00e4 kirjaimella alkavat:</p> <pre><code>import builtins\n\n# Haetaan builtins:sta vain pienell\u00e4 kirjaimella alkavat\nlow_case_builtins = [x for x in dir(builtins) if x[0].islower()]\n\n# Hy\u00f6dynnet\u00e4\u00e4n taas yll\u00e4 luomaamme funktiota\n# Onpa funktiot n\u00e4pp\u00e4ri\u00e4, ei tarvi kirjoittaa koodia monesti!\nprint_as_tabular(low_case_builtins, per_row=4)\n</code></pre> <p>Ruudulle tulostuu:</p> <pre><code>abs           aiter         all           anext         any           ascii\nbin           bool          breakpoint    bytearray     bytes         callable\nchr           classmethod   compile       complex       copyright     credits\ndelattr       dict          dir           display       divmod        enumerate\neval          exec          execfile      filter        float         format\nfrozenset     get_ipython   getattr       globals       hasattr       hash\nhelp          hex           id            input         int           isinstance\nissubclass    iter          len           license       list          locals\nmap           max           memoryview    min           next          object\noct           open          ord           pow           print         property\nrange         repr          reversed      round         runfile       set\nsetattr       slice         sorted        staticmethod  str           sum\nsuper         tuple         type          vars          zip\n</code></pre>"},{"location":"ajaminen/syntaksi/#case-snake-case","title":"Case: Snake case","text":"<p>Monissa ohjelmointikieliss\u00e4, kuten Javassa, k\u00e4ytet\u00e4\u00e4n niin sanottua camel casea, jossa muuttuja voi olla muotoa <code>myVariableName</code>, luokat ovat yleens\u00e4 kapitaaleilla alkavaa Pascal casea eli <code>MyClassName</code>. Pythonissa on k\u00e4yt\u00f6ss\u00e4 snake case. Noudata seuraavia PEP 8 -suosituksia.</p> Entiteetti Esimerkki Muuttuja (variable) <code>a</code>, <code>car</code>, <code>cars</code>, <code>my_variable</code> Funktio (function) <code>is_boolean</code>, <code>get_item</code>, <code>calculate</code> Luokka (class) <code>Car</code>, <code>CarList</code>, <code>Calculator</code>, <code>User</code> Moduuli (module) <code>main.py</code>, <code>__init__.py</code>, <code>my_program.py</code> Paketti (package) <code>helpers</code>, <code>utils</code>, <code>models</code>. <p>Suosi kuvaavia nimi\u00e4 silloin kun mahdollista. T\u00e4m\u00e4 auttaa pit\u00e4m\u00e4\u00e4n koodisi luettavana ilman valtavaa m\u00e4\u00e4r\u00e4\u00e4 avustavaa dokumentaatiota. Mik\u00e4li jokin asia on lista, kuten <code>cars</code>, niin pid\u00e4 nimi monikossa. T\u00e4m\u00e4 mahdollistaa helppolukuisen <code>for car in cars</code>-lauseen kuten my\u00f6s <code>if 'Ferrari' in cars</code>-lauseen.</p> <p>Pakettien nimiin voi sis\u00e4llytt\u00e4\u00e4 h\u00e4t\u00e4tapauksessa my\u00f6s alaviivan <code>_</code> kuten <code>my_package</code>, mutta ei koskaan v\u00e4liviivaa. Eth\u00e4n siis tee Python-moduuleja sis\u00e4lt\u00e4v\u00e4\u00e4 kansiota, jonka nimi on <code>my-package</code>. Projektikansio voi, kuten gitin parhaat k\u00e4yt\u00e4nn\u00f6t sanelevat, sis\u00e4lt\u00e4\u00e4 v\u00e4liviivan. Alla viel\u00e4 korostava esimerkki:</p> <pre><code>~/Code/gitname/project-x/                   # Projektin p\u00e4\u00e4kansio sis\u00e4lt\u00e4\u00e4\n~/Code/gitname/project-x/README.md          # .git-kansion, README:n ja muuta\n~/Code/gitname/project-x/.git/\n~/Code/gitname/project-x/project_x/main.py    # &lt;= Pythonille OK\n~/Code/gitname/project-x/project-x/main.py    # &lt;= EI\n</code></pre> <p>Aputiedostot, kuten <code>./data/my-awesome-image.png</code> saavat sis\u00e4lt\u00e4\u00e4 v\u00e4liviivoja, mutta pid\u00e4t v\u00e4liviivat poissa kaikesta, mik\u00e4 liittyy suoranaisesti Pythoniin. V\u00e4liviiva on matemaattinen miinusoperaatio.</p> <p>PEP 8 -tyyliohje l\u00f6ytyy kokonaisuudessaan t\u00e4\u00e4lt\u00e4: PEP 8 \u2013 Style Guide for Python Code. Osan tyylivirheist\u00e4 voi korjata automaattisten ty\u00f6kalujen kuten black avulla. N\u00e4ihin tutustutaan kurssin loppupuolella ajan sallimissa rajoissa.</p> <p>Lopuksi on hyv\u00e4 mainita viel\u00e4 piilotetut tai salaiset muuttujat. Jos n\u00e4et muuttujan muotoa <code>_variable</code> tai <code>_Foo__variable</code>, \u00e4l\u00e4 pakota sille mit\u00e4\u00e4n arvoa vaan anna sen olla. Lis\u00e4ksi Pythonissa on tiettyj\u00e4 erityisi\u00e4, \"magic object or attributes\"-ryhm\u00e4\u00e4n kuuluvia itemeit\u00e4, jotka tunnistaa kahdella alaviivalla alkavasta ja loppuvasta nimest\u00e4. N\u00e4it\u00e4 ovat esimerkiksi <code>__init.py__</code>-moduulin nimi, <code>__str__</code>-funktio, <code>__name__</code>-objekti ja niin edelleen. \u00c4l\u00e4 keksi vastaavia itse lis\u00e4\u00e4 vaan k\u00e4yt\u00e4 niit\u00e4 kuten dokumentaatio neuvoo.</p>"},{"location":"ajaminen/syntaksi/#muuttujien-nimet","title":"Muuttujien nimet","text":"<p>Muuttujien nimist\u00e4 on hyv\u00e4 k\u00e4yd\u00e4 viel\u00e4 pari lis\u00e4k\u00e4yt\u00e4nt\u00f6\u00e4 sek\u00e4 s\u00e4\u00e4nt\u00f6\u00e4. Pid\u00e4tt\u00e4ydy ASCII-merkist\u00f6ss\u00e4 eli mieluiten kirjaimissa a-z. J\u00e4t\u00e4 suuret kirjaimet luokkien ja pysyvien muuttujien k\u00e4ytt\u00f6\u00f6n. Python sallii tiettyj\u00e4 erityismerkkej\u00e4 muuttujan nimeksi. \u00c4l\u00e4 k\u00e4yt\u00e4 niit\u00e4. Alla esimerkki:</p> <pre><code>\u03c0 = 3.141592653589793  # EI\npi = 3.141592653589793 # KYLL\u00c4\n\n\u0398 = 1.12               # EI\ntheta = 1.12           # KYLL\u00c4\n</code></pre> <p>Yll\u00e4 olevan hyv\u00e4n k\u00e4yt\u00e4nn\u00f6n lis\u00e4ksi on my\u00f6s s\u00e4\u00e4nt\u00f6j\u00e4, joita on pakko noudattaa, tai muuten Python nostaa <code>SyntaxError</code>:n tai muun. N\u00e4it\u00e4 s\u00e4\u00e4nt\u00f6j\u00e4 ovat:</p> <ol> <li>Muuttujan nimi ei saa alkaa numerolla.</li> <li>Muuttuja ei saa sis\u00e4lt\u00e4\u00e4 v\u00e4lily\u00f6ntej\u00e4</li> <li>Muuttuja ei saa sis\u00e4lt\u00e4\u00e4 valtaosaa erikoismerkeist\u00e4</li> </ol> <p>Alla esimerkkej\u00e4, jotka eiv\u00e4t kertakaikkiaan k\u00e4y:</p> <pre><code>1_cat_named = \"Miaw\"\n99luftballons = \"Song\"\n\"food\" = \"Egg, ham, spam without spam\"\nmy favorite pet = \"Parrot\"\nmy-favorite-pet-race = \"Norwegian Blue\"\n\ud83d\udca9 = \"Mr. Hankey\"\n</code></pre>"},{"location":"ajaminen/tiedostosta/","title":"Tiedostosta","text":"<p>Nyt kun olet p\u00e4\u00e4ssyt koodin suorittamiseen asti siten, ett\u00e4 sinulla on olemassa pelk\u00e4n REPL:n sijasta tiedostoja, luothan projektille oman hakemiston, ja hakemiston sis\u00e4\u00e4n oman virtuaaliymp\u00e4rist\u00f6n. Aktivoi virtuaaliymp\u00e4rist\u00f6 aina kun ajat koodia.</p> <p>Warning</p> <p>T\u00e4m\u00e4 materiaali on vanhentunut. Voit lukea sen oppiaksesi, kuinka Pythonin omaa <code>venv</code>-moduulia k\u00e4ytet\u00e4\u00e4n, mutta suosittelen k\u00e4ytt\u00e4m\u00e4\u00e4n <code>uv</code>-ty\u00f6kalua. Sen k\u00e4ytt\u00f6\u00e4 en opeta t\u00e4ss\u00e4, koska se on neuvottuna Python Developer Tooling Handbook -sivustolla. Se on kattava ja helppo oppia, ja se on my\u00f6s suositeltu tapa tehd\u00e4 Pythonia.</p> <p>Lyhimmill\u00e4\u00e4n voit luoda <code>uv</code>-ty\u00f6kalun avulla projektihakemiston ja ajaa sen n\u00e4in:</p> <pre><code># Navigoi sinne mihin haluat projektin\n$ cd ~/Code/jackbauer/\n\n# Luo projekti\n$ uv init this-will-be-repo-name\n$ cd this-will-be-repo-name\n\n# Aja Hello world -placeholder koodi\n$ uv run main.py\n</code></pre> <p>Jos lis\u00e4\u00e4t <code>--project</code>-fl\u00e4gin init-komentoon, se siirt\u00e4\u00e4 applikaation koodin <code>src/</code>-hakemistoon ja lis\u00e4\u00e4 tarvittavat rivit <code>pyproject.toml</code>-tiedostoon. Voit tutustua t\u00e4h\u00e4n <code>uv</code>:n oman, selke\u00e4n dokumentaation avulla: uv: Creating Projects</p>"},{"location":"ajaminen/tiedostosta/#kaikkien-hakemistorakenteiden-aiti","title":"Kaikkien hakemistorakenteiden \u00e4iti","text":"<p>Warning</p> <p>T\u00e4m\u00e4 pit\u00e4isi kenties siirt\u00e4\u00e4 How to Git -sivustolle.</p> <p>T\u00e4ll\u00e4 kurssilla suositeltu tapa organisoida koodi on seuraavanlainen, ja sit\u00e4 suosittelee my\u00f6s Bryan Baum.</p> <pre><code>~/Code/&lt;namespace&gt;/&lt;project-name&gt;/\n</code></pre> <p>Alla sama selitettyn\u00e4:</p> <ul> <li>Code-hakemisto kuuluu kotihakemistoosi (jota edustaa <code>~</code>-merkki). Jatkossa kirjoita kaikki koodi t\u00e4m\u00e4n hakemiston sis\u00e4ll\u00e4 oleviin hakemistoihin.</li> <li>Namespace-tason hakemiston sis\u00e4\u00e4n kuuluvat kansiot, jotka edustavat Github- tai Gitlab-usernamea tai vastaavaa namespacea.</li> <li>Huomaa, ett\u00e4 hakemiston nimi ei ole <code>&lt;namespace&gt;</code>. T\u00e4m\u00e4 teksti kuuluu korvata namespacen arvolla ilman kulmasulkeita.</li> <li>Lue lis\u00e4\u00e4 namespace-termist\u00e4 Gitlabin dokumentaatiosta.</li> <li>Mik\u00e4li luot v\u00e4liaikaista tai kokeellista koodia, jota ei ole ikin\u00e4 tarkoitus lis\u00e4t\u00e4 Gitlabin kaltaiseen palveluun, suosittelen k\u00e4ytt\u00e4m\u00e4\u00e4n kansiota, joka edustaa pseudonamespace <code>private</code>.</li> <li>Projekti-tason hakemiston sis\u00e4\u00e4n tulee projekti juuri sill\u00e4 <code>path</code>:lla, jolla lis\u00e4isit projektin Gitlab, Github, Bitbucket, DevOps, CodeCommit tai muuhun palveluun.</li> <li>Huomaa, ett\u00e4 projektin nimi ei ole <code>&lt;project-name</code>, vaan kyseinen teksti kuuluu korvata oikealla projektin nimell\u00e4 ilman kulmasulkeita.</li> <li>Projektin polun kuuluu sis\u00e4lt\u00e4\u00e4 vain ja ainoastaan pieni\u00e4 kirjaimia (<code>a-z</code>), tarpeen mukaan v\u00e4liviivoja (<code>-</code>) ja \u00e4\u00e4rimm\u00e4isess\u00e4 h\u00e4d\u00e4ss\u00e4 my\u00f6s numeroita (<code>0-9</code>).</li> </ul> <p>Mik\u00e4li toimit n\u00e4in, hakemistosi pysyv\u00e4t j\u00e4rjestyksess\u00e4, ja j\u00e4rjestys t\u00e4sm\u00e4\u00e4 k\u00e4ytt\u00e4m\u00e4si Git-servicen rakenteeseen. Alla selvyyden vuoksi pari kuviteltua linkki\u00e4 Githubiin tai Gitlabiin sek\u00e4 niiden vastaavat kansiot.</p> <pre><code># K\u00e4ytt\u00e4j\u00e4n alex projekti example-yrityksen Gitlabissa\nhttps://gitlab.example.com/alex/my-project/\n=&gt; ~/Code/alex/my-project/\n\n# K\u00e4ytt\u00e4j\u00e4n alexblack Gitlab Cloud projekti\nhttps://gitlab.com/alexblack/public-project/\n=&gt; ~/Code/alexblack/public-project/\n\n# K\u00e4ytt\u00e4j\u00e4n essiesimerkki Kamit Gitlab projekti\nhttps://repo.kamit.fi/essiesimerkki/my-project/\n=&gt; ~/Code/essiesimerkki/my-project/\n\n# Essi Esimerkki kuuluu ryhm\u00e4\u00e4n pythonistas\n# Ja siin\u00e4 ryhm\u00e4ss\u00e4 h\u00e4n osallistuu ryhm\u00e4ty\u00f6h\u00f6n megaproject\nhttps://repo.kamit.fi/pythonistas/megaproject/\n=&gt; ~/Code/pythonistas/megaproject/\n\n# K\u00e4ytt\u00e4j\u00e4n sourander projekti python-perusteet (eli t\u00e4m\u00e4 t\u00e4ss\u00e4)\nhttps://github.com/sourander/python-perusteet\n=&gt; ~/Code/sourander/python-perusteet/\n</code></pre> <p>Esimerkiksi opettaja Jani Souranderin <code>~/Code/</code>-kansion sis\u00e4lt\u00f6 voisi n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4:</p> <pre><code>.\n\u251c\u2500\u2500 jsourand1                 # Kamit Gitlab-tunnus\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 repo-manager\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 how-to-git\n\u251c\u2500\u2500 jsourand1                 # DC Labran Gitlab-tunnus\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 parrot\n\u251c\u2500\u2500 private                   # Yksityisi\u00e4 testiprojekteja\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 foobar\n\u251c\u2500\u2500 pythonistas               # Ehk\u00e4 my\u00f6s min\u00e4 olen pythonistas-ryhm\u00e4ss\u00e4\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 megaproject\n\u2514\u2500\u2500 sourander                 # Julkinen Github/Gitlab tunnus\n    \u251c\u2500\u2500 linux-perusteet\n    \u251c\u2500\u2500 python-perusteet\n    \u2514\u2500\u2500 python-perusteet-code\n</code></pre>"},{"location":"ajaminen/tiedostosta/#tee-ensimmainen-projekti","title":"Tee ensimm\u00e4inen projekti","text":"<p>Tip</p> <p>Sanan <code>foobar</code> ja siihen liittyvien <code>foo</code>, <code>bar</code> ja <code>baz</code> sanojen k\u00e4ytt\u00f6 esimerkeiss\u00e4 ja testiprojekteissa on yleinen koventio ohjelmistonkehitt\u00e4jien piiriss\u00e4, hieman samalla tavalla kuin kirjoitetun tekstin korvaana olevan <code>lorem ipsum</code>, joka on latinaa muistuttavaa, t\u00e4ysin merkitykset\u00f6nt\u00e4 teksti\u00e4. Tutustu aiheeseen esimerkiksi Foobar wikipedia-sivulla.</p> <p>Luo ensimm\u00e4inen projekti ja sille oma virtuaaliymp\u00e4rist\u00f6. Luomamme projekti on v\u00e4liaikainen eik\u00e4 sit\u00e4 aiota s\u00e4il\u00f6\u00e4 ikin\u00e4 gittiin, joten <code>~/Code/private/</code> on sille sopiva lokaatio. Avaa Git Bash ja aja seuraavat komennot.</p> <pre><code># Parametri -p luo hakemistot (rekursiivisesti),\n# oli niit\u00e4 olemassa tai ei.\n$ mkdir -p ~/Code/private/foobar\n\n# Siirry \u00e4sken luotuun hakemistoon\n$ cd ~/Code/private/foobar\n\n# Luo Pythonilla virtuaaliymp\u00e4rist\u00f6\n$ python -m venv .venv\n\n# Luo projektikansio\n$ mkdir foo\n\n# Luo projektikansioon tiedostoja\n$ touch foo/main.py\n$ touch foo/__init__.py\n\n# Aktivoi virtuaaliymp\u00e4rist\u00f6\n$ source .venv/Scripts/activate  # &lt;= Windows\n$ source .venv/bin/activate      # &lt;= macOS ja Linux\n</code></pre> <p>Nyt sinulla on hakemistorakenne luotuna. Varmista, ett\u00e4 hakemisto sis\u00e4lt\u00e4\u00e4 oikeat tiedostot. Jos et muuten ole varma, k\u00e4y hakemistossa esimerkiksi Windowsin File Explorerilla. Hakemiston sis\u00e4ll\u00f6n pit\u00e4isi olla seuraava:</p> <pre><code>.\n\u251c\u2500\u2500 .venv    # .venv on hakemisto\n\u2514\u2500\u2500 foo\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 main.py\n</code></pre>"},{"location":"ajaminen/tiedostosta/#ensimmainen-rivi-koodia","title":"Ensimm\u00e4inen rivi koodia","text":"<p>Nyt on aika luoda koodia. Ennen kuin siirryt\u00e4\u00e4n k\u00e4ytt\u00e4m\u00e4\u00e4n Visual Studio Codea, kokeillaan luoda koodia ilman sit\u00e4. Git Bashiss\u00e4, useimmissa Linux-distribuutioissa ja macOS:ss\u00e4 on kaikissa tekstieditori nimelt\u00e4\u00e4n <code>nano</code>, joka muistuttaa l\u00e4heisesti tyypillist\u00e4 Notepadi\u00e4, mutta sill\u00e4 ei ole graafista k\u00e4ytt\u00f6liittym\u00e4\u00e4. K\u00e4ytet\u00e4\u00e4n sit\u00e4.</p> <pre><code>$ nano foo/main.py\n</code></pre> <p></p> <p>Kuvio 1: Nano macOS:ss\u00e4 avattuna. Tekstieditorissa on auki tiedosto <code>main.py</code>.</p> <p>Kirjoita tiedoston sis\u00e4\u00e4n yksinkertainen, yksin rivin koodi. Huomaa, ett\u00e4 voit kirjoittaa lainausmerkkien v\u00e4liin mink\u00e4 tahansa viestin, mink\u00e4 haluat ohjelman tulostavan. T\u00e4ss\u00e4 esitelty hello world on ohjelmistokielen k\u00e4ytt\u00f6\u00f6nottoon liittyv\u00e4 konventio, jossa tietokone laitetaan tervehtim\u00e4\u00e4n maailmaa ik\u00e4\u00e4n kuin uudesti maailmaan syntyneen\u00e4. Kirjoita <code>nano</code>-ohjelmsassa tiedostoon seuraava sis\u00e4lt\u00f6:</p> <pre><code>print(\"Hello world\")  # &lt;= Voit korvata viestin haluamallasi tekstill\u00e4.\n</code></pre> <p>Ohjelma ei k\u00e4yt\u00e4 samoja pikan\u00e4pp\u00e4imi\u00e4 kuin tyypilliset Windows-sovellukset, joten painele n\u00e4pp\u00e4imi\u00e4 summamutikassa. Lue sen sijaan ruudun alalaidas ohjeet. Tarvitset n\u00e4ist\u00e4 kahta komentoa:</p> <ul> <li>Ctrl+O kirjoittaa tiedoston (eli \"tallentaa\" sen tiedostoon).</li> <li>Ctrl+X poistuu ohjelmasta.</li> </ul> <p>Nyt voit suorittaa kirjoittamasi koodin Python-tulkilla. T\u00e4m\u00e4 onnistuu seuraavalla komennolla:</p> <pre><code># Vaihtoehto 1: Ajetaan tiedostona\n$ uv run python foo/main.py\nHello world\n\n# Vaihtoehto 2: Ajetaan moduulina\n$ uv run python -m foo.main\nHello world\n\n# Vaihtoehto 3: Sy\u00f6tet\u00e4\u00e4n ajettava koodi argumentin -c arvona\n$ uv run python -c \"import foo.main\"\nHello world\n</code></pre> <p>Huomaa, ett\u00e4 moduuli <code>main</code> kuuluu pakettiin <code>foo</code>. Olet jo aiemminkin ajanut Pythonissa moduuleita. Aiemmin ajettu <code>python -m venv</code> suoritti moduulin nimelt\u00e4\u00e4n <code>venv</code>. Kyseinen moduuli on, aivan kuten kaikki muukin Pythonin ajama koodi, jossakin tiedostossa. Voit selvitt\u00e4\u00e4 tiedoston sijainnin n\u00e4in:</p> <pre><code>$ uv run python -c \"import venv; print(venv.__file__)\"\n/Users/opettaja/.pyenv/versions/3.11.5/lib/python3.11/venv/__init__.py\n</code></pre> <p>Python on avointa l\u00e4hdekoodia, ja kyseisen moduulin koodi l\u00f6ytyy Githubista python/cpython/Lib/venv/.</p> <p>Teht\u00e4v\u00e4</p> <p>Yll\u00e4 mainitaan CPython. Selvit\u00e4, mik\u00e4 CPython oikeastaan on. Vinkki: vaihtoehtoja ovat muiden muassa Jython, Pypy.</p>"},{"location":"ajaminen/tiedostosta/#visual-studio-code","title":"Visual Studio Code","text":"<p>Avataan sama projekti Visual Studio Codessa. T\u00e4m\u00e4n pit\u00e4isi onnistua seuraavalla komennolla Git Bashiss\u00e4:</p> <pre><code>$ pwd      # Varmista, ett\u00e4 olet oikeassa hakemistossa\n~/Code/private/foobar\n\n$ code .   # K\u00e4ynnist\u00e4 nykyinen hakemisto Codessa.\n</code></pre> <p>Vaihtoehtoisesti voit k\u00e4ynnist\u00e4\u00e4 Visual Studio Coden k\u00e4sin ja valita <code>File =&gt; Open Folder</code>, etsi\u00e4 nykyisen projektikansion <code>foobar</code>, ja painaa <code>Open</code>.</p> <p>Teht\u00e4v\u00e4</p> <p>Nyt osaat luoda <code>.py</code>-p\u00e4\u00e4tteisen skriptin ja ajaa sen. Kokeile copy-pastettaa Syntaksi-sivun koodia otsiskon \"V\u00e4ltelt\u00e4v\u00e4t avainsanat\" alta. Muokkaa koodia siten, ett\u00e4 ruutuun tulostuvat nimenomaan ne builtinit, jotka eiv\u00e4t ala pienell\u00e4 kirjaimella, vaan mill\u00e4 tahansa paitsi pienell\u00e4 kirjaimella. Huomaathan, ett\u00e4 sinun tarvitsee kopioida my\u00f6s funktion m\u00e4\u00e4ritelm\u00e4 samaan tiedostoon. Vihje teht\u00e4v\u00e4\u00e4n: <code>not</code>.</p>"},{"location":"ajaminen/uv/","title":"uv","text":"<p>Warning</p> <p>T\u00e4m\u00e4 materiaali on raakile. Se saa lis\u00e4\u00e4 t\u00e4ytett\u00e4, kunhan opettaja ehtii kirjoittaa.</p> <p>Sinut neuvottiin asentamaan Python uv:n avulla, mutta toistaiseksi olet vasta asentanut uv:n, et Pythonia. <code>uv</code> asentaa Pythonin tarpeen mukaan automaattisesti, tai voit asentaa sen k\u00e4sin n\u00e4in:</p> <pre><code># Install\nuv python install 3.12\n\n# ... or upgrade\nuv python install 3.12 --reinstall\n</code></pre> <p>Jatkossa kun ajat Pythonia, aloita rivi n\u00e4in:</p> <pre><code>uv run python [tiedosto] [argumentit]\n</code></pre> <p>Esimerkiksi:</p> <pre><code># Aja main.py\nuv run python main.py\n\n# Aja REPL\nuv run python\n\n# Aja REPL Git Bashiss\u00e4 winpty:n kanssa\nwinpty uv run python\n</code></pre> <p>T\u00e4t\u00e4 pikaohjetta enemp\u00e4\u00e4 en neuvo, koska Python Developer Tooling Handbook-sivuston Tutoriaali on niin kattava. Seuraa kyseisen sivuston ohjeita, ja opit tekem\u00e4\u00e4n <code>uv</code>:n avulla Python-kirjaston, puskemaan sen PyPi:iin ja tekem\u00e4\u00e4n sek\u00e4 unit-testit ett\u00e4 staattista koodianalyysi\u00e4 ruffilla.</p>"},{"location":"asennus/linux/","title":"Python (linux)","text":"<p>Useimmissa distribuutioissa on jokin Python-versio jo valmiiksi asennettuna. Sinulla on vaihtoehtoina joko k\u00e4ytt\u00e4\u00e4 valmiiksi asennettua versiota tai asentaa tuoreempi. Kummassakin on hy\u00f6tyns\u00e4 ja haittansa. T\u00e4ss\u00e4 materiaalissa suositellaan Pythonin asentamista <code>uv</code>-ty\u00f6kalun avulla.</p>"},{"location":"asennus/linux/#asenna-git","title":"Asenna git","text":"<p>Mik\u00e4li sinun distribuutiosi ei asenna gitti\u00e4 automaattisesti, asenna se. Ubuntussa se asennetaan komennolla <code>sudo apt update &amp;&amp; sudo apt install git -y</code>. Laita my\u00f6s konfiguraatiot kuntoon. N\u00e4m\u00e4 voit tarkistaa macOS-asennusohjeesta tai How to Git-sivustolta.</p>"},{"location":"asennus/linux/#asenna-uv","title":"Asenna uv","text":"<p>Uv-ty\u00f6kalun asennus on niin hyvin dokumentoitu (ja on vain yksi komento), joten viittaan suoraan alkuper\u00e4iseen ohjeeseen: uv</p>"},{"location":"asennus/macOS/","title":"Python (mac)","text":""},{"location":"asennus/macOS/#kayta-z-shellia","title":"K\u00e4yt\u00e4 Z Shelli\u00e4","text":"<p>Z Shellin (<code>zsh</code>) pit\u00e4isi olla macOS:ss\u00e4 nykyisin default, mutta voi my\u00f6s olla, ett\u00e4 Terminal k\u00e4ynnist\u00e4\u00e4 kilpailevan shellin eli <code>bash</code>:n. Mik\u00e4li n\u00e4in on, macOS:n pit\u00e4isi neuvoa sinua ajamaan komento, joka n\u00e4kyy alla. Aja komento ja k\u00e4ynnist\u00e4 Terminal uusiksi.</p> <pre><code>$ chsh -s /bin/zsh\n</code></pre> <p>On suositeltavaa asentaa my\u00f6s Oh My Zsh ja aktivoida ssh-agent plugin. T\u00e4m\u00e4 neuvotaan Linux Perusteet-kurssilla.</p>"},{"location":"asennus/macOS/#asenna-homebrew","title":"Asenna Homebrew","text":"<p>Homebrew on vastaavanlainen paketinhallinta kuin Snap, Flatpak, Chocolatey tai jopa Ubuntusta tuttu ATP tai Red Hatist\u00e4 tuttu DNF. Valitettavasti macOS:ss\u00e4 ei ole valmiina omaa, joten avoimen l\u00e4hdekoodin yhteis\u00f6 on luonut puutteen tilalle Homebrew:n. Sit\u00e4 k\u00e4ytet\u00e4\u00e4n asentamaan, p\u00e4ivitt\u00e4m\u00e4\u00e4n, hallinnoimaan ja poistamaan sovelluksia. Useimpia ohjelmistonkehitykseen tai shell-komentoihin liittyvi\u00e4 sovelluksia et l\u00f6yd\u00e4 AppStoresta vaan ne tulee asentaa Homebrew:n tai vastaavan avulla. Jos haluat tarkat asennusohjeet, lue mac.install.guide-sivuston: Install Homebrew Complete Guide. Jos olet pelkk\u00e4\u00e4 asennuskomentoa vailla, aja Homebrew:n kotisivuilta l\u00f6ytyv\u00e4 komento:</p> <pre><code># Homebrew:n asennuskomento on bashill\u00e4 ajettava shell-skripti. T\u00e4m\u00e4 komento lataa ja ajaa sen.\n# Tuloste sis\u00e4lt\u00e4\u00e4 ohjeistusta ja tietoja asennuksesta. Lue se! Alla lyhennelm\u00e4:\n$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n==&gt; This script will install:\n/opt/homebrew/bin/brew\n...\n==&gt; The following new directories will be created:\n/opt/homebrew/bin\n/opt/homebrew/etc\n...\n</code></pre> <p>HUOM! Jos olet joskus ajanut komennon <code>xcode-select --install</code>, joka asentaa Linux-maailmasta tuttuja komentorivilt\u00e4 ajettavia sovelluksia kuten <code>gcc</code> sek\u00e4 <code>clang</code>. Mik\u00e4li et, Homebrew:n asennus k\u00e4ynnist\u00e4\u00e4 XCode Command Line Tools:n asennuksen. Homebrew tarvitsee n\u00e4it\u00e4 ohjelmia.</p> <p>Lue asennuksen tarjoamat ohjeet tarkkaan. Asennus pyyt\u00e4\u00e4 sinua lis\u00e4\u00e4m\u00e4\u00e4n yhden rivin .zprofile-tiedostoon, joka voi olla tai voi olla olematta k\u00e4yt\u00f6ss\u00e4 vakiona. Rivi n\u00e4ytt\u00e4\u00e4 muutoin samalta kuin alla oleva, mutta alla olevassa on mukana kommentti. Suosittelen pit\u00e4m\u00e4\u00e4n <code>.zprofile</code> ja <code>.zshrc</code> tiedostot kommentoituina, jotta tied\u00e4t mit\u00e4 mik\u00e4kin rivi tekee, ja miksi olet sen sinne lis\u00e4nnyt.</p> <pre><code># .zprofile sis\u00e4lt\u00f6 alla:\n\n# Add Homebrew-related env variables\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n</code></pre> <p>Jatkossa ymp\u00e4rist\u00f6muuttujan <code>$PATH</code> pit\u00e4isi sis\u00e4lt\u00e4\u00e4 Homebrew:n asennuskansio. Voit tarkistaa t\u00e4m\u00e4n seuraavalla komennolla. Tulosteen pit\u00e4isi sis\u00e4lt\u00e4\u00e4 kansio <code>/opt/homebrew/bin</code> jos sinulla on ARM-sirullinen Apple. Vanhemmissa Intel-pohjaisissa koneissa asennuskansio on <code>/usr/local</code>. Asennuskansion pit\u00e4isi olla sinulle tuttu, mik\u00e4li luit aiempien komentojen tulosteen.</p> <pre><code>$ echo $PATH | tr \":\" \"\\n\"\n/opt/homebrew/bin\n/opt/homebrew/sbin\n/usr/local/bin\n...\n</code></pre>"},{"location":"asennus/macOS/#asenna-git","title":"Asenna git","text":"<p>Python-koodi kannattaa pist\u00e4\u00e4 l\u00e4hes poikkeuksetta gittiin, ja t\u00e4m\u00e4 on usein my\u00f6s eri kursseilla teht\u00e4v\u00e4nantojen oletus. Xcode:n mukana tulee Applen oma h\u00f6yste <code>git</code>-ty\u00f6kalusta, mutta suosittelen asentamaan Homebrew:n hallinnoiman version.</p> <pre><code># Asenna\n$ brew install git\n\n# Tarkista ett\u00e4 on asentunut\n$ git --version\ngit version 2.42.0\n\n# Varmista, ett\u00e4 lokaationa on nimenomaan Homebrew:n asennuskansio\n# EI SIIS /usr/bin/git vaan alla n\u00e4kyv\u00e4 tuloste\n$ type git\ngit is /opt/homebrew/bin/git\n\n# Mik\u00e4li yll\u00e4 oleva tuloste viittaa /usr/bin-kansion executableen, aja seuraava\n# komento ja kokeile uusiksi\nrehash\n</code></pre>"},{"location":"asennus/macOS/#konfiguroi-git","title":"Konfiguroi git","text":"<p>Gittiin kannattaa asettaa itselleen sopivat global konfiguraatiot. N\u00e4m\u00e4 neuvotaan How to Git -materiaalissa, mutta alla todenn\u00e4k\u00f6isesti sinulle toimivat arvot. Vaihda nimen tilalle oma nimesi ja s\u00e4hk\u00f6postiosoitteen tilalle koulun s\u00e4hk\u00f6postiosoitteesi.</p> <pre><code>$ git config --global user.name \"Etunimi Sukunimi\"\n$ git config --global user.email \"etunimisukunimi@kamk.fi\"\n$ git config --global pull.ff only\n$ git config --global init.defaultBranch main\n</code></pre>"},{"location":"asennus/macOS/#git-credential-manager","title":"Git Credential Manager","text":"<p>Jos k\u00e4yt\u00e4t pelk\u00e4st\u00e4\u00e4n ssh-avaimia, t\u00e4m\u00e4 vaihe ei ole v\u00e4ltt\u00e4m\u00e4tt\u00e4 tarpeen. Jos haluat kirjautua Githubiin tai GitLabiin ilman ssh-avainta, Git Credential Manager (GCM) on t\u00e4ll\u00e4 hetkell\u00e4 suositeltu tapa.</p> <p>Se asentuu n\u00e4in:</p> <pre><code>$ brew install --cask git-credential-manager\n</code></pre> <p>Seuraavalla kerralla kun kloonaat HTTPS-urlilla repositorion, git avaa ikkunan, jossa se pyyt\u00e4\u00e4 sinua kirjautumaan sis\u00e4\u00e4n Oauth-tyylisesti palveluun. T\u00e4m\u00e4 luo tokenin, joka oikeuttaa kyseisen repositorion kloonaamisen. Mik\u00e4li 2FA on p\u00e4\u00e4ll\u00e4, kysyy se my\u00f6s sit\u00e4.</p>"},{"location":"asennus/macOS/#asenna-uv","title":"Asenna uv","text":"<p>Uv-ty\u00f6kalun asennus on niin hyvin dokumentoitu (ja on vain yksi komento), joten viittaan suoraan alkuper\u00e4iseen ohjeeseen: uv</p> <p>Uv-ty\u00f6kalun k\u00e4ytt\u00f6 neuvotaan Ajaminen/uv -sivulla.</p>"},{"location":"asennus/vscode/","title":"VSCode","text":""},{"location":"asennus/vscode/#asenna","title":"Asenna","text":"<p>Mik\u00e4li sinulla on jo Visual Studio Code asennettuna, hypp\u00e4\u00e4 seuraavaan aliotsikkoon.</p> <ul> <li>Windowsille Visual Studio Code asennetaan Visual Studio Code:n sivuilta.</li> <li>macOS:lle voit asentaa sen joko lataamalla asennuspaketin samalta sivustolta, tai, k\u00e4ytt\u00e4m\u00e4ll\u00e4 Homebrew:ta. Homebrew:n asennus ja perusk\u00e4ytt\u00f6 on neuvottu t\u00e4m\u00e4n saitin macOS-ohjeessa, jonka toivon mukaan olet jo lukenut, jos olet macOS-k\u00e4ytt\u00e4j\u00e4.</li> <li>Linuxissa asennus riippuu distrosta. Etsi ty\u00f6p\u00f6yt\u00e4ymp\u00e4rist\u00f6st\u00e4si <code>GNOME Software</code> tai lataa k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4\u00e4si sopiva paketti Visual Studio Code Downloads-sivulta.</li> </ul> <p>Jos asennat macOS:ss\u00e4 Homebrew:t\u00e4 k\u00e4ytt\u00e4en, aja komento:</p> <pre><code>$ brew install --cask visual-studio-code\n</code></pre>"},{"location":"asennus/vscode/#asetukset","title":"Asetukset","text":"<p>Visual Studio Codessa useimmat asetukset p\u00e4\u00e4tyv\u00e4t JSON-tiedostoon. P\u00e4\u00e4set tiedostoon k\u00e4siksi n\u00e4in:</p> <ol> <li>Avaa Command Palette. Pikan\u00e4pp\u00e4in on Windowsissa Ctrlshift+p++ ja macOS:ss\u00e4 ShiftcommandP.</li> <li>Etsi sanaa \"Settings\"</li> </ol> <p>Listalta pit\u00e4isi l\u00f6yty\u00e4 seuraavat vaihtoehdot:</p> <ul> <li>Preferences: Open User Settings (JSON)</li> <li>Preferences: Open User Settings</li> <li>Preferences: Open Default Settings (JSON)</li> <li>Preferences: Open Default Settings</li> <li>Preferences: Open Workspace Settings (JSON)</li> <li>Preferences: Open Workspace Settings</li> </ul> <p>Huomaat, ett\u00e4 l\u00e4hes kaikkia asetuksia voi s\u00e4\u00e4t\u00e4\u00e4 joko menujen kautta tai kirjoittamalla k\u00e4sin JSON-konfiguraatiotiedostoon rivej\u00e4. Osa asetuksista vaatii, ett\u00e4 kirjoitat ne k\u00e4sin, osalle l\u00f6ytyy menuista mukava, valmis nappi.</p> <p>Jos valitsit VS Coden k\u00e4ynnistymisen yhteydess\u00e4 v\u00e4riteeman \"Default Dark Modern\" ja laitat menuista (Preferences: Open User Setttings) asetuksen \"Git: Autofetch\" tilaan <code>false</code>, ja asetat Git Bashin oletusterminaaliksi, niin JSON n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4:</p> <pre><code>{\n  \"workbench.colorTheme\": \"Default Dark Modern\",\n  \"terminal.integrated.defaultProfile.windows\": \"Git Bash\",\n  \"git.autofetch\": false\n}\n</code></pre> <p>Jos olet macOS-k\u00e4ytt\u00e4j\u00e4, sinulla ei ole Git Bashi\u00e4 laisinkaan vaan oletusshell on <code>zsh</code>:n. Vastaava JSON n\u00e4ytt\u00e4\u00e4 t\u00e4lt\u00e4:</p> <pre><code>{\n  \"workbench.colorTheme\": \"Default Dark Modern\",\n  \"terminal.integrated.defaultProfile.osx\": \"zsh\",\n  \"git.autofetch\": false\n}\n</code></pre> <p>Asetuksiin kannattaa tutustua ajan kanssa. VSCodessa voi, ja ajoittain joutuu, s\u00e4\u00e4t\u00e4m\u00e4\u00e4n hyvinkin pikkutarkkoja asetuksia, kuten asetuksia, jotka kohdistuvat vain tiettyjen tiedostop\u00e4\u00e4tteiden tiedostoihin.</p>"},{"location":"asennus/vscode/#extensions","title":"Extensions","text":""},{"location":"asennus/vscode/#extension-markdown-all-in-one","title":"Extension: Markdown All in One","text":"<p>Asennetaan dokumentaatiota helpottava extension Markdown All in One.</p> <ol> <li>Klikkaa VS Coden vasemmassa toolbarissa n\u00e4kyv\u00e4\u00e4 Extensions-ikonia.</li> <li>Etsi hakusanalla \"markdown all\"</li> <li>Valitse haluttu extension ja klikkaa sinist\u00e4 Install-nappia.</li> </ol> <p>Voit lukea extensionin ohjeet Visual Studio Marketplacesta Markdown All in One:n omalta sivulta.</p> <p>Teht\u00e4v\u00e4</p> <p>Noudata Marketplacesta l\u00f6ytyv\u00e4\u00e4 dokumentaatiota ja kokeile seuraavia asioita:</p> <ol> <li>Luo muutama otsikko ja Table of Contents</li> <li>Luo Markdown-taulukko. Kokeile Table formatter -ominaisuutta.</li> </ol>"},{"location":"asennus/vscode/#extension-prettier-code-formatter","title":"Extension: Prettier - Code Formatter","text":"<p>Asenna Prettier yll\u00e4 neuvotulla tavalla.</p> <pre><code>{\n  // Pretty\n  \"workbench.colorTheme\": \"Default Dark Modern\",\n\n  // Terminal\n  \"terminal.integrated.defaultProfile.osx\": \"zsh\",\n\n  // Editor\n  \"editor.detectIndentation\": false,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\n  // Git\n  \"git.autofetch\": false,\n\n  // File specific\n  // Markdown file format settings\n  \"[markdown]\": {\n    \"editor.formatOnSave\": true,\n    \"editor.wordWrap\": \"on\",\n    \"editor.tabSize\": 4,\n    \"editor.insertSpaces\": true\n  },\n\n  // Markdown All in One extension\n  \"markdown.extension.list.indentationSize\": \"inherit\"\n}\n</code></pre>"},{"location":"asennus/vscode/#extension-python","title":"Extension: Python","text":"<p>Asenna kuten aiemmat tai asenna kun Code kysyy sit\u00e4. Tyypillisesti Code tarjoaa t\u00e4m\u00e4n Extensionin asenatamista, kun luot tai avaat ensimm\u00e4isen <code>.py</code>-p\u00e4\u00e4tteisen tiedoston.</p> <p>Anna t\u00e4m\u00e4n extensionin olla vakioasetuksilla.</p>"},{"location":"asennus/vscode/#extension-jupyter","title":"Extension: Jupyter","text":"<p>Asenna kuten aiemmat tai asenna kun Code kysyy sit\u00e4. Tyypillisesti Code tarjoaa muutaman Jupyteriin liittyv\u00e4n extensionin asentamista, kun luot tai avaat ensimm\u00e4isen <code>.ipynb</code>-p\u00e4\u00e4tteisen tiedoston.</p>"},{"location":"asennus/windows/","title":"Python (win)","text":"<p>Info</p> <p>Huomaa, ett\u00e4 Pythonin voi asentaa my\u00f6s muilla tavoin, kuten lataamalla sen suoraan Python.org-sivustolta. Minun kurssilla suositeltu tapa on kuitenkin k\u00e4ytt\u00e4\u00e4 <code>uv</code>-ty\u00f6kalua, joka k\u00e4yt\u00e4nn\u00f6ss\u00e4 korvaa <code>pyenv</code>, <code>poetry</code>, <code>pip</code> ty\u00f6kalut. Lis\u00e4ksi mukana asentuva <code>uvx</code> korvaa <code>pipx</code>-ty\u00f6kalun.</p>"},{"location":"asennus/windows/#python-aliaksen-poistaminen","title":"Python-aliaksen poistaminen","text":"<p>Kuvio 1: Poista Python-aliakset, jotta Windows ei vahingossataan tarjota Storesta Pythonia.</p> <p>Vakiona Windows tarjoaa PATH:iin polun, joka ohjaa <code>python</code>-k\u00e4skyn Windows Storeen. T\u00e4m\u00e4 on meid\u00e4n k\u00e4yt\u00f6ss\u00e4 t\u00e4ysin turha; voit kytke\u00e4 sen pois p\u00e4\u00e4lt\u00e4 Windowsin asetuksista. Avaa Windowsin asetukset (Win+X ja valitse Settings) ja navigoi kohtaan \"Apps\" -&gt; \"Advanced App Settings\" -&gt; \"App execution aliases\". Kytke ruutukaappauksessa (ks. Kuvio 1) n\u00e4kyv\u00e4t asetukset pois p\u00e4\u00e4lt\u00e4.</p> <p>Vaihtoehtoiset askeleet</p> <p>Mik\u00e4li haluat tai koet tarpeelliseksi, voit poistaa kaikki Python-asennukset, jotka \"Add or remove programs\" -valikossa n\u00e4kyv\u00e4t. T\u00e4m\u00e4 ei ole suinkaan pakollista, ja <code>uv</code> hallitsee itse asentamansa Pythonit, mutta t\u00e4m\u00e4 voi vapauttaa tilaa ja v\u00e4hent\u00e4\u00e4 yleist\u00e4 versiosekaannusta.</p>"},{"location":"asennus/windows/#uvn-asennus","title":"uv:n asennus","text":"<p>Tarkista tuorein ohje uv: installing uv ohjeista. Mik\u00e4li se on sama kuin t\u00e4t\u00e4 kirjoittaessa, niin avaa uusi PowerShell-ikkuna ja aja seuraava komento:</p> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"asennus/windows/#autocompletion","title":"Autocompletion","text":"<p>Jos k\u00e4yt\u00e4t Git Bashi\u00e4 sinun shellin\u00e4, kuten KAMK:ssa useimmilla kursseilla neuvotaan, niin voit ottaa k\u00e4ytt\u00f6\u00f6n autocompletionin. T\u00e4m\u00e4 helpottaa komentojen kirjoittamista, kun voit painaa <code>Tab</code>-n\u00e4pp\u00e4int\u00e4 ja shelli t\u00e4ydent\u00e4\u00e4 komennon puolestasi. T\u00e4m\u00e4 onnistuu ajamalla seuraavat komennot:</p> <pre><code># Lis\u00e4\u00e4 uv autocompletion\necho 'eval \"$(uv generate-shell-completion bash)\"' &gt;&gt; ~/.bashrc\n\n# Lis\u00e4\u00e4 uvx autocompletion\necho 'eval \"$(uvx --generate-shell-completion bash)\"' &gt;&gt; ~/.bashrc\n</code></pre> <p>Tip</p> <p>Uv-ty\u00f6kalun k\u00e4ytt\u00f6 neuvotaan Ajaminen/uv -sivulla.</p>"},{"location":"funktiot/funktiot/","title":"Funktiot","text":""},{"location":"funktiot/funktiot/#syntaksi","title":"Syntaksi","text":"<p>Pythonissa funktio m\u00e4\u00e4ritell\u00e4\u00e4n <code>def</code>-sanan avulla. Mik\u00e4li funktio on m\u00e4\u00e4ritelty luokan (Class) sis\u00e4ll\u00e4, siit\u00e4 k\u00e4ytet\u00e4\u00e4n nime\u00e4 metodi. Funktio voi palauttaa arvon <code>return</code>-sanan avulla. Mik\u00e4li funktio ei palauta mit\u00e4\u00e4n, palauttaa se automaattisesti <code>None</code>-arvon eli NoneTypen.</p> <pre><code>def my_function():\n    return 1\n</code></pre> <p>Tip</p> <p>Funktiot ovat tapa modularisoida koodia ja v\u00e4hent\u00e4\u00e4 toistoa. Pyri pilkkomaan koodisi pieniin, toiminallisiin kokonaisuuksiin. T\u00e4m\u00e4 helpottaa koodin yll\u00e4pitoa ja testaamista.</p>"},{"location":"funktiot/funktiot/#parametrit-ja-argumentit","title":"Parametrit ja Argumentit","text":""},{"location":"funktiot/funktiot/#perusteet","title":"Perusteet","text":"<p>Argumenttien ja parametrien terminologia menee herk\u00e4sti sekaisin: yleens\u00e4 kuulija kuitenkin ymm\u00e4rt\u00e4\u00e4, mit\u00e4 tarkoitat, jos k\u00e4yt\u00e4t n\u00e4it\u00e4 ristiin. Argumentti on funktiolle sy\u00f6tett\u00e4v\u00e4 arvo funktion n\u00e4k\u00f6kulmasta. Kun funktiota kutsutaan, sille sy\u00f6tet\u00e4\u00e4n parametreja.</p> <p>Funktion m\u00e4\u00e4rittelyrivill\u00e4 on mahdollista luoda kahdenlaisia argumentteja: sellaisia, joilla ei ole oletusarvoa, ja sellaisia, joilla on.</p> <ul> <li>Pakolliset, positionaaliset argumentit<ul> <li>Tunnetaan yleens\u00e4 nimell\u00e4: args</li> <li>Ei oletusarvoa</li> </ul> </li> <li>Valinnaiset argumentit<ul> <li>Tunnetaan yleens\u00e4 nimell\u00e4: kwargs</li> <li>Oletusarvo</li> </ul> </li> </ul> <pre><code>def my_function(a:int, b:float, name=\"kissa\", age=42):\n    print(f\"{a=}\")\n    print(f\"{b=}\")\n    print(f\"{name=}\")\n    print(f\"{age=}\")\n</code></pre> <p>Huomaa, ett\u00e4 kaikki positionaaliset argumentit on pakko antaa, tai funktio nostaa TypeErrorin.</p> <pre><code>&gt;&gt;&gt; my_function()\nTypeError: my_function() missing 2 required positional arguments: 'a' and 'b'\n\n&gt;&gt;&gt; my_function(42)\nTypeError: my_function() missing 1 required positional argument: 'b'\n\n&gt;&gt;&gt; my_function(42, 3.14)\na=42\nb=3.14\nname='kissa'\nage=42\n\n&gt;&gt;&gt; my_function(\"42\", 3, name=\"Bond\", age=\"Double-oh-seven\") # (1)\na='42'\nb=3\nname='Bond'\nage='Double-oh-seven'\n</code></pre> <ol> <li>HUOM! Python ei tarkista argumenttien tyyppej\u00e4, vaan antaa niiden olla mit\u00e4 tahansa. K\u00e4ytt\u00e4m\u00e4si IDE saattaa varoittaa t\u00e4st\u00e4, mik\u00e4li type hintsit ovat paikoillaan, mutta Python ei itse tarkista niit\u00e4.</li> </ol>"},{"location":"funktiot/funktiot/#n-kappaletta-parametreja","title":"N-kappaletta parametreja","text":"<p>T\u00e4m\u00e4 syntaksi vaatii hieman muistinvirkistyst\u00e4 tupleista. Mik\u00e4li et muista miten sekvenssien pakkaus ja purku (packing, unpacking) k\u00e4ytt\u00e4ytyv\u00e4t, k\u00e4y lukemassa seuraava artikkeli: Sekvenssit</p> <pre><code>def sum_all_args(*args: int):\n    print(args)\n    total = sum(args)\n    print(total)\n</code></pre> <pre><code>&gt;&gt;&gt; sum_all_args(1, 2, 3, 4, 5)\n(1, 2, 3, 4, 5)\n15\n</code></pre>"},{"location":"funktiot/funktiot/#n-kappaletta-nimettyja-parametreja","title":"N-kappaletta nimettyj\u00e4 parametreja","text":"<p>My\u00f6s dictionaryyn ja keyword argumentteihin liittyy samanlainen unpack-syntaksi. Tosin, toisin kuin sekvenssien purku, t\u00e4t\u00e4 ei juuri tarvitse muualla kuin funktioiden argumenteissa. Purku avaa sanakirjan avaimet ja arvot keyword argumenteiksi.</p> <p>Katsotaan ensin, kuinka t\u00e4t\u00e4 voi k\u00e4ytt\u00e4\u00e4 sy\u00f6tt\u00e4m\u00e4\u00e4n funktiokutsussa k\u00e4ytetyt parametrit sanakirjasta.</p> <pre><code># Funktio, joka ottaa 3 oletusarvollista argumenttia\ndef my_function(a=1, b=2, c=3):\n    print(f\"{a=}\")\n    print(f\"{b=}\")\n    print(f\"{c=}\")\n</code></pre> <pre><code>&gt;&gt;&gt; data = {\"a\": 10, \"b\": 20, \"c\": 30}\n&gt;&gt;&gt; my_function(**data)\na=10\nb=20\nc=30\n</code></pre> <p>Kun yll\u00e4 olevan toiminnan hyv\u00e4ksyy, on helppo hyv\u00e4ksy\u00e4, ett\u00e4 my\u00f6s seuraava toimii:</p> <pre><code>def print_all_kwargs(**kwargs):\n    for key, value in kwargs.items():\n        print(f\"{key} = {value}\")\n</code></pre> <pre><code>&gt;&gt;&gt; print_all_kwargs(z=1, x=2, y=\"Kissa\")\nz = 1\nx = 2\ny = Kissa\n</code></pre>"},{"location":"funktiot/funktiot/#palautusarvo","title":"Palautusarvo","text":"<p>Hyvin tyypillisesti, mutta ei suinkaan aina, funktio palauttaa jonkin arvon tai joitakin arvoja. T\u00e4m\u00e4 hoituu return-sanalla. Kun return-lauseke suoritetaan, funktio lopettaa v\u00e4litt\u00f6m\u00e4sti suorituksensa ja palauttaa arvon.</p> <pre><code>def my_function():\n    return 1\n    print(\"This will never be printed\")\n</code></pre> <p>Aivan kuten argumenttien kanssa, my\u00f6s palautusarvojen kanssa voi k\u00e4ytt\u00e4\u00e4 tyyppivihjeit\u00e4.</p> <pre><code>def my_function() -&gt; int:\n    return 1\n</code></pre> <p>Mik\u00e4li palautat monta asiaa kerralla, ne tulevat tuplena funktion kutsujalle.</p> <pre><code>def my_function() -&gt; tuple[int, int, int]:\n    return 1, 2, 3\n</code></pre> <p>Palautuva arvo voi olla my\u00f6s montaa eri tyyppi\u00e4 riippuen k\u00e4ytt\u00e4j\u00e4n sy\u00f6tteest\u00e4 tai jostakin muusta tekij\u00e4st\u00e4 riippuen. Yksi tyypillinen case on se, ett\u00e4 funktio palauttaa joko jonkin etuk\u00e4teen p\u00e4\u00e4tetyn tietotyypin mukaisen aron tai <code>None</code>-arvon - eli NoneTypen.</p> <pre><code># Python 3.10 ja uudemmat\ndef my_function() -&gt; int | None:\n    if random.randint(0, 1):\n        return None\n    else:\n        return 1\n\n# Vanhemmat Pythonit\ndef my_function() -&gt; Union[int, None]:\n    if random.randint(0, 1):\n        return None\n    else:\n        return 1\n</code></pre>"},{"location":"funktiot/funktiot/#harjoituksia","title":"Harjoituksia","text":""},{"location":"funktiot/funktiot/#harjoittele-tulosta-kaikki-argumentit","title":"Harjoittele: Tulosta kaikki argumentit","text":"<p>Alla on funktio, joka ottaa vastaansa huiman m\u00e4\u00e4r\u00e4n erilaisia argumentteja. Toteuta sille sis\u00e4lt\u00f6, joka tulostaa kaikki argumentit.</p> <pre><code>def print_all_args(a, b, *args, n=\"abc\", m=\"def\", **kwargs):\n    # Toteuta sis\u00e4lt\u00f6 t\u00e4h\u00e4n\n\n# Kutsu sit\u00e4 seuraavilla argumenteilla\nprint_all_args(1, 2, 3, 4, 5, 6, m=\"1\", n=\"2\", o=\"2\", y=\"4\")\n\n# Varmista, ett\u00e4 se toimii my\u00f6s vain pakollisilla\nprint_all_args(1, 2)\n</code></pre>"},{"location":"funktiot/lambda/","title":"Lambda","text":"<p>Lambda-funktiot ovat \"one-liner\"-ihmeit\u00e4. Lambda-funktioita voi kutsua my\u00f6s termill\u00e4 anonymous functions. Niiden k\u00e4yt\u00f6n kanssa kannattaa olla maltillinen. Lambda-funktiot ovat helposti melko vaikealukuisia.</p>"},{"location":"funktiot/lambda/#syntaksi","title":"Syntaksi","text":"<p>Lambda-funktion syntaksi on seuraava:</p> <pre><code>lambda arguments: expression\n</code></pre>"},{"location":"funktiot/lambda/#funktiosta-lambdaksi","title":"Funktiosta lambdaksi","text":"<pre><code># T\u00e4m\u00e4 funktio\ndef add(x, y):\n    return x + y\n\n# vastaa t\u00e4t\u00e4 lambda-funktiota\nadd = lambda (x, y): x + y\n</code></pre>"},{"location":"funktiot/lambda/#lambda-kertakayttoisena-funktiona","title":"Lambda kertak\u00e4ytt\u00f6isen\u00e4 funktiona","text":"<p>Lambda on usein hy\u00f6tyk\u00e4yt\u00f6ss\u00e4 listan sorttaamisessa tai muussa vastaavassa k\u00e4ytt\u00f6tarkoituksessa, jossa simppeli funktio sy\u00f6tet\u00e4\u00e4n jonkin toisen funktion tai metodin parametriksi (eli ik\u00e4\u00e4n kuin callback funktiona). </p> <p>Alla esimerkki, jossa lista sortataan sen sis\u00e4lt\u00e4mien sanakirjojen avaimen mukaan. Huomaa, ett\u00e4 kyseist\u00e4 lambda-fuktiota ei ole koskaan sijoitettu muuttujaan, eik\u00e4 sit\u00e4 tarvitsekaan.</p> <pre><code>my_list = [\n    {\"name\": \"John\", \"age\": 25},\n    {\"name\": \"Jane\", \"age\": 24},\n    {\"name\": \"Bob\", \"age\": 27},\n]\n\nmy_list.sort(key=lambda x: x[\"name\"])\n</code></pre>"},{"location":"funktiot/namespace/","title":"Namespace","text":"<p>Pythonissa on useita nestattuja namespace skooppeja, muistis\u00e4\u00e4nn\u00f6lt\u00e4\u00e4n LEGB, jotka ovat:</p> <ul> <li>L: Local</li> <li>E: Enclosing</li> <li>G: Global</li> <li>B: Built-in</li> </ul> <p>Alla n\u00e4kyv\u00e4ss\u00e4 koodissa on moduulin <code>__main__</code> lokaali funktio nimelt\u00e4\u00e4n <code>outer_func</code>. Tuon funktion lokaaliin scopeen kuuluu funktio nimelt\u00e4\u00e4n <code>inner_func</code>. T\u00e4m\u00e4n funktion lokaaliin skopeen kuuluu taas yhden tason sis\u00e4kk\u00e4isempi funktio <code>innermost_function</code>. Kaikista sisimm\u00e4n funktion n\u00e4k\u00f6kulmasta muuttuja <code>x</code> on m\u00e4\u00e4ritetty kolmessa eri scopessa: local, enclosing, global.</p> <pre><code>def outer_func():\n\n    def inner_func():\n        def innermost_func():\n            # Innermost func scope\n            x = 4\n            print(\"Innermost func sees: \", x)\n\n        # Inner func scope\n        x = 3\n        innermost_func()\n\n    # Outer func scope\n    x = 2\n    inner_func()\n\n# Global scope\nx = 1\n\nouter_func()\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Kommentoi rivit seuraavassa j\u00e4rjestyksess\u00e4:</p> <ul> <li><code>x = 4</code></li> <li><code>x = 3</code></li> <li><code>x = 2</code></li> </ul> <p>Mit\u00e4 tulostuu ja miksi?</p>"},{"location":"funktiot/namespace/#globaalin-funktion-muuttaminen","title":"Globaalin funktion muuttaminen","text":"<p>Alla oleva koodin funktio tulostaa x:n, joka l\u00f6ytyy sen globaalista skoopista. T\u00e4m\u00e4n j\u00e4lkeen se yritt\u00e4\u00e4 sijoittaa kokonaisluvun kaksi tuohon globaaliin muuttujaan.</p> <pre><code>def problematic_func():\n    print(x)\n    x = 2\n\nx = 1\nproblematic_func()\n</code></pre> <p>Warning</p> <p>Yll\u00e4 oleva nostaa UnboundLocalError virheen. Ylemm\u00e4n tason muuttujien ei onnistu sisemm\u00e4ss\u00e4 skoopissa.</p> <p>On mahdollista, mutta ei miss\u00e4\u00e4n nimess\u00e4 suositeltua, muuttaa globaalia muuttujaa sisemm\u00e4ss\u00e4 skoopissa. T\u00e4m\u00e4 onnistuu <code>global</code> avainsanalla.</p> <pre><code>def problematic_func():\n    global x\n    print(x)\n    x = 2\n\nx = 1\nproblematic_func()\n</code></pre> <p>Tip</p> <p>Muistutus: t\u00e4m\u00e4 EI ole suositeltua. Sy\u00f6t\u00e4 muuttuja x mieluummin argumenttina funktiolle ja palauta uusi arvo. T\u00e4m\u00e4 esitell\u00e4\u00e4n my\u00f6hemmin kurssilla.</p>"},{"location":"funktiot/namespace/#moduulien-skooppi","title":"Moduulien skooppi","text":"<p>Ota huomioon, ett\u00e4 kullakin moduulilla on oma skooppinsa. Alla esimerkki kahden tiedoston Python-ohjelmasta:</p> <pre><code># b.py\nx = 'B'\n\ndef func():\n    print(x)\n</code></pre> <pre><code># a.py\nfrom b import func\n\nx = 'A'\nfunc()\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Mit\u00e4 yll\u00e4 oleva koodi tulostaa? Aja shelliss\u00e4 <code>python a.py</code> ja tarkista.</p> <p>Kokeile my\u00f6s kommentoida rivi <code>x = 'B'</code> ja selvit\u00e4, mit\u00e4 tapahtuu. Tulostuuko kutsuvan moduulin <code>x</code> eli (\"A\") vai tuleeko error?</p>"},{"location":"funktiot/namespace/#harjoituksia","title":"Harjoituksia","text":""},{"location":"funktiot/namespace/#harjoittele-globals-ja-locals","title":"Harjoittele: Globals ja Locals","text":"<p>Selvit\u00e4, mit\u00e4 sis\u00e4\u00e4nrakennetut funktiot globals() ja locals() tulostavat. Kokeile ajaa niit\u00e4 eri namespace skoopeissa.</p> <pre><code># Mik\u00e4 t\u00e4m\u00e4 on?\nglobals()\n\n# Ent\u00e4 t\u00e4m\u00e4?\nlocals()\n</code></pre>"},{"location":"konfiguraatiot/cli/","title":"Cli","text":"<p>Komentoriviargumenttien k\u00e4sittely on t\u00e4rke\u00e4 osa ohjelmointia. T\u00e4ss\u00e4 osiossa harjoitellaan komentoriviargumenttien k\u00e4sittely\u00e4 Pythonissa. Pythonissa on sis\u00e4\u00e4nrakennettu argparse-moduuli, joka on hyv\u00e4 tapa aloittaa. Karvalakkimalli olisi parsia argumentit samalla tavalla kuin esimerkiksi Bash-skripteiss\u00e4. T\u00e4m\u00e4 tapa on esitelty alla:</p> <pre><code>import sys\nscript_name = sys.argv[0]\narguments = sys.argv[1:]\n</code></pre> <p>Warning</p> <p>Ellei sinulla ole vahvaa syyt\u00e4, \u00e4l\u00e4 parsi argumentteja k\u00e4sin. K\u00e4yt\u00e4 mieluummin argparse-moduulia, joka esitell\u00e4\u00e4n alla.</p>"},{"location":"konfiguraatiot/cli/#positionaaliset-argumentit","title":"Positionaaliset argumentit","text":"<pre><code># a.py\nimport argparse\n\nparser = argparse.ArgumentParser(description=\"Kuvaus ohjelmalle\")\nparser.add_argument(\"argumentti\", type=int, help=\"Kuvaus positionaaliselle argumentille\")\nargs = parser.parse_args()\n\nprint(args.argumentti)\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Yll\u00e4 n\u00e4kyy tiedoston <code>a.py</code> sis\u00e4lt\u00f6. Luo tiedosto ja kokeile seuraavia nelj\u00e4\u00e4 komentoa:</p> <pre><code>python a.py\npython a.py --help\npython a.py kissa\npython a.py 1\n</code></pre>"},{"location":"konfiguraatiot/cli/#valinnaiset-argumentit","title":"Valinnaiset argumentit","text":"<p>Positionaalisten argumenttien sijasta (tai lis\u00e4ksi) on mahdollista luoda valinnaisia argumentteja. T\u00e4m\u00e4 onnistuu seuraavasti:</p> <pre><code># b.py\nimport argparse\n\nparser = argparse.ArgumentParser(description=\"This program calculates the area or volume\")\nparser.add_argument(\"x\", type=int, help=\"Width of the shape\")\nparser.add_argument(\"y\", type=int, help=\"Height of the shape\")\nparser.add_argument(\"-t\", \"--type\", type=str, help=\"The name of the shape\", choices=[\"rectangle\", \"triangle\"], default=\"rectangle\")\nargs = parser.parse_args()\n\nif args.type == 'triangle':\n    print(f\"The area of the triangle is {(args.x * args.y) / 2}\")\nelse:\n    print(f\"The area of the rectangle is {args.x * args.y}\")\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Yll\u00e4 n\u00e4kyy tiedoston <code>a.py</code> sis\u00e4lt\u00f6. Luo tiedosto ja kokeile seuraavia komentoja:</p> <pre><code>```bash\npython b.py\npython b.py --help\npython b.py 1 2\npython b.py 1 2 -t triangle\npython b.py 1 2 --type triangle\npython b.py --type triangle 1 2\npython b.py 1 2 -t triangle -t rectangle\npython b.py 1 2 -t kissa\n```\n</code></pre>"},{"location":"konfiguraatiot/cli/#harjoituksia","title":"Harjoituksia","text":""},{"location":"konfiguraatiot/cli/#harjoittele-click","title":"Harjoittele: Click","text":"<p>Argparse on n\u00e4pp\u00e4r\u00e4 Pythonin sis\u00e4\u00e4nrakennettu moduuli, mutta se ei ole ainoa. Kokeile sen kilpailijaa <code>Click</code>, jonka dokumentaatio l\u00f6ytyy t\u00e4\u00e4lt\u00e4.</p> <p>Asenna kirjasto ja kokeile sit\u00e4.</p>"},{"location":"konfiguraatiot/cli/#harjoittele-typer","title":"Harjoittele: Typer","text":"<p>Click on n\u00e4pp\u00e4r\u00e4, mutta tiangolo on luonut sen pohjalta viel\u00e4 korkeamman tason abstraktion kirjaston. Sen nimi on <code>Typer</code>, ja sen dokumentaatio l\u00f6ytyy t\u00e4\u00e4lt\u00e4. </p> <p>Asenna kirjasto ja kokeile sit\u00e4.</p>"},{"location":"konfiguraatiot/kayttajasyote/","title":"K\u00e4ytt\u00e4j\u00e4sy\u00f6te","text":"<p>TODO. T\u00e4h\u00e4n tulee input() ja getpass()</p>"},{"location":"konfiguraatiot/tiedosto/","title":"Tiedosto","text":"<p>TODO. T\u00e4h\u00e4n tulee configparser ja YAML.</p>"},{"location":"konfiguraatiot/ymparistomuuttujat/","title":"Ymp\u00e4rist\u00f6muuttujat","text":"<p>TODO. T\u00e4h\u00e4n tulee os.environ ja os.environ.get (aka os.getenv)</p>"},{"location":"kontrollirakenteet/context_manager/","title":"Context manager","text":"<p>With-lause on Pythonin tapa k\u00e4sitell\u00e4 resursseja, jotka pit\u00e4\u00e4 sulkea k\u00e4yt\u00f6n j\u00e4lkeen. Sit\u00e4 voi k\u00e4ytt\u00e4\u00e4 kaikkien sellaisten olioiden kanssa, jotka toteuttavat <code>__enter__</code> ja <code>__exit__</code> metodit. Termi t\u00e4lle on <code>context manager</code>. Se on hy\u00f6dyllinen muun muassa silloin, kun k\u00e4sitell\u00e4\u00e4n tiedostoja, tietokantayhteyksi\u00e4 tai muita resursseja, jotka pit\u00e4\u00e4 sulkea k\u00e4yt\u00f6n j\u00e4lkeen.</p> <p>Useiden eri dokumentaatioiden kirjastot neuvovat k\u00e4ytt\u00e4m\u00e4\u00e4n with-lauseketta, joten se on hyv\u00e4 tuntea, vaikka sen sielunel\u00e4m\u00e4\u00e4n ei perehtyisik\u00e4\u00e4n.</p> <pre><code># Vaihtoehto 1: K\u00e4yt\u00e4 with-lausetta\nwith open(\"file.txt\", \"r\") as f:\n    print(f.read())\n\n# Vaihtoehto 2: Avaa ja sulje tiedosto itse\nf = open(\"file.txt\", \"r\")\ntry:\n    file.write('Hola!')\nfinally:\n    file.close()\n</code></pre>"},{"location":"kontrollirakenteet/context_manager/#harjoituksia","title":"Harjoituksia","text":""},{"location":"kontrollirakenteet/context_manager/#harjoittele-mycontextmanager","title":"Harjoittele: MyContextManager","text":"<p>Alla on esiteltyn\u00e4 luokka MyContextManager, joka toteuttaa with-lausekkeen vaatimat metodit <code>__enter__</code> ja <code>__exit__</code>. K\u00e4yt\u00e4 t\u00e4t\u00e4 context manageria with-lauseen kanssa. Mit\u00e4 tapahtuu?</p> <pre><code>class MyContextManager:\n    def __init__(self):\n        print(\"Init\")\n\n    def __enter__(self):\n        print(\"Enter\")\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(f\"Exit ({exc_type}, {exc_value}, {traceback})\")\n</code></pre> <ol> <li>Kutsu context manageria with-lauseen kanssa siten, ett\u00e4 tulostat lausekkeen keskell\u00e4 \"Hello from the with block\". Miss\u00e4 j\u00e4rjestyksess\u00e4 tulostuvat Init, Enter ja Exit sek\u00e4 tulostamasi arvo?</li> <li>Kutsu context manageria uusiksi siten, ett\u00e4 teet with-lausekkeen sis\u00e4ll\u00e4 jotain laitonta, kuten <code>x = 10 / 0</code>. Mit\u00e4 arvoja exc_type, exc_value ja traceback saavat?</li> </ol>"},{"location":"kontrollirakenteet/ehtolauseet/","title":"Ehtolauseet","text":"<p>Ehtolause on lause, joka suoritetaan vain jos jokin ehto on tosi. Ehtolauseet kuuluvat k\u00e4yt\u00e4nn\u00f6ss\u00e4 kaikkiin ohjelmointikieliin. Pythonissa ehtolauseet ovat <code>if</code>, <code>elif</code> ja <code>else</code>-lauseita. N\u00e4ist\u00e4 viimeisin eli <code>elif</code> on lyhenne sanoista <code>else if</code>. </p> <p>Tuoreemmissa Python-versioissa (3.10+) on my\u00f6s match-lause, joka on k\u00e4yt\u00e4nn\u00f6ss\u00e4 sama asia kuin switch-case muissa kieliss\u00e4.</p>"},{"location":"kontrollirakenteet/ehtolauseet/#lausekkeet","title":"Lausekkeet","text":""},{"location":"kontrollirakenteet/ehtolauseet/#if","title":"If","text":"<p>If-ehtoa voi k\u00e4ytt\u00e4\u00e4 yksist\u00e4\u00e4n ilman elif tai else-lauseita. T\u00e4ll\u00f6in if-lause suoritetaan vain jos ehto on tosi. Esimerkkej\u00e4:</p> <pre><code>if True:\n    print(\"T\u00e4m\u00e4 suoritetaan\")\n\nsomething_that_returns_true = True\nif something_that_returns_true:\n    print(\"T\u00e4m\u00e4kin suoritetaan\")\n\npets = [\"cat\", \"dog\", \"fish\"]\nif \"cat\" in pets:\n    print(\"Kissa l\u00f6ytyy\")\n</code></pre> <p>Ajoittain on hy\u00f6dyllist\u00e4 k\u00e4ytt\u00e4\u00e4 <code>not</code>-avainsanaa, joka k\u00e4\u00e4nt\u00e4\u00e4 ehtolauseen tuloksen. Esimerkki:</p> <pre><code>if not user.get_login_status():\n    user.login()\n</code></pre>"},{"location":"kontrollirakenteet/ehtolauseet/#elif-ja-else","title":"Elif ja else","text":"<p>Elif-lause suoritetaan vain jos if-lauseen ehto on ep\u00e4tosi ja elif-lauseen ehto on tosi. Else-lause suoritetaan vain jos if- ja elif-lauseiden ehdot ovat ep\u00e4tosia. Esimerkki:</p> <pre><code>pets = [\"cat\", \"dog\", \"fish\"]\n\nif \"cat\" in pets:\n    print(\"Kissa l\u00f6ytyy\")\nelif \"dog\" in pets:\n    print(\"Koira l\u00f6ytyy\")\nelse:\n    print(\"Ei l\u00f6ytynyt\")\n</code></pre>"},{"location":"kontrollirakenteet/ehtolauseet/#match","title":"Match","text":"<p>Match-lause on uusi Python 3.10:ss\u00e4. Se on k\u00e4yt\u00e4nn\u00f6ss\u00e4 sama asia kuin switch-case muissa kieliss\u00e4. Esimerkki:</p> <pre><code>response = requests.get(\"http://example.com\")\n\nmatch response.status_code:\n    case 200:\n        do_something(response.data)\n    case 404:\n        logging.error(\"Not found\")\n    case _:\n        return logging.critical(\"Unknown error\")\n</code></pre> <p>Warning</p> <p>Muistathan, ett\u00e4 match vaatii Pythonin versiota 3.10 tai uudempaa. T\u00e4m\u00e4 on riski k\u00e4ytt\u00e4\u00e4 esimerkiksi automaatiskriptiss\u00e4, joka ajetaan eri koneilla.</p>"},{"location":"kontrollirakenteet/ehtolauseet/#hyvia-kaytanteita","title":"Hyvi\u00e4 k\u00e4yt\u00e4nteit\u00e4","text":""},{"location":"kontrollirakenteet/ehtolauseet/#valta-vaikeita-ehtoja","title":"V\u00e4lt\u00e4 vaikeita ehtoja","text":"<p>V\u00e4lt\u00e4 <code>and</code> ja <code>or</code> sanojen liiallista k\u00e4ytt\u00f6\u00e4 if-lausekkeessa, varsinkin yhdistettyn\u00e4 monimutkaisiin, sulkuja vaativiin ehtoihin. Yleens\u00e4 logiikan voi purkaa helpommaksi.</p> <pre><code>if a or b or c or d or e:\n    do_this()\n\nif a and b and c and d and e:\n    do_that()\n</code></pre> <p>Ajoittain t\u00e4m\u00e4n voi ratkaista <code>any</code> tai <code>all</code> funktioiden avulla.</p> <pre><code>reasons = (a, b, c, d, e)\n\n# Any\nif any(reasons):\n    do_this()\n\nif all(reasons):\n    do_that()\n</code></pre>"},{"location":"kontrollirakenteet/ehtolauseet/#valta-sisakkaisyytta","title":"V\u00e4lt\u00e4 sis\u00e4kk\u00e4isyytt\u00e4","text":"<p>Alla esimerkki sis\u00e4ikk\u00e4isist\u00e4 if-lausekkeista, joka on kohtalaisen vaikea lukea:</p> <pre><code>def drink_milk(person, fridge):\n    if person.is_thirsty():\n        if fridge.has_milk():\n            person.stomache.add(fridge.get_milk())\n        else:\n            raise NoMilkError(\"No milk in fridge\")\n    else:\n        raise NotThirstyError(\"Person is not thirsty\")\n</code></pre> <p>T\u00e4m\u00e4n sis\u00e4kk\u00e4isen if-lausekkeen voi purkaa 1-ulotteisiksi if-lauseiksi:</p> <pre><code>def drink_milk(person, fridge):\n    if not person.is_thirsty():\n        raise NotThirstyError(\"Person is not thirsty\")\n\n    if not fridge.has_milk():\n        raise NoMilkError(\"No milk in fridge\")\n\n    person.stomache.add(fridge.get_milk())\n</code></pre>"},{"location":"kontrollirakenteet/ehtolauseet/#harjoituksia","title":"Harjoituksia","text":""},{"location":"kontrollirakenteet/ehtolauseet/#harjoittele-with","title":"Harjoittele: With","text":"<p>Alla on Python-luokka, joka toteuttaa context manager -yhteensopivan interacen eli <code>__enter__</code> ja <code>__exit__</code> metodit.</p> <pre><code>class MyContextManager:\n    def __init__(self):\n        print(\"Init\")\n\n    def __enter__(self):\n        print(\"Enter\")\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        print(\"Exit\")\n</code></pre> <p>K\u00e4yt\u00e4 t\u00e4t\u00e4 context manageria with-lauseen kanssa. Mit\u00e4 tapahtuu?</p> <pre><code>my_manager = MyContextManager()\n\nwith my_manager:\n    print(\"Doing something with My Manager\")\n</code></pre>"},{"location":"kontrollirakenteet/generaattorit/","title":"Generaattorit","text":"<p>Generaattorit on hyv\u00e4 tunnistaa, vaikka niit\u00e4 ei viel\u00e4 itse kirjoittaisikaan. Generaattorilla voi tyypillisesti korvata luokkana kirjoitetun iteraattorin, ja syntaksi on lyhyempi. Kumpaakin yhdist\u00e4\u00e4 se, ett\u00e4 iteroitavien asioiden listaa ei tarvitse koskaan luoda kokonaan muistiin, vaan niit\u00e4 voi k\u00e4sitell\u00e4 yksi kerrallaan. T\u00e4t\u00e4 kutsutaan lazy evaluationiksi.</p>"},{"location":"kontrollirakenteet/generaattorit/#generaattorin-syntaksi","title":"Generaattorin syntaksi","text":"<p>Generaattorin syntaksi on hyvin samanlainen kuin funktioiden. Ainoa ero syntaksissa on, ett\u00e4 funktioiden <code>return</code>-lauseke korvataan <code>yield</code>-lausekkeella.</p> <pre><code>def my_generator():\n    yield 1\n    yield 2\n    yield 3\n</code></pre> <p>T\u00e4t\u00e4 generaattoria voi k\u00e4ytt\u00e4\u00e4 kuten iteraattoria, eli kutsua <code>my_generator().__next__()</code>, kunnes funktio nostaa StopIteration-exceptionin. T\u00e4m\u00e4 tapahtuu automaattisesti, jos funktion ajo menee l\u00e4pi siten, ett\u00e4 <code>yield</code>-lauseke ei tule vastaan. Nextin kutsumista ei tietenk\u00e4\u00e4n tehd\u00e4 k\u00e4sin, vaan luotetaan, ett\u00e4 for-silmukka osaa k\u00e4ytt\u00e4\u00e4 sit\u00e4:</p> <pre><code>for i in my_generator():\n    print(i)\n</code></pre>"},{"location":"kontrollirakenteet/generaattorit/#iteraattorista-generaattoriin","title":"Iteraattorista Generaattoriin","text":"<p>Tehd\u00e4\u00e4n aluksi edellisten esimerkkien mukainen iteraattori luokan avulla:</p> <pre><code>class MyIterator:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.start &gt;= self.end:\n            raise StopIteration\n        value = self.start\n        self.start += 1\n        return value\n</code></pre> <p>Ja lopulta sama generaattorina:</p> <pre><code>def my_generator(start, end):\n    while start &lt; end:\n        yield start\n        start += 1\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/","title":"Silmukat","text":"<p>Silmukat eli toistolauseet tai -rakenteet ovat aiemmin esiteltyjen ehtolauseiden rinnalla yksi ohjelmoinnin perusrakenteista. Silmukoiden avulla voidaan toistaa samaa koodia useita kertoja. Pythonissa on kaksi erilaista silmukkaa: <code>for</code> ja <code>while</code>. Vastaavat silmukat l\u00f6ytyv\u00e4t my\u00f6s muista ohjelmointikielist\u00e4. </p> <p>Silmukoiden lis\u00e4ksi toistuvuutta voi lis\u00e4t\u00e4 funktio-ohjelmoinnin paradigman mukaisesti sek\u00e4 ulkoisten kirjastojen kuten itertools avulla. N\u00e4m\u00e4 k\u00e4sitell\u00e4\u00e4n t\u00e4ss\u00e4 materiaalissa vain pintaraapaisuna.</p> <p>Tip</p> <p>Silmukat ovat tapa v\u00e4hent\u00e4\u00e4 toistoa. Mik\u00e4li huomaat kirjoittavasi samaa koodia useaan kertaan, kannattaa mietti\u00e4, voisiko sen korvata silmukalla. T\u00e4st\u00e4 k\u00e4ytet\u00e4\u00e4n usein muistis\u00e4\u00e4nt\u00f6n\u00e4 lyhennett\u00e4 DRY (Don't Repeat Yourself).</p>"},{"location":"kontrollirakenteet/silmukat/#silmukoiden-kaytto","title":"Silmukoiden k\u00e4ytt\u00f6","text":""},{"location":"kontrollirakenteet/silmukat/#for","title":"For","text":"<p>For-lauseketta voi k\u00e4ytt\u00e4\u00e4 mink\u00e4 tahansa iteroitavan objektin kanssa. Pythonin sis\u00e4\u00e4nrakennetuista tietotyypeist\u00e4 iteroitavia ovat muun muassa sekvenssit: lista, sanakirja tai merkkijono. For-lauseketta jatketaan, kunnes iteraattori ilmoittaa, ett\u00e4 itemit ovat loppu (StopIteration-niminen Exception).</p> <pre><code># Iteraraattori voi olla mik\u00e4 tahansa kurssilla esitellyist\u00e4 sekvensseist\u00e4.\npersons: list|set|dict|str|tuple|range|bytes = [\n    \"John\",\n    \"Jane\",\n    \"Joe\",\n    \"Jill\"\n]\n\nfor person in persons:\n    print(person)\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Kokeile, kuinka for k\u00e4ytt\u00e4ytyy sanakirjan (dict) avulla. Selvit\u00e4, kuinka iteroit sanakirjan avaimia, arvoja tai molempia.</p>"},{"location":"kontrollirakenteet/silmukat/#while","title":"While","text":"<p>While-lauseke on toinen silmukkatyyppi. Se toistaa koodia niin kauan kuin ehto on tosi. Totuusarvo evaluoidaan ennen silmukan suorittamista, joten silmukkaa ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 suoriteta kertaakaan.</p> <pre><code>condition = False\n\nwhile condition:\n    print(\"T\u00e4m\u00e4 ei tulostu koskaan.\")\n</code></pre> <p>Warning</p> <p>While-silmukka on hyvin helppo kirjoittaa niin, ett\u00e4 se ei koskaan lopu. T\u00e4m\u00e4 johtaa ohjelman jumiutumiseen. T\u00e4m\u00e4n vuoksi while-silmukkaa k\u00e4ytett\u00e4ess\u00e4 tulee olla erityisen tarkkana. Alla oleva sovellus ei lakkaa koskaan ajamasta itse\u00e4\u00e4n.</p> <pre><code>while True:\n    print(\"Cat\")\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/#aputyokalut-continue-ja-break","title":"Aputy\u00f6kalut: continue ja break","text":""},{"location":"kontrollirakenteet/silmukat/#continue","title":"Continue","text":"<p>Continue lauseke hypp\u00e4\u00e4 yhden iteraation yli. Esimerkiksi seuraava koodi tulostaa vain parilliset luvut.</p> <pre><code>for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/#break","title":"Break","text":"<p>Break lauseke keskeytt\u00e4\u00e4 silmukan suorituksen. Esimerkiksi seuraava koodi tulostaa luvut 0-4.</p> <pre><code>for i in range(10):\n    if i &gt;= 5:\n        break\n    print(i)\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/#silmukka-ja-else","title":"Silmukka ja Else","text":"<p>Else lauseke on hieman harvemmin k\u00e4ytetty silmukoiden yhteydess\u00e4, joten se saattaa her\u00e4tt\u00e4\u00e4 kummastusta lukijassa. Sille voi kuitenkin l\u00f6yty\u00e4 joskus paikkansa. Toisin kuin ehtolauseiden kanssa, joissa <code>else</code>-lauseke suoritetaan vain jos mik\u00e4\u00e4n <code>if</code> tai <code>elif</code> ei toteutunut, silmukoiden kanssa <code>else</code> toteutetaan StopIteration-exceptionin heitt\u00e4misen j\u00e4lkeen eli silmukasta poistuttaessa. Mik\u00e4li silmukan ajaminen keskeytet\u00e4\u00e4n <code>break</code>-lauseella, <code>else</code>-lauseketta ei suoriteta.</p> <pre><code>ingredients = ['Egg', 'Ham', 'Pineapple']\n\n# USe for else to check if the list contains 'Spam'\nfor ingredient in ingredients:\n    if ingredient == 'Spam':\n        print('Spam found!')\n        break\nelse:\n    print('No Spam found!')\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/#one-liner-comprehension","title":"One-liner: comprehension","text":"<p>Pythonin sekvenssej\u00e4 voi luoda my\u00f6s comprehensionin avulla. Comprehension on Pythonin syntaktista sokeria (eli lyhyt syntaksi jollekin pidemm\u00e4lle asialle), joka mahdollistaa listojen, sanakirjojen ja muiden sekvenssien luomisen yhdell\u00e4 rivill\u00e4. N\u00e4inp\u00e4 siis t\u00f6rm\u00e4\u00e4t siihen usein seuraavissa sanapareissa</p> <ul> <li>list comprehension</li> <li>set comprehension</li> <li>dict(ionary) comprehension</li> </ul> <p>List comprehensionin syntaksi on seuraava:</p> <pre><code># Lyhyt\n[f(y) for y in z]\n\n# Pidempi\n[f(y) for y in z if g(y)]\n</code></pre> <ul> <li>f(y) : expression<ul> <li>Palautuvan listan jokainen arvo k\u00e4sitell\u00e4\u00e4n t\u00e4m\u00e4n lausekkeen avulla.</li> </ul> </li> <li>y : muuttuja<ul> <li>Loopin sis\u00e4ll\u00e4 k\u00e4sitelt\u00e4v\u00e4 muuttuja.</li> </ul> </li> <li>z : iterable<ul> <li>Loopattavata iterable, kuten lista, sanakirja tai merkkijono.</li> </ul> </li> <li>g(y) : condition<ul> <li>Ehto, joka m\u00e4\u00e4ritt\u00e4\u00e4, otetaanko item mukaan lopulliseen listaan.</li> </ul> </li> </ul> <p>Yll\u00e4 oleva esimerkki voi olla vaikea l\u00e4hesty\u00e4, joten tutki alla olevaa esimerkki\u00e4, jossa <code>my_list</code>-lista k\u00e4sitell\u00e4\u00e4n list comprehensionin avulla.</p> <pre><code>my_list = [1, 2, 3, 4, 5]\n\n# Pitk\u00e4 muoto\nmy_list_squared = []\nfor x in my_list:\n    my_list_squared.append(x ** 2)\n\n# Lyhyt muoto\nmy_list_squared = [x ** 2 for x in my_list]\n</code></pre> <p>Mik\u00e4li haluat comprehensionin palauttavan sanakirjan, k\u00e4yt\u00e4 dict comprehensionia. Tarvitset t\u00e4h\u00e4n aaltosulkeet ja kaksoispisteen, aivan kuten muutenkin sanakirjan kanssa. Alla lyhyt esimerkki, jossa aiemmin k\u00e4ytetty lista k\u00e4\u00e4nnet\u00e4\u00e4n sanakirjaksi. Avain on arvo merkkijonona, arvo on alkuper\u00e4inen arvo potenssiin kaksi.</p> <pre><code># K\u00e4yt\u00e4 aaltosulkeita ja kaksoispistett\u00e4, aivan kuten muutenkin dictin kanssa.\nmy_dict = {str(x): x ** 2 for x in my_list}\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/#harjoittele","title":"Harjoittele","text":""},{"location":"kontrollirakenteet/silmukat/#harjoittele-lemmikkielaimet","title":"Harjoittele: Lemmikkiel\u00e4imet","text":"<p>Pythonilla voi iteroida mit\u00e4 tahansa objektia, joka toteuttaa <code>__iter__</code> ja <code>__next__</code> metodit. Alla esimerkki. Silmukka alustaa iteraattorin kutsumalla <code>__iter__</code>-metodia. T\u00e4m\u00e4n j\u00e4lkeen silmukka kutsuu <code>__next__</code>-metodia, kunnes se heitt\u00e4\u00e4 StopIteration-exceptionin.</p> <pre><code>class MyIterator:\n    def __init__(self, max:int):\n        self.max = max\n        self.n = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.n &lt; self.max:\n            result = 2 ** self.n\n            self.n += 1\n            return result\n        else:\n            raise StopIteration\n</code></pre> <p>Sit\u00e4 voi ajaa seuraavalla tavalla:</p> <pre><code>for i in MyIterator(5):\n    print(i)\n</code></pre> <p>Muokkaa iteraattoria siten, ett\u00e4 korvaat <code>max</code>-parametrin listalla pets. Tulosta t\u00e4m\u00e4n j\u00e4lkeen kaikkien lemmikkien nimet for loopin avulla.</p>"},{"location":"kontrollirakenteet/silmukat/#harjoittele-tulosta-iteroitavat-tietotyypit","title":"Harjoittele: Tulosta iteroitavat tietotyypit","text":"<p>Tulosta for-silmukalla kaikki kurssilla esitellyt iteroitavat tietotyypit (paitsi NoneType). K\u00e4yt\u00e4 apuna Pythonin sis\u00e4\u00e4nrakennettua hasattr-funktiota. Yll\u00e4 olevasta teht\u00e4v\u00e4st\u00e4 voit selvitt\u00e4\u00e4, mik\u00e4 metodi iteroitavat objektin tulee toteuttaa.</p> <pre><code>list_of_all_types = [\n    bool,\n    str,\n    int,\n    float,\n    list,\n    tuple,\n    range,\n    bytes,\n    bytearray,\n    set,\n    frozenset,\n    dict,\n]\n</code></pre> <p>Tulostathan my\u00f6s iteroitavien tietotyyppien nimet selkokielisin\u00e4. Hyv\u00e4ksytt\u00e4v\u00e4 tuloste on esimerkiksi:</p> <pre><code>Iterable data types are:\n- str\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/#harjoittele-silmukka-ja-else","title":"Harjoittele: Silmukka ja else","text":"<p>Alla on dummy-pelisessio, joka vastaa <code>is_running()</code> kyselyyn 80 % todenn\u00e4k\u00f6isyydell\u00e4 True. Tulosta pelisession aikakoodi niin kauan kuin serveri py\u00f6rii. Mik\u00e4li serverin ajo on loppunut, lokita ajanhetki.</p> <pre><code>import random\nfrom datetime import datetime\n\n# A function that returns False with a 20 % probability.\nclass Gamesession:\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def get_server_time() -&gt; str:\n        return datetime.now().replace(microsecond=0).isoformat()\n\n    def is_running(self) -&gt; bool:\n        \"\"\"Return True with 80 % probability.\"\"\"\n        return random.random() &lt; 0.8\n</code></pre> <p>Alla on runko, jolla p\u00e4\u00e4set alkuun:</p> <pre><code>gamesession = Gamesession()\n\nwhile gamesession.is_running():\n    pass # T\u00e4h\u00e4n server_time toteutus\n    print(f\"[{server_time}] Game session running...\")\nelse:\n    pass # ... ja t\u00e4h\u00e4n\n    print(f\"[{server_time}] Game session ended...\")\n</code></pre>"},{"location":"kontrollirakenteet/silmukat/#harjoittele-5-sekunnin-while","title":"Harjoittele: 5 sekunnin while","text":"<p>Kirjoita koodi, joka ajaa while-looppia, kunnes 5 sekuntia on kulunut. K\u00e4yt\u00e4 apuna datetime-kirjastoa. Mik\u00e4li koodi j\u00e4\u00e4 ikuiseen looppiin, pys\u00e4yt\u00e4 se Jupyter Notebookin Interrupt-n\u00e4pp\u00e4imell\u00e4. Mik\u00e4li ajat koodia komentorivilt\u00e4, saman asian hoitaa pikan\u00e4pp\u00e4in Ctrl+C.</p> <pre><code>from datetime import datetime, timedelta\n\nend_time = None  # Kuinka lasket nyt + 5 sekuntia ?\n\nwhile False:   # &lt;== Ratkaise t\u00e4m\u00e4 ehto. Mihin vertaat ja mit\u00e4?\n    pass\nelse:\n    print(\"5 seconds have passed!\")\n</code></pre>"},{"location":"kontrollirakenteet/try/","title":"Try","text":"<p>Pythonissa on tyypillist\u00e4 \"tehd\u00e4 ensin ja pyyt\u00e4\u00e4 tarpeen mukaan anteeksi\". T\u00e4h\u00e4n k\u00e4ytet\u00e4\u00e4n try-except-finally -lauseketta. Varsinkin ulkopuolisen rajapinnan, kuten jonkin palvelun REST API:n, k\u00e4ytt\u00f6 on aina virheherkk\u00e4\u00e4.</p> <ul> <li>Verkko voi olla alhaalla</li> <li>Palvelin voi olla nurin</li> <li>Sertifikaatti on voinut menn\u00e4 vanhaksi</li> <li>Token on voinut menn\u00e4 vanhaksi</li> <li>Palvelin saattaa olla kiireinen ja palauttaa HTTP status 503:n</li> <li>...tai jotain muuta!</li> </ul> <p>Sokkona luottamisen sijasta on turvallisempaa k\u00e4\u00e4ri\u00e4 API-kutsu try-lausekkeen sis\u00e4\u00e4n ja k\u00e4sitell\u00e4 mahdolliset virheet except-lausekkeessa. T\u00e4m\u00e4n j\u00e4lkeen koodi jatkaa suoritusta normaalisti. Muutoin mahdollinen virhetilanne, josta syntyy jokin Exception, kaataa sinun Python-sovelluksen suorituksen.</p>"},{"location":"kontrollirakenteet/try/#peruskaytto","title":"Perusk\u00e4ytt\u00f6","text":"<p>Try-lauseketta k\u00e4ytt\u00e4ess\u00e4 v\u00e4hint\u00e4\u00e4n yksi except-lauseke on pakollinen. Finally on valinnainen eik\u00e4 sit\u00e4 tarvitse l\u00e4hesk\u00e4\u00e4n aina. Finally-lausekkeen sis\u00e4ll\u00e4 voi esimerkiksi sulkea tietokantayhteyden tai tiedoston, joka on avattu try-lausekkeen sis\u00e4ll\u00e4, tai suorittaa jotakin muuta puhdistusta.</p> <pre><code>try:\n    # Do something\n    pass\nexcept:\n    # Handle exception\n    pass\nfinally:\n    # Do something after try-except\n    pass\n</code></pre> <p>Alla yksinkertainen esimerkki, joka kaatuu t\u00e4ss\u00e4 tapauksessa ZeroDivisionErroriin. Mik\u00e4li koodi kaatuisi mihin tahansa muuhun virheeseen, seuraava except-blokki ottaa sen vastaan, tulostaa viestin ruudulle, ja lopulta nostaa virheen. Virheiden tarkempi k\u00e4sittely ja lokiin kirjoittaminen on seuraavien Python-kurssien aihe.</p> <pre><code>try: \n    x = 10 / 0\nexcept ZeroDivisionError:\n    print(\"You can't divide by zero!\")\nexcept Exception as e:\n    print(\"Something else went wrong! Error: \" + str(e))\n    raise\n</code></pre>"},{"location":"kontrollirakenteet/try/#pidempi-esimerkki","title":"Pidempi esimerkki","text":"<p>Jotta virheen synnyn ymm\u00e4rt\u00e4isi, tulee kurkata sen kirjaston dokumentaatiota (tai l\u00e4hdekoodia), jota olet k\u00e4ytt\u00e4m\u00e4ss\u00e4. Pythonissa on t\u00e4ysin sallittua luoda omia virheit\u00e4, joten et voi l\u00e4ht\u00f6kohtaisesti tiet\u00e4\u00e4, mit\u00e4 virheit\u00e4 ajamasi kirjasto voi nostaa. Alla esimerkkikoodia, joka edustaa ovea, joka on ehk\u00e4 lukossa, ehk\u00e4 ei. Mik\u00e4li oven yritt\u00e4\u00e4 tiirikoida auki, voi tiirikka menn\u00e4 rikki.</p> <p>K\u00e4ytt\u00e4j\u00e4 saa itse asettaa oven lukossa olemisen mahdollisuuden sek\u00e4 tiirikan rikkoutumisen mahdollisuuden.</p> <pre><code>import random \n\nclass DoorLockedException(Exception):\n    pass\n\nclass LockpickBrokeException(Exception):\n    pass\n\nclass Door:\n    def __init__(self, locked_chance: float, lockpick_break_chance: float):\n        self.locked = random.random() &lt; locked_chance\n        self.lockpick_break_chance = lockpick_break_chance\n        self.closed = True\n\n    def open(self):\n        if self.locked:\n            raise DoorLockedException()\n        else:\n            self.closed = False\n\n    def lockpick(self):\n        if random.random() &lt; self.lockpick_break_chance:\n            raise LockpickBrokeException()\n        else:\n            self.locked = False\n\n    def is_closed(self) -&gt; bool:\n        return self.closed\n</code></pre> <p>Alla koodi, joka pyrkii avaamaan oven ensin ihan vain nyk\u00e4isem\u00e4ll\u00e4. T\u00e4m\u00e4n j\u00e4lkeen oven tiedet\u00e4\u00e4n olevan lukossa, joten jatkossa pit\u00e4\u00e4 yritt\u00e4\u00e4 tiirikkaa.</p> <pre><code># Kokeile muuttaa locked_chace ja lockpick_break_chance arvoja\ndoor = Door(locked_chance=0.95, lockpick_break_chance=0.80)\n\n# Yritet\u00e4\u00e4n kerran ilman tiirikkaa, loput tiirikalla\nretries = 6\nwe_know_it_is_locked = False\n\n\nfor retry in range(retries):\n    try:\n        if we_know_it_is_locked:\n            print(\"Kokeillaan tiirikkaa\")\n            door.lockpick()\n        door.open()\n    except DoorLockedException:\n        print(\"Ovi on lukossa. Kaivetaan tiirikat pussista.\")\n        we_know_it_is_locked = True\n    except LockpickBrokeException:\n        print(\"... murtov\u00e4lineet meni rikki, yritet\u00e4\u00e4n uudestaan\")\n    except:\n        print(\"Jotain meni pieleen, softassa on vikaa vikaa vikaa...\")\n        raise\n\n    if not door.is_closed():\n        print(f\"[SUCCESS] Ovi on auki. Vaati {retry} tiirikkaa.\")\n        break\nelse:\n    print(f\"[FAILURE] Ovi ei auennut {retry} tiirikalla.\")\n</code></pre>"},{"location":"muut_kielet/javascript/","title":"Javascript","text":"<p>JavaScript on kielen rakenteeltaan ja jopa syntaksiltaan yll\u00e4tt\u00e4v\u00e4n l\u00e4hell\u00e4 Pythonia. JavaScriptin opiskelu on siten luontevaa Pythonin j\u00e4lkeen. T\u00e4m\u00e4 mahdollistaa, ett\u00e4 voit muun muassa luoda:</p> <ul> <li>Web-serverin, joka tarjoaa REST-rajapinnan avulla JSON-muotoista dataa.<ul> <li>Kieli: Python</li> <li>Kirjastot: FastAPI, Uvicorn</li> </ul> </li> <li>Http-sivuston, joka k\u00e4ytt\u00e4\u00e4 REST-rajapintaa ja n\u00e4ytt\u00e4\u00e4 datan k\u00e4ytt\u00e4j\u00e4lle.<ul> <li>Kielet: HTML, Vanilla JavaScript</li> <li>Kirjastot: Fetch API</li> </ul> </li> </ul>"},{"location":"muut_kielet/javascript/#kielten-samankaltaisuus","title":"Kielten samankaltaisuus","text":"<p>Samankaltaisuudet:</p> <ul> <li>Kumpikin on dynaamisesti tyypitetty</li> <li>Kumpikin on tulkattu</li> <li>Kumpaakin voi kehitt\u00e4\u00e4 tavallisella tekstieditorilla</li> <li>Kummassakin on REPL (tavallaan)</li> </ul> <p>Eroavaisuudet:</p> <ul> <li>Syntaksi pieniss\u00e4 m\u00e4\u00e4rin<ul> <li>JS:ss\u00e4 on aaltosulkeita kaikkialla</li> <li>JS:ss\u00e4 on puolipiste komentojen lopussa</li> <li>Python on snake_case, JavaScript on camelCase</li> </ul> </li> <li>JS toimii selaimessa</li> <li>JS:ll\u00e4 ei l\u00e4ht\u00f6kohtaisesti k\u00e4sitell\u00e4 tiedostoja</li> </ul>"},{"location":"muut_kielet/javascript/#repl","title":"REPL","text":"<p>Saat REPL:n k\u00e4yntiin kahdella tavalla.</p> <ol> <li>Nettiselaimella mill\u00e4 tahansa sivulla</li> <li>Nettiselaimella omassa sandboxissa</li> <li>Komennolla <code>node</code></li> </ol>"},{"location":"muut_kielet/javascript/#vaihtoehto-1","title":"Vaihtoehto 1:","text":"<p>Avaa valitsemasi nettiselain (esim. Chrome). Paina F12. Valitse Console-v\u00e4lilehti. Kirjoita koodia ja paina Enter.</p>"},{"location":"muut_kielet/javascript/#vaihtoehto-2","title":"Vaihtoehto 2:","text":"<p>Luo uusi tiedosto <code>index.html</code> ja <code>script.js</code>.</p> <pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;JavaScript Sandbox&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- type=module is required for ES6 modules --&gt;\n    &lt;script type=\"module\" src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Aja t\u00e4m\u00e4n j\u00e4lkeen kansiossa http-serveri esimerkiksi Pythonilla <code>python -m http.server</code>. Alla hyvin yksinkertainen Hello World -esimerkki.</p> <pre><code>// script.js\n// Luo funktio, joka tekee jotakin. T\u00e4m\u00e4 palauttaa muuttujat siten kuten se sille annettiin.\nfunction echo(input) {\n    return input;\n}\n\n// Kutsu funktiota ja tulosta konsoliin\nlet result = echo(\"Hello World!\");\nconsole.log(result);\n\n// Voit poistaa t\u00e4m\u00e4n, mik\u00e4li sinulla ei ole tarvetta kutsua funktiota Consolessa.\n// Window on globaali objekti, joten siihen kiinnitetty echo on globaali funktio.\nwindow.echo = echo;\n</code></pre> <p>Nyt voit avata palvelimen osoitteen selaimessa ja n\u00e4et tuloksen Consolessa. Voit kehitt\u00e4\u00e4 koodia REPL-hengess\u00e4 Consolessa ja kopioida toimivaa koodia script.js-tiedostoon. T\u00e4m\u00e4 on hieman purkkaviritelm\u00e4, mutta toimii.</p>"},{"location":"muut_kielet/javascript/#vaihtoehto-3","title":"Vaihtoehto 3:","text":"<p>Asenna joko node.js paikallisesti tai Docker-konttiin. Nodessa ei ole yht\u00e4 n\u00e4pp\u00e4r\u00e4\u00e4 virtuaaliymp\u00e4rist\u00f6jen hallintaa kuin Pythonissa, joten suosittelen Dockeria.</p> <p>Esimerkki <code>Dockerfile</code> ja <code>docker-compose.yml</code> l\u00f6ytyv\u00e4t Javascript-perusteet-code reposta.</p> <pre><code># Luo Docker-kontti\n$ docker image build -t kamk/tietolo-js .\n\n# Aja kontti\n# ks. parametrien selitykset: https://docs.docker.com/engine/reference/commandline/container_run/\ndocker container run -it --rm kamk/tietolo-js node\n</code></pre>"},{"location":"muut_kielet/javascript/#python-to-javascript","title":"Python to JavaScript","text":""},{"location":"muut_kielet/javascript/#muuttujan-luominen","title":"Muuttujan luominen","text":"<pre><code># Pythonissa ei ole constia, mutta k\u00e4yt\u00e4nt\u00f6 \n# on kirjoittaa sit\u00e4 vastaava muuttuja isolla\nWIDTH = 1024\n\n# Muut muuttujat ovat snake_casea\nuser_input = \"Blank\"\n</code></pre> <pre><code>// Const on immutable\nconst width = 1024;\n\n// Let on mutable\nlet userInput = \"Blank\";\n\n// Var on vanha tapa tehd\u00e4 muuttujia\n// var x = \"\u00c4l\u00e4 k\u00e4yt\u00e4 t\u00e4t\u00e4\";\n</code></pre>"},{"location":"muut_kielet/javascript/#muuttujatyypit","title":"Muuttujatyypit","text":"<pre><code>my_string = \"Hello World!\"\nmy_other_string = 'Hello World!'\nmy_int = 1\nmy_float = 1.0\nmy_bool = True\nmy_list = [1, 2, 3]\nmy_dict = {\"name\": \"John\", \"age\": 30}\n\n# Tulostaa tyypin\nprint(type(my_dict)\n</code></pre> <pre><code>// let tai const\nlet myString = \"Hello World!\";\nlet myOtherString = 'Hello World!';\nlet myNumber = 1;   // JavaScriptiss\u00e4 ei ole erillist\u00e4 int-tyyppi\u00e4\nlet myNumber = 1.0; // vaan n\u00e4m\u00e4 kumpikin ovat float.\nlet myBool = true;\nlet myMutableArray = [1, 2, 3];\nconst myImmutableArray = [1, 2, 3];\nlet myObject = {\"name\": \"John\", \"age\": 30};\n\n// Tulostaa tyypin\nconsole.log(typeof(myObject));\n</code></pre>"},{"location":"muut_kielet/javascript/#listan-arvon-muokkaaminen","title":"Listan arvon muokkaaminen","text":"<pre><code>my_list = [1, 2, 3]\nmy_list[0] = 4\n</code></pre> <pre><code>let myArray = [1, 2, 3];\nmyArray[0] = 4;\n</code></pre>"},{"location":"muut_kielet/javascript/#listan-metodit","title":"Listan metodit","text":"<pre><code>len(my_list)\nmy_list.append(4)\nmy_list.pop()\nmy_list[start:end]\nmy_list[::-1]\nmy_list + my_list\n</code></pre> <pre><code>myArray.length;\nmyArray.push(4);\nmyArray.pop();\nmyArray.slice(start, end);\nmyArray.reverse();\nmyArray.concat(myArray);\n</code></pre>"},{"location":"muut_kielet/javascript/#konsoliin-tulostaminen","title":"Konsoliin tulostaminen","text":"<pre><code>print(\"Hello World!\")\n</code></pre> <pre><code>console.log(\"Hello World!\");\n</code></pre>"},{"location":"muut_kielet/javascript/#merkkijonon-muotoilu","title":"Merkkijonon muotoilu","text":"<pre><code># F-string\nname, age = \"John\", 30\nprint(f\"Hello, my name is {name} and I am {age} years old.\")\n\n# String-metodit\nname_upper = name.upper()\n</code></pre> <pre><code>// Template literal\nconst name = \"John\";\nconst age = 30;\nconsole.log(`Hello, my name is ${name} and I am ${age} years old.`);\n\n// String-metodit\nconst nameUpper = name.toUpperCase();\n</code></pre>"},{"location":"muut_kielet/javascript/#perus-loop","title":"Perus loop","text":"<pre><code>for i in range(10):\n    print(i)\n</code></pre> <pre><code>for (let i = 0; i &lt; 10; i++) {\n    console.log(i);\n}\n</code></pre>"},{"location":"muut_kielet/javascript/#objektien-kasittely-loopissa","title":"Objektien k\u00e4sittely loopissa","text":"<pre><code># Pythonissa JS-objektia vastaa sanakirja\nmy_data = [\n    {\"name\": \"John\", \"age\": 30},\n    {\"name\": \"Jane\", \"age\": 25}\n]\n\nfor person in my_data:\n    print(person[\"name\"])\n</code></pre> <pre><code>const myData = [\n    {\"name\": \"John\", \"age\": 30},\n    {\"name\": \"Jane\", \"age\": 25}\n];\n\nfor (const person of myData) {\n    console.log(person.name);\n}\n</code></pre>"},{"location":"muut_kielet/javascript/#funktiot","title":"Funktiot","text":"<pre><code># Argumentit a ja b sek\u00e4 keyword-argumentit c ja d\ndef my_function(a, b, c=1, d=42):\n    pass\n</code></pre> <pre><code>// Vaihtoehto 1: Perintinen code block\nfunction myFunction(a, b, c=1, d=42) {\n    // ...\n}\n\n// Vaihtoehto 2: Arrow function\nlet myFunction = (a, b, c=1, d=42) =&gt; { return d }\n</code></pre>"},{"location":"muut_kielet/javascript/#import","title":"Import","text":"<pre><code># main.py\nfrom my_package.my_module import my_function\n\n# ./my_package/my_module.py\ndef my_function():\n    return \"Hello World!\"\n</code></pre> <pre><code>// script.js\n// ES6 modules\nimport { myFunction } from \"./modules/mmodule.js\";\n\n// modules/functions.js\nfunction myFunction() {\n    return \"Hello World!\";\n}\n\nexport { myFunction };\n</code></pre>"},{"location":"muut_kielet/javascript/#kayttajan-syote","title":"K\u00e4ytt\u00e4j\u00e4n sy\u00f6te","text":"<p>Pythonissa k\u00e4ytt\u00e4j\u00e4n sy\u00f6te otetaan yleens\u00e4 vastaan joko <code>python mun_skripti.py --parametri parametrin_arvo</code> tai luetaan konfiguraatiotiedostosta. </p> <p>JavaScriptiss\u00e4, nimenomaan Http-frontin kannalta, k\u00e4ytt\u00e4j\u00e4n sy\u00f6te poimitaan eventeist\u00e4. T\u00e4t\u00e4 varten sinun tulee tutustua DOM-tapahtumiin. T\u00e4ss\u00e4 yksinkertainen esimerkki.</p> <pre><code>const echoButton = document.querySelector(\"#echo-button\");\nechoButton.addEventListener(\"click\", myFunction);\n</code></pre> <p>DOM on pahasti t\u00e4m\u00e4n pikakatsauksen skoopin ulkopuolella. Tutustu Mozillan dokumentaation A first splash into JavaScript-artikkeliin sek\u00e4 saman sivuston Document-dokumentaatioon.</p>"},{"location":"muuttujatyypit/joukko/","title":"Joukko (set)","text":"<p>Pythonin built-in tyyppi joukko eli <code>set</code> on j\u00e4rjest\u00e4m\u00e4t\u00f6n kokoelma. Joukon entiteeteill\u00e4 ei siis ole indeksi\u00e4, toisin kuin aiemmin tututuiksi tulleilla listalla ja tuplella. Lis\u00e4ksi joukko voi sis\u00e4lt\u00e4\u00e4 vain uniikkeja arvoja. </p>"},{"location":"muuttujatyypit/joukko/#joukon-luonti","title":"Joukon luonti","text":"<pre><code># Parittomien &lt;=10 lukujen joukko\n&gt;&gt;&gt; {1, 3, 5, 7, 9}\n{1, 3, 5, 7, 9}\n\n# Parillisten \"0 &lt; x &lt; 11\" lukujen joukko\n&gt;&gt;&gt; set(range(2, 11, 2))\n{2, 4, 6, 8, 10}\n\n# Merkkijonoista koostuva joukko\n&gt;&gt;&gt; commons_pets = {\"cat\", \"dog\", \"parrot\", \"python\"}\n&gt;&gt;&gt; \"parrot\" in commons_pets\nTrue\n\n# Huomaa, ett\u00e4 joukon j\u00e4senet voivat olla kesken\u00e4\u00e4n eri tyyppi\u00e4\n&gt;&gt;&gt; {\"meaning\", 42, .5}\n{0.5, 42, 'meaning'}\n</code></pre> <p>Joukkoon lis\u00e4tt\u00e4v\u00e4n entiteetin tulee olla h\u00e4sh\u00e4tt\u00e4v\u00e4\u00e4 tyyppi\u00e4. Duplikaatit tunnistetaan h\u00e4shin avulla ja ne poistetaan. T\u00e4m\u00e4n takia listasta, joka sis\u00e4lt\u00e4\u00e4 duplikaatteja, voi luoda helposti uniikkien arvojen setin:</p> <pre><code>&gt;&gt;&gt; set([1, 1, 1, 2, 2, 3])\n{1, 2, 3}\n</code></pre> <p>Tip</p> <p>Aiempi muistis\u00e4\u00e4nt\u00f6 LSD, jolla tunnistaa mutable eli muutettavat tietotyypit, p\u00e4tee my\u00f6s t\u00e4h\u00e4n. H\u00e4sh\u00e4\u00e4m\u00e4tt\u00f6m\u00e4t tietotyypit ovat LSD eli: list, set, dictionary.</p> <p>Joukkoa ei voi indeksoida, slicett\u00e4\u00e4 tai k\u00e4ytt\u00e4\u00e4 LIFO-tyylisen\u00e4 (List In, First Out) jonona. Juokko on kuitenkin huomattavan hy\u00f6dyllinen, kun haluat tutkia, millaisista alkioista jokin populaatio koostuu, tai miten kaksi eri populaatiota vertautuvat toisiinsa.</p>"},{"location":"muuttujatyypit/joukko/#operaatiot","title":"Operaatiot","text":""},{"location":"muuttujatyypit/joukko/#aritmeettiset-ja-vertailu","title":"Aritmeettiset ja Vertailu","text":"<p>N\u00e4m\u00e4 voi unohtaa joukkojen kanssa. Esimerkiksi <code>{1, 2, 3} + {4, 5}</code> ei toimi. Valtaosa vertailuoperaattoreista on siirretty uuteen, joukko-operaatioiden k\u00e4ytt\u00f6\u00f6n. Yhtel\u00e4isyys eli <code>a == b</code> toimii kuitenkin yh\u00e4 arvattavalla tavalla: se tarkistaa, ett\u00e4 kaksi joukkoa ovat t\u00e4ysin samat.</p>"},{"location":"muuttujatyypit/joukko/#loogiset","title":"Loogiset","text":"<p>N\u00e4m\u00e4 k\u00e4ytt\u00e4ytyv\u00e4t samalla tavalla kuin sekvenssien kanssa. <code>set_a or set_b or set_c</code> palauttaa ensimm\u00e4isen joukon, jonka pituus eli <code>len()</code> ei ole 0.</p>"},{"location":"muuttujatyypit/joukko/#joukko","title":"Joukko","text":"<p>Joukko tukee aivan omanlaisiaan operaatioita, jotka saattavat olla sinulle ennest\u00e4\u00e4n tuttuja matematiikasta. Mik\u00e4li olet jo opiskellut SQL:\u00e4\u00e4, saatat tunnistaa yhten\u00e4isyytt\u00e4 n\u00e4iss\u00e4 JOIN-operaatioihin sek\u00e4 SQL-komentoon DISTINCT.</p> Operaatio Vaihtoehto Selite <code>a == b</code> Joukot a ja b ovat t\u00e4ysin samat. Ei varsinaisesti joukko-operaatio, mutta on hyv\u00e4 esitell\u00e4 t\u00e4ss\u00e4 yhteydess\u00e4. <code>a.isdisjoint(b)</code> Palauttaa True, jos joukoilla ei ole yhteisi\u00e4 j\u00e4seni\u00e4. <code>a.issubset(b)</code> <code>a &lt; b</code> Palauttaa True, jos joukko a kuuluu kokonaisuudessaan joukkoon b <code>a.issuperset(b)</code> <code>a &gt; b</code> Palauttaa True, jos joukko b kuuluu kokonaisuudessaan joukkoon a <code>a.union(b, c, ...)</code> <code>a                | b                                                                                                            | c | ...</code> Palauttaa joukkojen unionin eli yhdisteen eli joukon, johon kuuluvat kaikkien joukkojen uniikit alkiot. <code>a.intersection(b, c, ...)</code> <code>a &amp; b &amp; c &amp; ...</code> Palauttaa joukon alkioista, jotka kuuluvat kaikkiin joukkoihin. <code>a.difference(b, c, ...)</code> <code>a - b - c - ...</code> Palauttaa joukkoerotuksen eli alkiot, jotka kuuluvat joukkoon a, mutta eiv\u00e4t muihin joukkoihin. <code>a.symmetric_difference(b)</code> <code>a ^ b</code> Palauttaa ne alkiot, jotka ovat a:ssa mutta eiv\u00e4t b:ss\u00e4, ja ne, jotka ovat b:ss\u00e4 mutta eiv\u00e4t a:ssa."},{"location":"muuttujatyypit/joukko/#harjoittele","title":"Harjoittele","text":""},{"location":"muuttujatyypit/joukko/#harjoittele-joukko-operaatiot","title":"Harjoittele: Joukko-operaatiot","text":"<p>Sinulla on jo valmiiksi <code>requests</code>-kirjasto, koska se asentuu Jupyter Notebookin riippuvuutena. Kokeillaan k\u00e4ytt\u00e4\u00e4 sit\u00e4. Aloitetaan noutamalla 10 k\u00e4ytt\u00e4j\u00e4\u00e4 ja 100 postausta JSON Placeholder -sivustolta, joka tarjoilee dummy-dataa REST-rajapinnan yli.</p> <pre><code>import requests\n\nusers_url = \"https://jsonplaceholder.typicode.com/users\"\nposts_url = \"https://jsonplaceholder.typicode.com/posts\"\ncomments_url = \"https://jsonplaceholder.typicode.com/comments\"\n\nusers = requests.get(users_url).json()\nposts = requests.get(posts_url).json()\ncomments = requests.get(comments_url).json()\n</code></pre> <p>Tutki, mit\u00e4 kysyiset muuttujat sis\u00e4lt\u00e4v\u00e4t. Ne ovat tyyppi\u00e4 <code>List[dictionary]</code>, ja dictionary joka esitell\u00e4\u00e4n seuraavassa luvussa. K\u00e4\u00e4nnet\u00e4\u00e4n se muotoon <code>List[int]</code>, jossa kokonaisluku on k\u00e4ytt\u00e4j\u00e4n id.</p> <pre><code>user_ids = [x[\"id\"] for x in users]\npost_user_ids = [x[\"userId\"] for x in posts]\n\nuser_emails = [x[\"email\"].lower() for x in users]\ncomment_user_email = [x[\"email\"].lower() for x in comments]\n</code></pre> <p>Todista joukko-operaatioita k\u00e4ytt\u00e4en seuraavat v\u00e4itteet:</p> <ol> <li>Kaikki rekister\u00f6ityneet k\u00e4ytt\u00e4j\u00e4t ovat luoneet v\u00e4hint\u00e4\u00e4n yhden postauksen</li> <li>Kukaan rekister\u00f6itynyt k\u00e4ytt\u00e4j\u00e4 ei ole kirjoittanut kommenttia omalla s\u00e4hk\u00f6postillaan.</li> </ol>"},{"location":"muuttujatyypit/joukko/#harjoitus-frozenset","title":"Harjoitus: Frozenset","text":"<p>Joukko eli set kuuluu yll\u00e4 mainittuun muistis\u00e4\u00e4nt\u00f6\u00f6n LSD. Joukko ei siis voi kuulua joukkoon. Jos kuitenkin haluat luoda joukon joka koostuu useista joukoista, tulee sinun k\u00e4ytt\u00e4\u00e4 joukon muuttumatonta (immutable) varianttia nimelt\u00e4\u00e4n <code>frozenset</code>.</p> <pre><code>odds = frozenset(range(1, 11, 2))\nevens = frozenset(range(2, 11, 2))\nodds_and_evens = {odds, evens}\n</code></pre> <p>Keksi jokin populaatio, joka koostuu pienemmist\u00e4 populaatioista, ja toteuta se joukkona j\u00e4\u00e4dytettyj\u00e4 settej\u00e4. Yksi kuvitteellinen esimerkki, josta voi olla hy\u00f6ty\u00e4, on pizza. Alla esimerkki, joka sallii k\u00e4ytt\u00e4j\u00e4n valita pizza-aineksia. Tutki, mit\u00e4 ohjelma tekee.</p> <pre><code># Define the constant, available ingredients\nINGREDIENTS = [ \"Egg\", \"Ham\", \"Pineapple\"]\n\ndef print_menu():\n    for i, ingredient in enumerate(INGREDIENTS, start=1):\n        print(f\"{i:&gt;3}  {ingredient}\")\n\ndef prompt_pizza() -&gt; frozenset:\n\n    # Default pizza.\n    pizza_combination = {\"Tomato sauce\", \"Cheese\"}\n\n    # Prompt\n    print(\"Enter comma-seprated ingredients (e.g. 1,2,4) or press enter to finish: \")\n    user_input = input()\n    print(user_input)\n    wanted_ingredients = [int(x) for x in user_input.split(\",\") if x]\n\n    for index in wanted_ingredients:\n        index = index - 1  # list if zero-indexed\n\n        if index in range(len(INGREDIENTS)):\n            pizza_combination.add(INGREDIENTS[index])\n        else:\n            print(f\"Sorry, do not have ingredient #{index + 1}. Decided to add spam instead.\")\n            pizza_combination.add(\"Spam\")\n\n    return frozenset(pizza_combination)\n\ndef user_wants_to_continue() -&gt; bool:\n    print(\"Do you want to order another pizza? (yes/no)\")\n    another_pizza = input().lower()\n    return another_pizza == \"yes\"\n\n\n# Initialize\nunique_pizzas_ordered = set()\nprint_menu()\n\nwhile True:\n    pizza = prompt_pizza()\n\n    print(\"Adding pizza to unique orders:\", pizza)\n    unique_pizzas_ordered.add(frozenset(pizza))\n\n    if not user_wants_to_continue():\n        break\n\nprint(\"\\nAll pizza combinations ever ordered:\")\nfor combination in unique_pizzas_ordered:\n    print(\", \".join([x for x in combination]))\n</code></pre>"},{"location":"muuttujatyypit/loppusanat/","title":"Loppusanat","text":"<p>T\u00e4ss\u00e4 osiossa on esitelty Pythonin muuttujatyypit siin\u00e4 laajuudessa, ett\u00e4 voit luoda kokonaisia ohjelmia koskematta yhteenk\u00e4\u00e4n uuteen aiheeseen. T\u00e4m\u00e4n osion j\u00e4lkeen voit siirty\u00e4 opiskelemaan Pythonin muita ominaisuuksia, kuten ehtolauseita ja silmukoita.</p> <p>Pythonin muuttujatyypit ovat hyvin yksinkertaisia, mutta niiden avulla voidaan kuitenkin tehd\u00e4 monimutkaisia ohjelmia. T\u00e4m\u00e4 on yksi Pythonin vahvuuksista: se on helppo oppia, mutta sill\u00e4 voi luoda tuotantok\u00e4ytt\u00f6\u00f6n soveltuvia applikaatioita.</p>"},{"location":"muuttujatyypit/loppusanat/#muuttujatyypin-valitseminen","title":"Muuttujatyypin valitseminen","text":"<p>Pythonissa on useita erilaisia muuttujatyyppej\u00e4, ja niiden valitseminen voi olla aluksi vaikeaa. T\u00e4ss\u00e4 on muutamia vinkkej\u00e4, joiden avulla voit valita sopivan muuttujatyypin:</p> <ul> <li>Jos muuttujan arvo on kokonaisluku, k\u00e4yt\u00e4 <code>int</code>-tyyppi\u00e4.</li> <li>Jos muuttujan arvo on desimaaliluku, k\u00e4yt\u00e4 <code>float</code>-tyyppi\u00e4.</li> <li>Jos muuttujan arvo on teksti, k\u00e4yt\u00e4 <code>str</code>-tyyppi\u00e4.</li> <li>Jos muuttujan arvo on totuusarvo, k\u00e4yt\u00e4 <code>bool</code>-tyyppi\u00e4.</li> <li>NoneType on hyv\u00e4 paikanpit\u00e4j\u00e4 silloin, kun muuttujan arvoa ei ole viel\u00e4 m\u00e4\u00e4ritelty.</li> </ul> <p>Mik\u00e4li arvo on ihmiskieless\u00e4 monikko, kuten <code>colors</code>, k\u00e4yt\u00e4 jotakin seuraavista tyypeist\u00e4:</p> <ul> <li><code>list</code> on hyv\u00e4 valinta, jos sinulla on tarve muuttaa sekvenssin sis\u00e4lt\u00f6\u00e4 ohjelman suorituksen aikana.</li> <li><code>tuple</code> on hyv\u00e4 valinta, jos yll\u00e4 oleva ei ole totta.</li> <li><code>set</code> tulee usein tarpeeseen vain kun sinulla on tarve tutkia, onko jokin arvo olemassa tai verrata kahden eri sekvenssin populaatiota.</li> </ul> <p>Mik\u00e4li tarvitset \"look-up\"-tyylisen tietorakenteen, k\u00e4yt\u00e4 dict-tyyppi\u00e4. T\u00e4m\u00e4 tarkoittaa, ett\u00e4 sinulla on tarve l\u00f6yt\u00e4\u00e4 arvoja avaimen perusteella. Esimerkiksi, jos sinulla on tarve l\u00f6yt\u00e4\u00e4 henkil\u00f6n nimi henkil\u00f6tunnuksen perusteella, k\u00e4yt\u00e4 dict-tyyppi\u00e4. T\u00e4ll\u00f6in henkil\u00f6tunnus on avain ja nimi on arvo.</p> <p>Seuraavissa osioissa tutustutaan kontrollirakenteisiin, joiden avulla voidaan ohjata ohjelman suoritusta. Kontrollirakenteet ovat v\u00e4ltt\u00e4m\u00e4tt\u00f6mi\u00e4, jotta ohjelmasta saadaan tehty\u00e4 jotakin j\u00e4rkev\u00e4\u00e4.</p>"},{"location":"muuttujatyypit/merkkijono/","title":"Merkkijono","text":"<p>Pythonissa merkkijono (eng. <code>string</code>) on muuttumaton (eng. <code>immutable</code>) sarja Unicode-koodipisteit\u00e4. Tutkitaan, mit\u00e4 \u00e4skeinen lause tarkoittaa. Alla olevassa snippetiss\u00e4 luodaan merkkijono <code>\"Hello world! \ud83d\ude00\"</code>, joka sijoitetaan muuttujaan nimelt\u00e4\u00e4n <code>message</code>. Lopulta muuttujan arvo tulostetaan ruudulle (tai standarditulosteeseen.)</p> <pre><code>message = \"Hello world! \ud83d\ude00\"\nprint(message)\n</code></pre>"},{"location":"muuttujatyypit/merkkijono/#merkkijonon-luonti","title":"Merkkijonon luonti","text":"<p>Literaalin merkkijonon voi luoda kirjoittamalla jotakin lainausmerkkien v\u00e4liin tai heittomerkkien v\u00e4liin. Seuraavat komennot toimivat REPL:ss\u00e4:</p> <pre><code>&gt;&gt;&gt; 'Cat'\n'Cat'\n&gt;&gt;&gt; \"Cat\"\n'Cat'\n&gt;&gt;&gt; print(\"Cat\")\nCat\n</code></pre> <p>Tyypillisesti merkkijono sijoitetaan muuttujaan, jotta sit\u00e4 voi k\u00e4ytt\u00e4\u00e4 my\u00f6hemmin. Alla oleva koodi on ajettu REPL:ss\u00e4:</p> <pre><code>&gt;&gt;&gt; animal = \"Cat\"\n&gt;&gt;&gt; print(animal)\nCat\n</code></pre> <p>Voit luoda my\u00f6s muista muuttujatyypeist\u00e4 merkkijonona ja sy\u00f6t\u00e4m\u00e4ll\u00e4 ne <code>str</code>-konstruktorille argumenttina. T\u00e4m\u00e4 toimii kaikkiin objekteihin, ellei objektista ole tarkoituksella poistettu t\u00e4t\u00e4 toiminnallisuutta (eli metodia <code>__str__</code>). Alla esimerkkej\u00e4:</p> <pre><code>&gt;&gt;&gt; str(4)    # Kokonaisluku (int)\n'4'\n&gt;&gt;&gt; str(4.0)  # Desimaaliluku (float)\n'4.0'\n&gt;&gt;&gt; str(str)  # Luokka string itsess\u00e4\u00e4n\n\"&lt;class 'str'&gt;\"\n</code></pre> <p>Tyypillisesti koodi kannattaa kirjoittaa siten, ett\u00e4 k\u00e4yt\u00e4t yht\u00e4 tyyli\u00e4 l\u00e4pi koodin. Valitse siis joko lainausmerkit <code>\"Kissa\"</code> tai heittomerkit <code>'Kissa'</code>. Mik\u00e4li tarvitset lainausmerkki\u00e4 ja/tai heittomerkki\u00e4 merkkijonon sis\u00e4ll\u00e4, sinulla on pari vaihtoehtoa.</p> <pre><code># Vaihtoehto 1: k\u00e4yt\u00e4 vastakkaisia merkkej\u00e4\nincl_apostrophe = \"A scratch? Your arm's off!\"\nincl_quotes = 'A \"scratch\"? Your arm is off!'\n\n# Vaihtoehto 2: K\u00e4yt\u00e4 backslashi\u00e4 karkaamaan seuraava merkki\nincl_both = \"A \\\"scratch\\\"? Your arm's off!\"\n\n# Vaihtoehto 3: K\u00e4yt\u00e4 Unicode code pointtia\nincl_both = \"A \\x22scratch\\x22? Your arm's off!\"\n</code></pre> <p>Vaihtoehto kolme on vaikealukuinen ja saattaa her\u00e4tt\u00e4\u00e4 kysymyksi\u00e4. Kenoviiva (eng. backslash) on Pythonissa, kuten my\u00f6s monissa muissakin kieliss\u00e4, tietynlainen metamerkki, jonka merkitys on <code>escape character</code>. Kenoviivaa seuraaville merkeille annetaan erityismerkitys. Alla muutama:</p> Escape Merkitys <code>\\n</code> Uusi rivi. (\"Line Feed\") <code>\\r</code> Siirr\u00e4 kirjoituskoneen vaunu alkuun (\"Carriage return\") <code>\\t</code> Tabulaattori eli sarkain <code>\\b</code> Askelpalautin eli backspace <p>Kokeile ihmeess\u00e4, kuinka nykyajan tietokone reagoi k\u00e4skyyn, jossa pyyd\u00e4t palauttamaan kirjoituskoneen vaunun alkuasentoonsa. Tai kuinka se reagoi, jos sijoitat keskelle merkkijonoa askelpalauttimia? Ent\u00e4p\u00e4 uudet rivit? Selvit\u00e4, mit\u00e4 seuraavat komennot tulostavat.</p> <pre><code>print(\"This is a sentence that will be partially \\r Overwritten\")\nprint(\"This is a sentence that will be partially \\b\\b\\b\\b\\b Overwritten\") # (1)\nprint(\"This \\n is \\n awesome\")\n</code></pre> <ol> <li>Huomaathan, ett\u00e4 <code>\\b</code>toimii REPL:ss\u00e4, mutta ei Jupyter Notebookissa.</li> </ol> <p>Ent\u00e4, jos sinulla on tarve k\u00e4ytt\u00e4\u00e4 kenoviivaa merkkijonossa? T\u00e4m\u00e4n ongelman voit ratkaista pakenemalla kenoviivan itsens\u00e4 tai :</p> <pre><code># Vaihtoehto 1: pakene kenoviiva\n&gt;&gt;&gt; print(\"C:\\\\Users\\\\\")\nC:\\Users\\\n\n# Vaihtoehto 2: K\u00e4yt\u00e4 raw stringi\u00e4 muodolla r\"\".\n&gt;&gt;&gt; print(r\"C:\\Users\\\")\n</code></pre> <p>Jos sinulla on tarve muodostaa todella pitk\u00e4 merkkijono, sinulla on muutamia vaihtoehtoja.</p> <pre><code># Vaihtoehto 1: Sijoita merkkijono kolmen lainausmerkin tai heittomerkin v\u00e4liin\nlong_string = \"\"\"You can write the string between triple-quotation\nmarks and it will preserve all the formatting including\n        &lt;= this unnecessary whitespace. End the following newline character.\n\"\"\"\n\n# Vaihtoehto 2: Sijoita merkkijono osina sulkujen sis\u00e4\u00e4n\nlong_string = (\n    \"This is a very long string \"\n    \"written on multiple lines \"\n    \"but printed on a single line \"\n    \"since there are no newline characters.\"\n)\n\n# Vaihtoehto 3: Yhdist\u00e4m\u00e4 list&lt;str&gt; tyypin muuttujan entiteetit\nlist_of_strings = [\n    \"This is a very long string\",\n    \"written in multiple list items\",\n    \"but printed on a single line\",\n    \"since there are no newline characters.\",\n]\nlong_string = \" \".join(list_of_strings)\n</code></pre>"},{"location":"muuttujatyypit/merkkijono/#merkkijono-ja-operaattorit","title":"Merkkijono ja operaattorit","text":"<p>Merkkijonot eiv\u00e4t ole lukuja, mutta valitut Pythonin aritmeettiset operaatiot, vertailuoperaattorit, loogiset operaattorit sek\u00e4 j\u00e4senyytt\u00e4 testaavat operaattorit toimivat niit\u00e4 vasten silti.</p>"},{"location":"muuttujatyypit/merkkijono/#aritmeettiset","title":"Aritmeettiset","text":"Operaattori Esimerkki + <code>\"kissa\" + \"koira\"</code> * <code>\"x\" * 72</code>"},{"location":"muuttujatyypit/merkkijono/#vertailu","title":"Vertailu","text":"Operaattori Esimerkki == <code>\"kissa\" == \"kissa\"</code> != <code>\"KISSA\" != \"kissa\"</code> &gt;, &lt;, &gt;=, &lt;= <code>\"a\" &gt; \"b\"</code>"},{"location":"muuttujatyypit/merkkijono/#loogiset","title":"Loogiset","text":"Operaattori Esimerkki and <code>\"kissa\" and \"koira\"</code> or <code>\"\" or \"koira\"</code> not <code>not \"\"</code> <p>Teht\u00e4v\u00e4</p> <p>Kokeile kaikki yll\u00e4 olevat operaattorit l\u00e4pi. Selvit\u00e4, mit\u00e4 ne tekev\u00e4t. Vertailuoperaattorit suurempi/pienempi kuin, kuten my\u00f6s loogiset operaattorit, saattavat tuntua merkkijonojen kanssa ep\u00e4loogisilta. Ota selv\u00e4\u00e4!</p>"},{"location":"muuttujatyypit/merkkijono/#merkkijonojen-muotoilu","title":"Merkkijonojen muotoilu","text":"<p>Merkkijonoihin voi upottaa muiden muuttujen arvoja, vaikka ne eiv\u00e4t olisi merkkijonoja itsess\u00e4\u00e4n. Alla on kolme tapaa tehd\u00e4 t\u00e4m\u00e4: yksi vanha ja kaksi tuoreempaa.</p>"},{"location":"muuttujatyypit/merkkijono/#modulo-string","title":"Modulo string","text":"<p>T\u00e4m\u00e4 <code>% string formatting</code> on vanha tapa, jonka on korvannut alla esitellyt <code>str.format()</code> sek\u00e4 <code>f-string formatting</code>. T\u00e4h\u00e4n kuitenkin ajoittain t\u00f6rm\u00e4\u00e4 Internetin esimerkeriss\u00e4 ja dokumentaatiossa, joten se on hyv\u00e4 tuntea, vaikka sit\u00e4 ei k\u00e4ytt\u00e4isi.</p> <pre><code>name = \"Parrot\"\nnumber = 42\n\nmessage = \"My pet is a %s and it is %d years old\" % (name, number)\nprint(message)\n</code></pre> <p>Tyyli muistuttaa C-kielest\u00e4 tuttua <code>printf</code>:\u00e4\u00e4, ja siit\u00e4 voikin lukea lis\u00e4\u00e4 Pythonin dokumentaatiosta v\u00e4liotsikon printf-style String Formatting alta. K\u00e4yt\u00e4th\u00e4n Pythonissa kuitenkin kahta alla olevaa tapaa merkkijonojen muotoiluun.</p>"},{"location":"muuttujatyypit/merkkijono/#format","title":"Format","text":"<pre><code>red, green, blue = 255, 128, 0\n\ntext_a = \"Values are ({r},{g},{b})\".format(r=red, g=green, b=blue)\n</code></pre> <p>Vanha format-tyyli on luettavuudeltaan parempi kuin edelt\u00e4j\u00e4ns\u00e4, mutta se on silti saanut viel\u00e4 paremman seuraajan. Jatka lukemista.</p>"},{"location":"muuttujatyypit/merkkijono/#f-string","title":"F-string","text":"<pre><code>red, green, blue = 255, 128, 0\n\n#        Huomaa f-kirjain\n#        \u2193\ntext_b = f\"Values are ({red},{green},{blue})\"\n</code></pre> <p>Kun merkkijonoista puhutaan, f-string mahdollistaa muun muassa merkkijonon tulostamisen tietyn levyisen\u00e4 eli <code>left|center|right padding</code>. Yll\u00e4 olevissa esimerkiss\u00e4 aaltosulkeiden sis\u00e4\u00e4n laitettiin pelkk\u00e4 muuttujan nimi: t\u00e4ss\u00e4 tapauksessa se tulostaa muuttujan arvon (repr-presentaation). Kokeillaan seuraavksi sijoittaa muuttujan lis\u00e4ksi aaltosulkeisiin muotoiluohjeita, jotka sijoitetaan kaksoispisteen j\u00e4lkeen, kuten <code>{muuttuja:muotoiluohjeet}</code>. Alla olevien esimerkkien avulla on helppo muodostaa tabulaarista eli taulukkomallista tulostetta, ja t\u00e4st\u00e4 l\u00f6ytyy esimerkki luvun lopusta.</p> <pre><code>ingredient = \"spam\"\n\n# Voit kirjoittaa aaltosulkujen v\u00e4liin koodia\nprint(f\"{ingredient * 10}\")\n\n# ...tai :-merkin j\u00e4lkeen antaa muotoiluun ohjeita\nprint(f\"{ingredient:&lt;42}\")\nprint(f\"{ingredient:&gt;42}\")\nprint(f\"{ingredient:^42}\")\nprint(f\"{ingredient:*^42}\")\n\n# My\u00f6s muotoiluohje saa sis\u00e4lt\u00e4\u00e4 muuttujia\n# kunhan ne k\u00e4\u00e4rit\u00e4\u00e4n aaltosulkeisiin\nn = 42\nprint(f\"{ingredient:*^{n}}\")\n</code></pre> <p>F-string eli \"formatted string literal\" on hy\u00f6dyllinen my\u00f6s muiden muuttujatyyppien kuin merkkijonojen tulostamisessa. Siisp\u00e4 t\u00e4h\u00e4n aiheeseen palataan aiheeseen kurssilla useassa eri luvussa. Jos mielenkiinto her\u00e4si, voit toki lukea aiheesta jo nyt lis\u00e4\u00e4, esimerkiksi fstring.help-sivustolta tai Pythonin omasta dokumentaatiosta.</p>"},{"location":"muuttujatyypit/merkkijono/#merkkijonon-metodit","title":"Merkkijonon metodit","text":"<p>Merkkijono on olio eli objekti, ja sill\u00e4 on olio-ohjelmointiin tyypilliseen tapaan omia metodeja. Alla n\u00e4kyy pari yleisesti hy\u00f6dyllist\u00e4, mutta tutustu muihin Pythonin dokumentaatiossa</p> <pre><code>&gt;&gt;&gt; \"MuN ShIfT N\u00e4pP\u00c4iN on SeKAiSiN\".capitalize()\n'Mun shift n\u00e4pp\u00e4in on sekaisin'\n\n&gt;&gt;&gt; \"MuN ShIfT N\u00e4pP\u00c4iN on SeKAiSiN\".lower()\n'mun shift n\u00e4pp\u00e4in on sekaisin'\n\n&gt;&gt;&gt; \"abc123\".isalnum()\nTrue\n\n&gt;&gt;&gt; \"abc123!\".isalnum()\nFalse\n\n&gt;&gt;&gt; \"x\".center(13)\n'      x      '\n\n&gt;&gt;&gt; \" k\u00e4ytt\u00e4j\u00e4n sy\u00f6te  \".strip()\n'k\u00e4ytt\u00e4j\u00e4n sy\u00f6te'\n\n&gt;&gt;&gt; \"puoli:pisteell\u00e4:eroitellut:jutut\".split(\":\")\n['puoli', 'pisteell\u00e4', 'eroitellut', 'jutut']\n</code></pre> <p>Merkkijono on sekvenssi, ja siihen toimii sis\u00e4\u00e4nrakennettu <code>len()</code> funktio samalla tavalla kuin listoihin ja muihin sekvensseihin. T\u00e4h\u00e4n tutustutaan my\u00f6hemmin tarkemmin listoja k\u00e4sittelev\u00e4ss\u00e4 luvussa.</p> <pre><code>&gt;&gt;&gt; len(\"abcde\")\n5\n</code></pre>"},{"location":"muuttujatyypit/merkkijono/#muuttumattomuus","title":"Muuttumattomuus","text":"<p>Yll\u00e4 todettiin, ett\u00e4 merkkijono on muuttumaton sarja merkkej\u00e4 (tai Unicode-koodipisteit\u00e4.) T\u00e4m\u00e4 tarkoittaa, ett\u00e4 et voi muokata merkkijonoa samalla tavalla kuin listaa, johon perehdyt\u00e4\u00e4n my\u00f6hemmiss\u00e4 luvuissa. Kokeile, mit\u00e4 tapahtuu, kun yrit\u00e4t muokata merkkijonon ensimm\u00e4ist\u00e4 kirjainta:</p> <pre><code>&gt;&gt;&gt; name = \"bond, James Bond\"\n&gt;&gt;&gt; name[0] = \"B\"\n</code></pre>"},{"location":"muuttujatyypit/merkkijono/#moduuli-pathlib","title":"Moduuli: pathlib","text":"<p>Yksi hyvin yleinen k\u00e4ytt\u00f6tarkoitus merkkijonoille ovat hakemisto- ja tiedostonimet. Niiden k\u00e4sittely k\u00e4sin on yll\u00e4tt\u00e4v\u00e4n haasteellista muun muassa siksi, ett\u00e4 hakemistoerotin riippuu k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4st\u00e4. Windowsissa se on <code>\\</code> ja Unix-pohjaisissa j\u00e4rjestelmiss\u00e4 <code>/</code>. Suuri osa Pythonin tehokkuudesta tulee sen kattavasta kirjastosta erilaisia kirjastoja. Yksi todella n\u00e4pp\u00e4r\u00e4 kirjasto nimenomaan t\u00e4h\u00e4n k\u00e4ytt\u00f6tarkoitukseen on pathlib, jonka dokumentaatioon kannattaa tutustua Python docsissa: pathlib \u2014 Object-oriented filesystem paths. Kirjasto on Pythoniin sis\u00e4\u00e4nrakennettu, joten sit\u00e4 ei tarvitse erikseen asentaa, mutta t\u00e4ytyy importoida ennen k\u00e4ytt\u00f6\u00e4.</p> <p>Tip</p> <p>Monissa Internetiss\u00e4 l\u00f6ytyviss\u00e4 esimerkeiss\u00e4 k\u00e4ytet\u00e4\u00e4n vanhempaa <code>os</code> ja <code>os.path</code> moduulia samaan teht\u00e4v\u00e4\u00e4n. Suosi mieluummin oliopohjaista pathlibi\u00e4.</p> <pre><code># Vaihtoehto 1: Importtaa koko pathlib ja k\u00e4yt\u00e4 pitk\u00e4\u00e4 polkua\nimport pathlib\nfile = pathlib.Path(\"test.txt\")\n\n# Vaihetoehto 2: Importtaa pelkk\u00e4 Path luokka\nfrom pathlib import Path\nfile = Path(\"test.txt\")\n</code></pre> <p>Huomaa, ett\u00e4 kyseess\u00e4 on tiedostopolku eik\u00e4 tiedosto itsess\u00e4\u00e4n. Kyseist\u00e4 tiedostoa ei ole pakko olla olemassa, jotta voit k\u00e4sitell\u00e4 sen polkua. Tiedoston voi kuitenkin luoda <code>Path</code>:n metodien avulla.</p> <pre><code># Luo tiedosto jos sit\u00e4 ei viel\u00e4 ole.\nfile.touch()\n\n# Tarkista, ett\u00e4 onhan tiedosto tiedosto\nfile.is_file()\n</code></pre> <p>Tiedostoon voi my\u00f6s kirjoittaa ja siit\u00e4 voi lukea.</p> <pre><code># Luo kirjoitettavaa sis\u00e4lt\u00f6\u00e4\ncontent = \"I will not buy this record, it is scratched!\"\n\n# Kirjoita\nfile.write_text(content, encoding=\"utf-8\")\n\n# Lue\nread_content = file.read_text(encoding=\"utf-8\")\n\n# Varmista, ett\u00e4 sis\u00e4lt\u00f6 on sama\nassert content == read_content     # Mik\u00e4 assert? (1)\n</code></pre> <ol> <li>Assert on varattu avainsana Pythonissa, ja sit\u00e4 voi k\u00e4ytt\u00e4\u00e4 totuuksien testaamiseen. Esimerkiksi <code>assert False</code> nostaa <code>AssertionErrorin</code>, mutta <code>assert True</code> ei.</li> </ol> <p>Tip</p> <p>T\u00e4m\u00e4n luvun lopussa on pari harjoitusta, joissa tiedostoja luetaan ja kirjoitetaan sis\u00e4\u00e4nrakennettua <code>open</code>-funktiota k\u00e4ytt\u00e4en. Kumpi on mielest\u00e4si helpompi tai nopeampi tapa? Voit kokeilla tehd\u00e4 samat teht\u00e4v\u00e4t <code>pathlib</code>:i\u00e4 k\u00e4ytt\u00e4en. Voit my\u00f6s hallita tiedostopolut <code>pathlib</code>:ll\u00e4, mutta kirjoittaa <code>open</code>:lla.</p>"},{"location":"muuttujatyypit/merkkijono/#unicode","title":"Unicode","text":"<p>Yll\u00e4 todettiin, ett\u00e4 merkkijono on sarja Unicode-koodipisteit\u00e4. Unicoden Consortiumin oma Quick Start Guide on tutustumisen arvoinen, mutta t\u00e4m\u00e4n kurssin puitteissa riitt\u00e4\u00e4 tiet\u00e4\u00e4, ett\u00e4 Unicode on merkist\u00f6, jossa jokaiseen merkkiin viittaa yksi kokonaisluku. Ihmiskunta k\u00e4ytt\u00e4\u00e4 laajaa merkist\u00f6\u00e4, johon kuuluu paljon muutakin kuin tyypilliset 7-bittiset <code>ASCII</code>-merkist\u00f6n sis\u00e4lt\u00e4m\u00e4t latinalaiset aakkoset.</p> <p></p> <p>Kuvio 1: ASCII-merkist\u00f6 taulukkona. (Public domain: l\u00e4hde.)</p> <p>Unicode jakaa vanhan ASCII-merkist\u00f6n kanssa ensimm\u00e4iset 127 merkki\u00e4 - joka siis kattaa perinteisen ASCII-merkist\u00f6n kokonaan eli merkit <code>00</code>-<code>7F</code> (bin\u00e4\u00e4rin\u00e4 <code>0000 0000</code>-<code>0111 1111</code>, desimaalina <code>0-127</code>). Aja alla oleva koodi ja tarkista, ett\u00e4 kirjain \"A\" viittaa oikeaan Unicode/ASCII-koodipisteeseen.</p> <pre><code>letter = \"A\"\ndec_letter = ord(letter)\nhex_letter = hex(dec_letter)\n\nprint(dec_letter)\nprint(hex_letter)\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Selvit\u00e4, mik\u00e4 on v\u00e4lily\u00f6nnin desimaaliarvo Unicodessa ja t\u00e4ten my\u00f6s ASCII:ssa. Ent\u00e4 rivinvaihdon?</p> <p>Aikoinaan kaikki muut merkit, kuten suomalaisista aakkosista tutut \u00e4\u00e4kk\u00f6set tai skandit, lis\u00e4ttiin erilaisilla koodauksilla. Internetiss\u00e4 HTML-standardin default oli HTML 4.0:aan asti <code>ISO-8859-1</code> eli <code>latin-1</code>. Voit tutustua siihen lyhyesti Wikipedia-sivulla \u00c4\u00e4kk\u00f6set.</p> <p>Unicodessa tilanne on ratkaistu siten, ett\u00e4 merkkiavaruutta on kasvatettu 8 bitist\u00e4 huomattavasti suuremmaksi. Unicode koostuu 17 eri planesta, joita ovat siis planet <code>0-16</code> eli heksadesimaalina <code>0-10</code>. Jokainen plane on 16-bittinen, eli sis\u00e4lt\u00e4\u00e4 maksimissaan<code>2 ** 16</code> eli <code>65536</code> merkki\u00e4.</p> Plane nimi Plane # Merkkiavaruuden alku ja loppu BMP 0 <code>0000</code>-<code>FFFF</code> (4 merkki\u00e4) SMP 1 <code>10000</code>-<code>1FFFF</code> (5 merkki\u00e4!) SIP 2 <code>20000</code>-<code>2FFFF</code> (5 merkki\u00e4!) jne. jne jne."},{"location":"muuttujatyypit/merkkijono/#puhelinluettelovertaus","title":"Puhelinluettelovertaus","text":"<p>Yll\u00e4 olevat heksadesimaalit ja planet saattavat h\u00e4mment\u00e4\u00e4, joten alla on t\u00e4ysin desimaaleina k\u00e4sitelty versio. Kuvittele kirjahylly, jossa on 17 kirjaa. Jokainen kirja on ik\u00e4\u00e4n kuin Unicoden puhelinluettelo, jossa jokainen rivi on numeroitu. Kukin kirja sis\u00e4lt\u00e4\u00e4 <code>65535</code> rivi\u00e4. Kullakin rivill\u00e4 lukee rivin (eli samalla merkin) j\u00e4rjestysnumero sek\u00e4 merkki itsess\u00e4\u00e4n.</p> Kirja Rivin # Merkki tai kuvaus 0 - BMP 0 <code>[NULL]</code> ... ... ... 0 - BMP 33 <code>!</code> 0 - BMP 34 <code>\"</code> ... ... ... 0 - BMP 65 <code>A</code> ... ... ... 0- BMP 65533 <code>\ufffd</code> 0 - BMP 65534 <code>[UNASSIGNED]</code> 0 - BMP 65535 <code>[UNASSIGNED]</code> 1 - SMP 65536 <code>\ud800\udc00</code> 1 - SMP 65537 <code>\ud800\udc01</code> 1 - SMP 65538 <code>\ud800\udc02</code> ... ... ... 1 - SMP 128512 <code>\ud83d\ude00</code> ... ... ... 1 - SMP 131071 <code>[UNASSIGNED]</code> 2 - SIP 131072 <code>[CJK UNIFIED IDEOGRAPH-20000]</code> 2 - SIP 131073 <code>[CJK UNIFIED IDEOGRAPH-20001]</code> ... ... ... 16 - PUA 1114111 <code>[PRIVATE]</code> <p>Jo ensimm\u00e4isess\u00e4 planessa (eli BMP, Basic Multilingual Plane) on kymmeni\u00e4 tuhansia merkkej\u00e4 ja jonkin verran tilaa uusille merkeille. Niit\u00e4 merkkej\u00e4, joita ei sinun n\u00e4pp\u00e4imist\u00f6t\u00e4si suorilta k\u00e4sin l\u00f6ydy, k\u00e4yt\u00e4t luonnollisesti kohtalaisen harvoin. Mik\u00e4li t\u00e4llainen p\u00e4\u00e4tyy Pythoniin sinun toimestasi, niin yleens\u00e4:</p> <ol> <li>luet sen tiedostosta</li> <li>liit\u00e4t sen (tarkoituksella tai vahingossa) Internet-sivustolta tai toisesta sovelluksesta</li> <li>kaivat merkin k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4si merkist\u00f6st\u00e4</li> </ol> <p>Huomaa, ett\u00e4 k\u00e4ytt\u00e4m\u00e4si fontin t\u00e4ytyy sis\u00e4lt\u00e4\u00e4 merkki, jotta sen voi piirt\u00e4\u00e4 ruudulle. Esimerkiksi yll\u00e4 olevassa puhelinluettelovertauksessa merkki numero <code>131072</code> on <code>the sound made by breathing in; oh!</code> (Unihan Database), ja sen visuaalinen ikoni l\u00f6ytyy ainakin Unicode Stanadard Version 15.1: CJK Unified Ideographs Extension B -PDF-tiedostosta.</p>"},{"location":"muuttujatyypit/merkkijono/#utf-8","title":"UTF-8","text":"<p>Urasi aikana tulee \u00e4\u00e4rimm\u00e4isen suurella todenn\u00e4k\u00f6isyydell\u00e4 vastaan my\u00f6s sellaisia tilanteita, ett\u00e4 saat k\u00e4siisi tiedoston tai bytearrayn, jonka pit\u00e4isi sis\u00e4lt\u00e4\u00e4 teksti\u00e4, mutta Python nostaa UnicodeDecodeErrorin. T\u00e4ll\u00f6in tiedosto on yleens\u00e4 enkoodattu esimerkiksi <code>latin-1</code>:ll\u00e4 ja sis\u00e4lt\u00e4\u00e4 jonkin extended ascii -merkin (<code>1xxx xxxx</code>) kuten <code>\u00e4</code>. Python olettaa vakiona, ett\u00e4 tiedostot ovat enkoodattu <code>utf-8</code>:lla (olettaen ett\u00e4 sinulle on tuore Linux, macOS tai Windows).</p> <pre><code># Luo muuttujat\nstring = \"T\u00e4m\u00e4\"           # Kokeile a-z, \u00e4 ja vaikka \ud83d\udc4d sis\u00e4lt\u00e4vi\u00e4 merkkijonoja\nencoder = \"windows-1252\"  # Kokeile eri arvoja kuten utf-8, latin-1, utf-16 windows-1252\ndecoder = \"windows-1252\"  # Kokeile, mit\u00e4 k\u00e4y, jos encoder ja decoder eiv\u00e4t t\u00e4sm\u00e4\u00e4\n\n# Koodaa\nencoded = string.encode(encoding=encoder)\nprint(\"UTF-8 encoded: \", as_utf8)\n\n# Pura koodaus\ndecoded = as_utf8.decode(encoding=decoder)\nprint(\"... and decoded: \", as_str)\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Kopioi yll\u00e4 oleva komento Jupyter Notebookiin tai <code>.py</code>-tiedostoon. Muokkaa string, encoder ja decoder muuttujien arvoja ja aja koodia uudestaan ja uudestaan. Tulet huomaamaan, ett\u00e4 UTF-8 on tuottaa merkist\u00e4 riippuen eri m\u00e4\u00e4r\u00e4n tavuja eli on variable length encoding. Kannattaa tutustua UTF-8:iin esimerkiksi Wikipediassa.</p> <p>Tip</p> <p>Unicode on siis merkist\u00f6, jossa kutakin merkki\u00e4 vastaa jokin kokonaisluku, joka usein esitet\u00e4\u00e4n muodossa <code>U+FFFF</code> tai <code>U+1FFFF</code> jos se kuuluu). Jos merkkijono materialisoidaan eli kirjoitetaan tiedostoon, ne pit\u00e4\u00e4 enkoodata siten, ett\u00e4 sen voi kirjoittaa tavuina. Eri enkoodauksia ovat muun muassa <code>latin-1</code>, <code>utf-8</code> ja <code>utf-16</code>. N\u00e4ist\u00e4 huomattavasti yleisin, useiden k\u00e4ytt\u00f6j\u00e4rjestelmien ja esimerkiksi HTML 5:n vakio, on <code>utf-8</code>.</p>"},{"location":"muuttujatyypit/merkkijono/#unicode-pythonissa","title":"Unicode Pythonissa","text":"<p>Pythonissa Unicode n\u00e4kyy siten, ett\u00e4 merkkijonot voivat sis\u00e4lt\u00e4\u00e4 k\u00e4yt\u00e4nn\u00f6ss\u00e4 mit\u00e4 tahansa Unicode-merkkej\u00e4.</p> <pre><code>b1 = \"b\"          # Merkin voi kirjoittaa ihan vain merkkin\u00e4\nb2 = \"\\u0062\"     # ... tai pienen u-kirjaimen avulla 4-merkkin\u00e4 code pointtina\nb3 = \"\\U00000062\" # ... tai ison U-kirjaimen avulla 8-merkkisen\u00e4 code pointtina\nprint(\"Letters are the same?: \", b1 == b2 == b3)\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Valitse mik\u00e4 tahansa symboli, kuten theta eli <code>\u0398</code> tai peukku yl\u00f6s hymil eli <code>\ud83d\udc4d</code>, ja k\u00e4y sy\u00f6tt\u00e4m\u00e4ss\u00e4 se FileFormat-sivuston Unicode Character Search-hakukentt\u00e4\u00e4n. Klikkaa Search, skrollaa alas ja seuraa sopivinta hakutulosta. Jos tulosta ei l\u00f6ydy, kokeile sy\u00f6tt\u00e4\u00e4 haku sanana, kuten <code>thumb</code>.</p>"},{"location":"muuttujatyypit/merkkijono/#harjoituksia","title":"Harjoituksia","text":""},{"location":"muuttujatyypit/merkkijono/#harjoittele-merkkijono-tiedostosta","title":"Harjoittele: Merkkijono tiedostosta","text":"<p>Alla on koodi, joka lukee test.txt-tiedostosta UTF-8-koodausta k\u00e4ytt\u00e4en sis\u00e4ll\u00f6n muuttujaan <code>content</code>. Kokeile koodia tiedostolla, jonka luot esimerkiksi <code>nano</code>:lla, Windowsin notepadilla tai Visual Studio Codella. Tiedoston tulee olla samassa kansiossa kuin mist\u00e4 koodi ajetaan; tiedostopolku on siis relatiivinen.</p> <pre><code># Vaihtoehto 1: Avaa tiedosto ja osoita TextIOWrapper:n instanssi muuttujaan\n#               f. Lue sis\u00e4lt\u00f6. Lopuksi sulje tiedosto\nf = open(\"test.txt\", \"r\", encoding=\"utf-8\")\ncontent = f.read()\nf.close()\n\n# Vaihtoehto 2: Avaa tietdosto with:ll\u00e4 eli context managerilla.\n#               Lue sis\u00e4lt\u00f6. Tiedostoa ei tarvitse itse sulkea.\nwith open(\"test.txt\") as f:\n        content = f.read()\n</code></pre> <p>Tip</p> <p>Huomaa, ett\u00e4 yll\u00e4 n\u00e4kyv\u00e4st\u00e4 Vaihtoehto 2:sta puuttuvat positionaalinen argumentti <code>\"r\"</code> ja asiasana-argumentti <code>encoding</code>. Vaihtoehdossa 1 k\u00e4ytetyt arvot ovat defaultit, joten ne voi j\u00e4tt\u00e4\u00e4 m\u00e4\u00e4ritt\u00e4m\u00e4tt\u00e4, mik\u00e4li haluaa tiivist\u00e4\u00e4 koodia.</p>"},{"location":"muuttujatyypit/merkkijono/#harjoittele-merkkijono-tiedostoon","title":"Harjoittele: Merkkijono tiedostoon","text":"<p>Tiedoston kirjoittaminen toimii hyvin samalla tavalla kuin lukeminen. Lukemisessa k\u00e4ytetyt vaihtoehdot yksi ja kaksi p\u00e4tev\u00e4t my\u00f6s t\u00e4ss\u00e4 siten, ett\u00e4 voit joko k\u00e4ytt\u00e4\u00e4 context manageria (<code>with</code>) tai huolehtia tiedoston sulkemisesta itse. L\u00e4ht\u00f6kohtaisesti <code>with</code> on suositeltu tapa.</p> <p>Huomaa, ett\u00e4 tiedoston avaamisen moodi on vaihdettu <code>r</code>:st\u00e4 <code>w</code>:een.</p> <pre><code>with open(\"test.txt\", \"w\") as file:\n    file.write(\"T\u00e4m\u00e4 merkkijono kirjoitetaan utf-8 enkoodattuna tiedostoon.\")\n</code></pre> <p>Lis\u00e4teht\u00e4v\u00e4</p> <p>L\u00f6ytyy my\u00f6s muita moodeja kuin <code>r</code> ja <code>w</code>. Kokeile tai selvit\u00e4, mit\u00e4 moodi <code>a</code> tekee. Selvit\u00e4 my\u00f6s, mit\u00e4 <code>b</code>-liite moodissa tekee: t\u00e4ll\u00f6in moodi on kokonaisuudessaan esimerkiksi <code>rb</code> tai <code>wb</code>.</p>"},{"location":"muuttujatyypit/merkkijono/#harjoittele-merkkijonon-unicode-analyysi","title":"Harjoittele: Merkkijonon Unicode-analyysi","text":"<p>Alla on koodi, joka k\u00e4y <code>message</code>-muuttujan merkit yksitellen l\u00e4pi (<code>for</code>-silmukassa) ja tulostaa Unicode-merkkiin liittyv\u00e4\u00e4 tietoa. Kokeile ajaa koodia ja lue se l\u00e4pi. Silmukat ja muut kontrollirakenteet opetetaan my\u00f6hemmin, mutta sen toiminnan voi lukiessaan p\u00e4\u00e4tell\u00e4 ihan lausemuodosta <code>for char in message</code> eli <code>per jokainen merkki merkkijonossa</code>.</p> <pre><code># Tulostettava viesti\nmessage = \"Hi! \ud83d\ude00\\U0001F08F\"\n\n# Taulukon otsikkorivi\nprint(\"Merkki | Escape-formaatti | Koodipiste | UTF-8-enkoodaus\")\n\n# Merkkijono on sarja, joten se voidaan loopata\nfor char in message:\n\n    # Unicode-koodipiste kokonaislukuna\n    code_point = ord(char)\n\n    # UTF-8 enkoodaus v\u00e4lily\u00f6nnill\u00e4 erotettuna heksana\n    char_utf8 = char.encode('utf-8')\n    char_utf8_hex = \" \".join([f\"{x:2X}\" for x in char_utf8])\n\n    # K\u00e4sittele plane 0 ja muut planet eri syntaksilla (u vs U)\n    if code_point &lt;= 0xFFFF:\n        char_esc_format = f\"\\\\u{code_point:04X}\"\n        code_hex = hex(code_point)\n    else:\n        char_esc_format = f\"\\\\U{code_point:08X}\"\n        code_hex = hex(code_point)\n\n    # Print the information\n    print(f\"{char:&lt;3}{char_esc_format:&gt;21}{code_hex:&gt;12}{char_utf8_hex:&gt;18}\")\n</code></pre> <p>Tuloste:</p> <pre><code>Merkki | Escape-formaatti | Koodipiste | UTF-8-enkoodaus\nH                 \\u0048        0x48                48\ni                 \\u0069        0x69                69\n!                 \\u0021        0x21                21\n                  \\u0020        0x20                20\n\ud83d\ude00            \\U0001F600     0x1f600       F0 9F 98 80\n\ud83c\udc8f             \\U0001F08F     0x1f08f       F0 9F 82 8F\n</code></pre>"},{"location":"muuttujatyypit/numerot/","title":"Numerot","text":"<p>Pythonin tyypillisimmin k\u00e4yt\u00f6ss\u00e4 olevat numeraaliset tietotyypit ovat kokonaisluku eli integer (<code>int</code>) sek\u00e4 desimaaliluku eli floating point number (<code>float</code>). Tarkemmin ottaen kyseess\u00e4 ei kuitenkaan ole desimaali- vaan liukuluku; t\u00e4st\u00e4 aiheesta on list\u00e4tietoa alla. Pythonissa on my\u00f6s kompleksiluku (<code>complex</code>), mutta se j\u00e4tet\u00e4\u00e4n t\u00e4ss\u00e4 materiaalissa k\u00e4sittelem\u00e4tt\u00e4. Vahvasti tyypitetyiss\u00e4 kieliss\u00e4, kuten C ja Java, on eri kokoisille luvuille omat muuttujatyyppins\u00e4. Esimerkiksi pieni\u00e4 lukuja varten, jotka mahtuvat v\u00e4lille <code>-128...127</code>, on oma muuttujatyyppint\u00e4 byte. 1, 2, 3 ja 4-tavuisia numeroita varten ovat erikseen byte, short, int ja long. Pythonissa kaikkia n\u00e4it\u00e4 varten k\u00e4ytet\u00e4\u00e4n samaa tyyppi\u00e4: <code>int</code>. My\u00f6s <code>float</code> aina aina float, eik\u00e4 eriksee 4- tai 8-tavuinen <code>float</code> tai <code>double</code>.</p>"},{"location":"muuttujatyypit/numerot/#numeroiden-luonti","title":"Numeroiden luonti","text":"<p>Alla olevassa snippetiss\u00e4 luodaan kokonaisluku ja desimaaliluku ja tulostetaan niiden arvot aiemmin opittua F-stringi\u00e4 hy\u00f6dynt\u00e4en:</p> <pre><code>n_apples = 1024\ntotal_weight = 201.54\nprint(f\"We have {n_apples} apples and they weight {total_weight} kilos.\")\n</code></pre> <p>Suuret luvut voi kirjoittaa my\u00f6s alaviivan tai tieteellisen notaation avulla. Huomaa, ett\u00e4 Python ei kuitenkaan parsi alaviivaa sen tarkemmin. T\u00e4st\u00e4 esimerkki alla:</p> <pre><code>million = 1_000_000  # int\nbillion = 1e9        # float\n\nmillion = 1_00_0000  # Python ei valita t\u00e4st\u00e4\n</code></pre>"},{"location":"muuttujatyypit/numerot/#numerot-ja-operaatiot","title":"Numerot ja operaatiot","text":"<p>Huomaa, ett\u00e4 merkkijonot-luvussa t\u00e4m\u00e4 otsikko oli viel\u00e4 \"operaattorit\". Numeroiden kohdalla t\u00e4m\u00e4 on laajennettu sis\u00e4lt\u00e4m\u00e4\u00e4n operaattoreiden (<code>+</code>, <code>%</code>, <code>and</code>, ...) lis\u00e4ksi my\u00f6s muita operaatioita, kuten Pythonin sis\u00e4\u00e4nrakennettujen funktioiden k\u00e4yt\u00f6n.</p>"},{"location":"muuttujatyypit/numerot/#aritmaattiset","title":"Aritmaattiset","text":"Operaatio Selite <code>x + y</code> x plus y (summa) <code>x - y</code> x miinus y (erotus) <code>x * y</code> x kertaa y (tulo) <code>x / y</code> x jaettuna y:ll\u00e4 (osam\u00e4\u00e4r\u00e4) <code>x // y</code> Osam\u00e4\u00e4r\u00e4 py\u00f6ristettyn\u00e4 alas kokonaisluvuksi. <code>x % y</code> Jakoj\u00e4\u00e4nn\u00f6s <code>-x</code> x:n negaatio <code>abs(x)</code> x:n absoluuttinen arvo <code>int(x)</code> x konvertoituna kokonaisluvuksi <code>float(x)</code> x konvertoituna desimaaliluvuksi <code>divmod(x, y)</code> Tuple-muodossa seuraavat: <code>(x // y, x % y)</code> <code>x ** y</code> x potenssiin y <code>round(x[, n])</code> Py\u00f6rist\u00e4 n desimaalin tarkkuudella. Vakio 0. <p>Huomaa, ett\u00e4 Python sallii matemaattiset operaatiot eri numeeristen tyyppien v\u00e4lill\u00e4. Voit siis esimerkiksi v\u00e4hent\u00e4\u00e4 kokonaisluvusta desimaaliluvun. Operaatiosta palautuvan luvun tietotyyppi riippuu operaatiosta. Esimerkiksi jakolasku palauttaa aina <code>float</code>:n, vaikka luku olisi jaollinen.</p>"},{"location":"muuttujatyypit/numerot/#vertailu","title":"Vertailu","text":"Operaattori Esimerkki == <code>3 == 2 + 1</code> != <code>3 != 4</code> &gt;, &lt;, &gt;=, &lt;= <code>2.51 &gt; 2</code>"},{"location":"muuttujatyypit/numerot/#loogiset","title":"Loogiset","text":"Operaattori Esimerkki and <code>2 and 3</code> or <code>0 or 42</code> not <code>not 0</code> <p>Teht\u00e4v\u00e4</p> <p>Kokeile kaikki yll\u00e4 olevat operaattorit l\u00e4pi. Selvit\u00e4, mit\u00e4 ne tekev\u00e4t. Loogiset operaattorit, saattavat tuntua lukujen kanssa ep\u00e4loogisilta. Ota selv\u00e4\u00e4!</p>"},{"location":"muuttujatyypit/numerot/#bitti","title":"Bitti","text":"<p>Kokeile ajaa alla olevan taulukon esimerkit Pythonissa. Selvit\u00e4, mit\u00e4 tapahtuu, jos muutat arvoja. Jos et onnistu p\u00e4\u00e4ttelem\u00e4\u00e4n operaattoreiden toiminnallisuutta, lue aiheesta lis\u00e4\u00e4 esimerkiksi Wikipedia: Bittioperaatio.</p> Operaattori Termi tai selite Esimerkki &amp; AND <code>0b1111 &amp; 0b1111</code> | OR <code>0b0000 OR 0b1111</code> ^ XOR <code>0b1010 ^ 0b0101</code> ~ NOT <code>~ 0b0111</code> &lt;&lt; Siirto vasemmalle <code>0b0001 &lt;&lt; 1</code> &gt;&gt; Siirto oikealle <code>0b0010 &gt;&gt; 1</code> <p>Tip</p> <p>N\u00e4ist\u00e4 on esimerkkej\u00e4 alempana t\u00e4ss\u00e4 samassa luvussa.</p>"},{"location":"muuttujatyypit/numerot/#numeroiden-muotoilu","title":"Numeroiden muotoilu","text":"<p>Numeroita voi muotoilla F-stringin avulla. Kokeile ajaa alla oleva koodi, joka tulostaa edellisest\u00e4 luvusta tutut Unicode plane -alueet.</p> <pre><code>for section in range(17):\n    start = (2 ** 16 * section)\n    end = start + 2 ** 16 - 1\n\n    print(f\"{section:&lt;2}{start:&gt;10}{end:&gt;10}\")\n</code></pre> <p>Aiemmin tutun \"padding and aligning\"-operaation lis\u00e4ksi numeroita voi muotoilla huomattavan monilla muilla tavoin. Alla joitakin valittuja esimerkkej\u00e4:</p> <code>{muuttuja:muotoiluohjeet}</code> Tuloste Selite <code>{10:X}</code> <code>A</code> Esit\u00e4 luku heksadesimaalina (isot kirjaimet) <code>{10:x}</code> <code>a</code> Esit\u00e4 luku heksadesimaalina (pienet kirjaimet) <code>{10:#X}</code> <code>0xa</code> Esit\u00e4 luku heksadesimaalina <code>0x</code> etuliitteen kera.) <code>{10:2x}</code> <code>\" a\"</code> Esit\u00e4 luku v\u00e4hint\u00e4\u00e4n kahden merkin mittaisena. <code>{10:0x2}</code> <code>0a</code> ... ja tyhj\u00e4t paikat t\u00e4ytettyn\u00e4 nollilla. <code>{1234567:,}</code> <code>1,234,567</code> Tulosta tuhansien v\u00e4lein pilkut. <code>{pi:.2f}</code> <code>3.14</code> Tulosta 2 desimaalin tarkkuudella. <code>{42:.2f}</code> <code>42.00</code> ... joka p\u00e4tee my\u00f6s kokonaislukuihin. <p>Tip</p> <p>Aiemmin mainitut vanhemmat muotoilutavat (format ja %-syntaksi) j\u00e4tet\u00e4\u00e4n k\u00e4sittelem\u00e4tt\u00e4 t\u00e4ss\u00e4 luvussa, mutta mik\u00e4li aihe kiinnostaa, tutustu vapaasti numeroiden tulostamiseen <code>\"\".format()</code> avulla. Toimiiko muoto <code>\"{0:.2f}\".format(42.00001)\"</code> ?</p> <p>Otetaan heksadesimaalimuunnos hy\u00f6tyk\u00e4ytt\u00f6\u00f6n, ja muokataan yll\u00e4 olevaa Unicode plane -tulostinta. Alla sama koodi muokattuna siten, ett\u00e4 se tulostaa numerot heksadesimaaleina. Luku vie aina v\u00e4hint\u00e4\u00e4n 6 merkki\u00e4; t\u00e4ytteen\u00e4 toimii v\u00e4lily\u00f6ntimerkki:</p> <pre><code>for section in range(17):\n    start = (2 ** 16 * section)\n    end = start + 2 ** 16 - 1\n\n    print(f\"{section:&lt;2} {start:6x} {end:6x}\")\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>P\u00e4\u00e4ttele yll\u00e4 olevien avulla, kuinka k\u00e4\u00e4nn\u00e4t luvun bin\u00e4\u00e4riksi ja tulostat 8 merkki\u00e4 pitk\u00e4n\u00e4. Luvusta 127 pit\u00e4isi tulostua <code>01111111</code>, mukaan lukien ensimm\u00e4inen nolla. Vihje: <code>b</code>.</p>"},{"location":"muuttujatyypit/numerot/#numeroiden-metodit","title":"Numeroiden metodit","text":"<p>Toisin kuin merkkijonot, joihin liittyy useita hy\u00f6dyllisi\u00e4 metodeja kuten <code>.lower()</code>, numerot ovat merkillisen tylsi\u00e4. Kokeile t\u00e4t\u00e4 itse esimerkiksi Jupyter Notebookissa tai Visual Studio Codessa:</p> <pre><code># Luo muuttuja\nnum = 5\nnum.     # paina tabia (1)\n\n# Kokeile my\u00f6s floattia\nother = 3.14\nother.   # paina tabia\n\n# Kokeile my\u00f6s class methodeja eli ei olion vaan itse luokan funktioita\nint().   # paina tabia\nfloat(). # paina tabia\n</code></pre> <ol> <li>Tabulaattorin, eli Q-n\u00e4pp\u00e4imen vasemmalla puolella olevan n\u00e4pp\u00e4imen, klikkaaminen k\u00e4ynnist\u00e4\u00e4 IDE:n koodin t\u00e4ydennyksen (code completion), joka listaa kaikki kyseisen olion metodit (eli olion omat funktiot) ja ominaisuudet (propertyt), jotka eiv\u00e4t ala alaviivalla eli eiv\u00e4t ole yksityisi\u00e4. IDE:st\u00e4 riipppuen mukaan saattaa tulostua ties mit\u00e4 muuta, kuten tiedostopolkuja.</li> </ol>"},{"location":"muuttujatyypit/numerot/#moduuli-datetime","title":"Moduuli: datetime","text":"<p>Sinulla on nyt hallussa merkkijonojen ja numeroiden perusteet, joten voit alkaa k\u00e4sitell\u00e4 p\u00e4iv\u00e4m\u00e4\u00e4ri\u00e4 ja aikoja. P\u00e4iv\u00e4m\u00e4\u00e4ri\u00e4 varten l\u00f6ytyy <code>datetime.date</code> ja aikoja varten <code>datetime.datetime</code>. Alla pari peruskomentoa, joilla p\u00e4\u00e4set alkuun, mutta Internet on t\u00e4ynn\u00e4 esimerkkej\u00e4 aiheesta.</p> <p>Huomaa, ett\u00e4 p\u00e4iv\u00e4m\u00e4\u00e4ri\u00e4 ja aikoja voi tulostaa ANSI C -standardin mukaisilla koodeilla, joissa esimerkiksi <code>Y</code> edustaa nelinumeroista vuotta. Koko lista l\u00f6ytyy Pythonin dokumentaatiosta.</p> <pre><code>import datetime\n\n# Today hakee k\u00e4ytt\u00f6j\u00e4rjestelm\u00e4n kellolta p\u00e4iv\u00e4m\u00e4\u00e4r\u00e4n\ntoday = datetime.date.today()\n\n# Vaihtoehto 1: muotoile merkkijono strftime funktiolla\ntoday_str = today.strftime(\"%Y:%m:%d - %A\")\nprint(today_str)\n\n# Vaihtoehto 2: muotoile F-stringin muotoiluosassa\nprint(f\"{today:%Y:%m:%d - %A}\")\n\n# P.S.\n# Muista, ett\u00e4 voit my\u00f6s n\u00e4in voi tehd\u00e4:\ndt_format = \"%Y:%m:%d - %A\"\nprint(f\"{today:{dt_format}}\")\n</code></pre> <p>Kellonaikoja koskeva matematiikka on inha koodata k\u00e4sin. Jos haluat lis\u00e4t\u00e4 aikaan <code>13:37</code> esimerkiksi <code>25</code> minuuttia, niin sinun pit\u00e4\u00e4 osata ottaa huomioon, ett\u00e4 yksi tunti on 60 minuuttia. T\u00e4t\u00e4 varten Pythonin datetime-moduuli tarjoaa onneksi timedeltan.</p> <pre><code>import datetime\n\nnow = datetime.datetime.now()\ndelta = datetime.timedelta(hours=1, minutes=15)\n\n# Suorita laskuoperaatio\npast = now - delta\n\nprint(past.isoformat())\n</code></pre> <p>Warning</p> <p>Kellonaikojen k\u00e4sittely on huomattavan vaikeaa, varsinkin jos mukaan sotketaan eri aikavy\u00f6hykkeet ja kes\u00e4ajat tai kaukana historiassa olevat Juliaaniset sek\u00e4 Gregoriaaniset kalenterit. Huomaa, ett\u00e4 py\u00f6r\u00e4\u00e4 ei v\u00e4ltt\u00e4m\u00e4tt\u00e4 kannata keksi\u00e4 uudestaan. Datetimen ymp\u00e4rille on rakennettu kirjastoja, kuten Arrow, jotka k\u00e4sittelev\u00e4t aikoja oletetusti aikavy\u00f6hykkeeseen sidottuna.</p>"},{"location":"muuttujatyypit/numerot/#kymmenjarjestelmasta-poikkeavat-luvut","title":"Kymmenj\u00e4rjestelm\u00e4st\u00e4 poikkeavat luvut","text":"<p>Bittien k\u00e4sittely Pythonissa ei ehk\u00e4 ole aivan jokap\u00e4iv\u00e4ist\u00e4 ty\u00f6t\u00e4, mutta perusteet on silti hyv\u00e4 tiet\u00e4\u00e4. Bittien, heksadesimaalin ja desimaalij\u00e4rjestelmien perusteiden ymm\u00e4rrys kuuluu tietojenk\u00e4sittelytieteiden perusteisiin, joten t\u00e4m\u00e4 on viimeist\u00e4\u00e4n hyv\u00e4 vaihe ottaa aihe haltuun.</p> <pre><code># Literaali 0b-etuliitteell\u00e4\n&gt;&gt;&gt; 0b111\n7\n\n# K\u00e4\u00e4nn\u00e4 kokonaisluku bin\u00e4\u00e4rin merkkijonopresentaatioksi\n&gt;&gt;&gt; bin(7)\n'0b111'\n\n# ...tai tee sama F-stringill\u00e4\n&gt;&gt;&gt; f\"{7:08b}\"\n'00000111'\n</code></pre> <p>Jos sinulla on merkkijono, joka edustaa bin\u00e4\u00e4ri\u00e4, k\u00e4\u00e4nn\u00e4 se numeroksi sis\u00e4\u00e4nrakennettua <code>int()</code>-konstruktoria k\u00e4ytt\u00e4en.</p> <pre><code># Bin\u00e4\u00e4ri\u00e4 esitt\u00e4v\u00e4 merkkijono numeroksi\n&gt;&gt;&gt; int(\"00000111\", base=2)\n7\n\n# Desimaalilukua ...\n&gt;&gt;&gt; int(\"101\")\n101\n\n# Heksadesimaalia ...\n&gt;&gt;&gt; int(\"65\", base=16)\n101\n</code></pre>"},{"location":"muuttujatyypit/numerot/#floatin-ongelmat","title":"Floatin ongelmat","text":"<p>On houkuttelevaa, ja usein k\u00e4yt\u00e4nn\u00f6llist\u00e4, kutsua float-lukuja suomeksi desimaaliluvuiksi. On t\u00e4rke\u00e4\u00e4 muistaa, ett\u00e4 kyseess\u00e4 on kuitenkin liukuluku, ja ero on ajoittain merkitt\u00e4v\u00e4. Liukulukuihin liittyv\u00e4 matematiikka on t\u00e4m\u00e4n kurssin skoopin ulkopuolella, mutta sen vaikutukset k\u00e4yt\u00e4nn\u00f6n ohjelmoinnissa on hyv\u00e4 tuntea. Float-luku k\u00e4\u00e4ntyy suomeksi liukuluvuksi ja kyseess\u00e4 on aina bin\u00e4\u00e4rimuotona tallennettu luku, joka esitet\u00e4\u00e4n k\u00e4ytt\u00e4j\u00e4lle py\u00f6ristetyss\u00e4 desimaalimuodossa. Siksi yll\u00e4 Desimaalij\u00e4rjestelm\u00e4ss\u00e4 meid\u00e4n kantaluku on 10, joten jos lis\u00e4\u00e4t mihin tahansa lukuun nollan per\u00e4\u00e4n, kerrot sen kymmenell\u00e4. Bin\u00e4\u00e4riss\u00e4 kertoisit luvun kahdella. Mik\u00e4li poistat nollan, jaat sen kymmenell\u00e4. Bin\u00e4\u00e4riss\u00e4 jakaisit sen kahdella. Mik\u00e4li luvussa on desimaalierotin (suomessa pilkku, amerikassa piste), erottimen vasemmalla puolella on kokonaisluku, oikealle puolella sen desimaaliosa.</p> <p>Mik\u00e4li desimaaliosan yritt\u00e4isi sanallistaa desimaali- ja bin\u00e4\u00e4rilukujen osalta, sen voisi tehd\u00e4 n\u00e4in:</p> <pre><code># Kantaluku 10\n0.1   = yksi kymmenesosa\n0.01  = yksi sadasosa\n0.001 = yksi tuhannesosa\n\n# Kantaluku 2\n0.1   = puolet\n0.01  = nelj\u00e4sosa\n0.001 = kahdeksasosa\n</code></pre> <p>Koska tietokone tallentaa luvun bin\u00e4\u00e4rin\u00e4, siihen kohdistuvat bin\u00e4\u00e4rilukuj\u00e4rjestelm\u00e4n rajoitteet. Huomaa, ett\u00e4 murtoluku <code>yksi kolmasosa</code> on mahdoton esitt\u00e4\u00e4 desimaalij\u00e4rjestelm\u00e4ss\u00e4 desimaalilukuna t\u00e4ydess\u00e4 tarkkuudessaan. Se on p\u00e4\u00e4ttym\u00e4t\u00f6n <code>0.33333...</code>. Kantaluvun kolme j\u00e4rjestelm\u00e4ss\u00e4 tuo luku olisi yksinkertaisesti <code>0.1</code>. Kuinka t\u00e4m\u00e4 sitten n\u00e4kyy k\u00e4yt\u00e4nn\u00f6ss\u00e4 bin\u00e4\u00e4rij\u00e4rjestelm\u00e4n lukujen kanssa? Se n\u00e4kyy py\u00f6ristysvirhein\u00e4:</p> <pre><code>&gt;&gt;&gt; 1/10 + 2/10 == 3/10\nFalse\n\n&gt;&gt;&gt; 1/10 + 2/10\n0.30000000000000004\n\n&gt;&gt;&gt; print(f\"{3/10:.16f}\")\n0.3000000000000000\n\n&gt;&gt;&gt; print(f\"{3/10:.17f}\")\n0.29999999999999999\n\n&gt;&gt;&gt; round(2.5)\n3\n\n&gt;&gt;&gt; num = 0.1\n&gt;&gt;&gt; num.as_integer_ratio()\n(3602879701896397, 36028797018963968)\n# Pythonin n\u00e4k\u00f6kulmasta 0.1 on suunnilleen sama kuin\n# kokonaislukujen 3_602_879_701_896_397 ja 2**55 suhde\n</code></pre> <p>Jos luot murtolukujen avulla liukulukuja miss\u00e4 tahansa ohjelmointikieless\u00e4, noudata \u00e4\u00e4rimm\u00e4ist\u00e4 varovaisuutta! Suorita py\u00f6ristysoperaatio aina vasta viimeisen\u00e4, ja mielell\u00e4\u00e4n riitt\u00e4v\u00e4ll\u00e4 tarkkuudella, kuten rahan kohdalla senttein\u00e4. Mik\u00e4li tarvitset tieteellisen laskennan tarkkuutta, k\u00e4yt\u00e4 avuksi kirjastoja kuten Pythonin built-in kirjastot <code>decimal</code> tai <code>franctions</code>.</p>"},{"location":"muuttujatyypit/numerot/#harjoituksia","title":"Harjoituksia","text":""},{"location":"muuttujatyypit/numerot/#harjoittele-nykyhetki-unix-ajassa","title":"Harjoittele: Nykyhetki Unix-ajassa","text":"<p>Selvit\u00e4, paljon jokin valitsemasi kellonaika on Unix-ajassa. Unix-ajalla tarkoitetaan sekunteja (tai joissakin tapauksissa milli-, mikro- tai nanosekunteja) 1970-luvun alusta alkaen. Luku voi olla my\u00f6s negatiivinen. Voit unohtaa mahdolliset aikavy\u00f6hykkeiden tuomat ongelmat t\u00e4ss\u00e4 harjoitteessa:</p> <pre><code>import datetime\n\n# Selvit\u00e4, mit\u00e4 argumentteja datetime() kaipaa\nevent_time = datetime.datetime()\n\n# Selvit\u00e4, mit\u00e4 t\u00e4m\u00e4 palauttaa\nevent_time.timestamp()\n</code></pre>"},{"location":"muuttujatyypit/numerot/#harjoittele-etsi-edellinen-maanantai","title":"Harjoittele: Etsi edellinen maanantai","text":"<p>Kirjoita skripti, joka tulostaa, kuinka monta p\u00e4iv\u00e4\u00e4 sitten oli edellinen maanantai, ja mik\u00e4 kyseinen p\u00e4iv\u00e4 on kalenterissa (ISO 8601 formaatissa). Tulostuvan lauseen pit\u00e4isi olla (<code>\"Last Monday was # days ago: YYYY-MM-DD\"</code>). Jos osaat, tee koodiin muutos, joka tulostaa <code>\"Today is Monday, you silly!\"</code>, jos t\u00e4n\u00e4\u00e4n on maanantai.</p> <pre><code>import datetime\n\n# Aloita t\u00e4st\u00e4\ntoday = datetime.date.today()\n</code></pre> Vihje <p>Vihje: <code>weekday()</code> tai <code>%w</code>.</p>"},{"location":"muuttujatyypit/numerot/#harjoittele-kommentoi-ip-osoitefunktiot","title":"Harjoittele: Kommentoi IP-osoitefunktiot","text":"<p>Tutustu alla oleviin funktioihin. Kopioi koodi omaan Jupyter Notebookiin tai <code>.py</code>-tiedostoon ja kommentoi koodirivit parhaasi mukaan. Kaksi vaikeinta rivi\u00e4, joissa k\u00e4sitell\u00e4\u00e4n listoja, on kommentoitu jo valmiiksi. Yrit\u00e4 selvitt\u00e4\u00e4, mit\u00e4 muut rivit tekev\u00e4t: etenkin rivit, joissa tapahtuu bittioperaatiot <code>&lt;&lt;</code> ja <code>&amp;</code> ja <code>&gt;&gt;</code>. Silmukkarakenne <code>for</code> k\u00e4yd\u00e4\u00e4n l\u00e4pi my\u00f6hemm\u00e4ss\u00e4 luvussa, joten voi olla, ett\u00e4 osa koodista j\u00e4\u00e4 h\u00e4m\u00e4r\u00e4n peittoon. Yrit\u00e4 kuitenkin!</p> <p>Vinkki: <code>enumerate</code> numeroi silmukan iteraatiot, eli <code>index</code> saa ensimm\u00e4isell\u00e4 kerralla arvon <code>0</code>, viimeisell\u00e4 arvon <code>4</code>.</p> <pre><code>def ip_to_integer(ip_address:str, verbose=False) -&gt; int:\n    \"\"\"Convert IP address into an integer.\n\n    Example:\n    &gt;&gt;&gt; ip_to_integer(\"1.0.0.0\")\n    16_777_216\n    \"\"\"\n\n    # Convert to list \"1.2.3.4\" =&gt; [1, 2, 3, 4]\n    ip_parts = [int(x) for x in ip_address.split(\".\")]\n    assert len(ip_parts) == 4, \"IP must be in format x.x.x.x\"\n    total = 0\n\n    for index, ip_part in enumerate(ip_parts[::-1]):\n        ip_shifted = ip_part &lt;&lt; (8 * index)\n        total = total + ip_shifted\n        if verbose:\n            print(\n                f\"[INFO] {index+1}th from right ({ip}) \"\n                f\"is in bitshifted binary: {ip_shifted:32b}\"\n            )\n\n    return total\n\n\ndef integer_to_ip(ip_integer: int) -&gt; str:\n    \"\"\"Convert integer into an IP address\n\n    Example:\n    &gt;&gt;&gt; integer_to_ip(16_777_216)\n    \"1.0.0.0\"\n    \"\"\"\n\n    assert 0 &lt;= ip_integer &lt;= 2 ** 32 - 1, \"Integer should be in range 0-4_294_967_295\"\n\n    ip_parts = []\n    for _ in range(4):\n        ip_part = ip_integer &amp; 0b11111111\n\n        # Add this part into the list ip_parts\n        ip_parts.append(str(ip_part))\n\n        ip_integer = ip_integer &gt;&gt; 8\n\n    # Join parts with dot as separator, e.g. [4,3,2,1] -&gt; \"1.2.3.4\"\n    ip_address = \".\".join(ip_parts[::-1])\n\n    return ip_address\n</code></pre> <p>Funktioita voi k\u00e4ytt\u00e4\u00e4 nyt k\u00e4\u00e4nt\u00e4m\u00e4\u00e4n IP-osoitteita ja aliverkon peitteit\u00e4 kokonaisluvuiksi, ja n\u00e4iden v\u00e4lill\u00e4 voi suorittaa bittioperaatioita. T\u00e4ten voimme tarkistaa, mik\u00e4 on verkon osoite, jos tied\u00e4mme aliverkon peitteen ja IP-osoitteen:</p> <pre><code>host = ip_to_integer(\"192.168.131.17\")\nmask = ip_to_integer(\"255.255.128.0\")\n\nnetwork_address = integer_to_ip(host &amp; mask)\nprint(network_address)\n# Kokeile, mit\u00e4 t\u00e4m\u00e4 tulostaa!\n</code></pre> <p>Huomaathan, ett\u00e4 esimerkki on \u00e4\u00e4rimm\u00e4isen naiivi. Se sallii ep\u00e4kelpoja aliverkon peitteit\u00e4 (esim. <code>255.128.255.0</code>). Pythonin <code>ipaddress</code>-kirjasto hoitaa saman teht\u00e4v\u00e4n v\u00e4hemm\u00e4n naiivisti ja k\u00e4ytt\u00e4\u00e4 olio-ohjelmoinnin keinoja. Kirjaston dokumentaatio l\u00f6ytyy Python Docs: ipaddress \u2014 IPv4/IPv6 manipulation library.</p> <p>Teht\u00e4v\u00e4</p> <p>Yrit\u00e4 kirjoittaa muutama rivi koodia, jotka varmistavat, ett\u00e4 verkon peite (eli mask) kelpaa oikeasti peitteeksi. Sovitaan, ett\u00e4 peitteen pit\u00e4\u00e4 sis\u00e4lt\u00e4\u00e4 <code>8-29</code> ykk\u00f6st\u00e4 ja loput nollia eli sallitaan CIDR:t <code>/8 - /29</code>. Jos CIDR ei ole tuttu k\u00e4site, k\u00e4v\u00e4ise esimerkiksi Wikipedia: Classless Inter-Domain Routing. Vasemmalta alkavien ykk\u00f6sten v\u00e4liss\u00e4 ei saa siis olla yht\u00e4\u00e4n nollaa, mik\u00e4 tarkoittaa ett\u00e4 <code>255.0.255.0</code> maskin pit\u00e4isi nostaa AssertionError! K\u00e4yt\u00e4 t\u00e4h\u00e4n <code>assert something_that_should_be_true</code> muotoa, kuten yll\u00e4 olevissa esimerkeiss\u00e4.</p>"},{"location":"muuttujatyypit/sanakirja/","title":"Sanakirja (dict)","text":"<p>Sanakirja, englanniksi <code>dictionary</code> ja Pythonissa lyhyesti <code>dict</code>, muistuttaa rakenteeltaan fyysisen maailman sanakirjaa. Tietojenk\u00e4sittelyss\u00e4 t\u00e4m\u00e4n termin kattok\u00e4site on hakurakenne (associative array) ja monista kielist\u00e4 l\u00f6ytyy jokin toteutus hajautustaulusta (hash map). Pythonissa se on dictionary. Aivan kuten paperinen sanakirja, my\u00f6s Pythonin sanakirjan jokainen entiteetti sis\u00e4lt\u00e4\u00e4 kaksi entiteetti\u00e4: avaimen ja arvon.</p>"},{"location":"muuttujatyypit/sanakirja/#sanakirjan-luonti","title":"Sanakirjan luonti","text":"<p>Sanakirja m\u00e4\u00e4ritell\u00e4\u00e4n aaltosulkeisiin aivan kuten joukko, mutta sen sis\u00e4lle tulee pilkulla erotettuna entiteettej\u00e4, jotka koostuvat puolipisteell\u00e4 erotellusta avaimesta ja arvosta.</p> <pre><code>&gt;&gt;&gt; {\"avain\": \"arvo\"}\n{'avain': 'arvo'}\n\n&gt;&gt;&gt; dict(avain=\"arvo\")\n{'avain': 'arvo'}\n\n&gt;&gt;&gt; dict([(1, 2), (3, 4)])\n {1: 2, 3: 4}\n</code></pre> <p>Hieman pidempi sanakirja on seuraava, joka sis\u00e4lt\u00e4\u00e4 Jukka Korpelan Pienehk\u00f6n sivistyssanakirjan ensimm\u00e4iset kolme sanaa (lyhennettyjen) selitteiden kanssa.</p> <pre><code>dictionary = {\n    \"\u00e0\": \"kukin, kappaleelta; vaihteluv\u00e4lin ilmaisemiseen\",\n    \"a cappella\": \"moni\u00e4\u00e4nisesti ilman s\u00e4est\u00e4vi\u00e4 soittimia esitett\u00e4v\u00e4; n\u00e4in esitetty laulu tms.\",\n    \"\u00e0 la\": \"jonkun tai jonkin mukaan, tapaan\"\n}\n</code></pre> <p>Sanakirjan luomisessa voi helpottaa Pythonin zip funktio, joka laittaa kaksi (tai enemm\u00e4n) iteroitavaa muuttujaa yhteen vetoketjun lailla. Kokeile ajaa seuraava koodi esimerkiksi Jupyter Notebookissa:</p> <pre><code>keys = [\"jack\", \"lisa\", \"elisa\"]\nvalues = [\n    [\"spam\", \"pineapple\"],\n    [\"egg\", \"ham\", \"spam\"],\n    [\"spam\", \"double spam\"]\n]\n\nfavorite_foods = dict(zip(keys, values))\nprint(favorite_foods)\n</code></pre> <p>Sanakirjan avaimen on oltava h\u00e4sh\u00e4tt\u00e4viss\u00e4 eli ajettavissa onnistuneesti Pythonin hash funktion l\u00e4pi. Muista: List, Set, Dictionary eli LSD. Mik\u00e4li kokeilet ajaa koodin <code>hash([1, 2, 3])</code>, Python nostaa varoituksen. T\u00e4m\u00e4 tarkoittaa, ett\u00e4 sanakirjaa ei voi my\u00f6sk\u00e4\u00e4n k\u00e4ytt\u00e4\u00e4 sanakirjan avaimena \u2013 ja on vaikea keksi\u00e4 miksi joku haluaisikaan. Sanakirja voi kuitenkin olla hyvin sanakirjan avaimen takana oleva arvo! N\u00e4in syntyy sis\u00e4ikk\u00e4inen rakenne, joka on REST API:ien maailmasta tutun JSON:n kaltainen. Alla rankasti lyhennetty pseudoesimerkki sanakirjasta, joka on muotoiltu Databricks Clusters API:n palauttamasta JSON:sta.</p> <pre><code>response = {\n    \"clusters\":\n      [\n          {\n              \"cluster_name\": \"my-cluster\",\n              \"spark_version\": \"8.2.x-scala2.12\",\n              \"aws_attributes\": {\n                  \"zone_id\": \"us-west-2c\"\n              },\n              \"num_workers\": 30,\n              \"node_type_id\": \"i3.xlarge\",\n              \"state\": \"TERMINATED\",\n              \"start_time\": 1618263108824,\n              \"terminated_time\": 1619746525713,\n              \"termination_reason\": {\n                  \"code\": \"INACTIVITY\"\n              }\n          }\n      ],\n      # [...], second cluster here\n      # [...], third cluster here\n}\n</code></pre> <p>Warning</p> <p>Muistathan, ett\u00e4 jokaisen avaimen tulee olla uniikki (hajautusarvoltaan).</p>"},{"location":"muuttujatyypit/sanakirja/#sanakirjan-kaytto","title":"Sanakirjan k\u00e4ytt\u00f6","text":""},{"location":"muuttujatyypit/sanakirja/#arvojen-lisaaminen","title":"Arvojen lis\u00e4\u00e4minen","text":"<p>Sanakirjaan voi lis\u00e4t\u00e4 sijoittaa avaimia asettamalla niille arvon.</p> <pre><code>alice = {\"name\": \"Alice\", \"age\": 42}\nalice[\"pet\"] = \"parrot\"\n</code></pre> <p>Huomaa, ett\u00e4 Python ei varoita, jos avain on jo olemassa:</p> <pre><code>alice[\"name\"] = \"Alice Smith\"\n</code></pre>"},{"location":"muuttujatyypit/sanakirja/#arvojen-noutaminen","title":"Arvojen noutaminen","text":"<p>Huomaa, ett\u00e4 sanakirja ei ole sekvenssi. Et voi siis viitata niihin indeksinumerolla muotoa <code>alice[0]</code>.</p> <pre><code>&gt;&gt;&gt; alice = {\"name\": \"Alice\", \"age\": 42}\n&gt;&gt;&gt; alice[\"name\"]\n'Alice'\n\n# Mik\u00e4li yrit\u00e4t noutaa olemattoman arvon...\n&gt;&gt;&gt; alice[\"number\"]\nKeyError: 'number'\n\n# T\u00e4h\u00e4n l\u00f6ytyy get-metodi, jonka oletus on None\n# tai k\u00e4ytt\u00e4j\u00e4n m\u00e4\u00e4ritt\u00e4m\u00e4 arvo\n&gt;&gt;&gt; alice.get(\"number\", \"N/A\")\n'N/A'\n</code></pre>"},{"location":"muuttujatyypit/sanakirja/#arvojen-muokkaus","title":"Arvojen muokkaus","text":"<p>Arvoja voi muokata sijoittamalla avaimeen uuden arvon.</p> <pre><code>&gt;&gt;&gt; alice = {\"name\": \"Alice\", \"age\": 42}\n&gt;&gt;&gt; alice[\"age\"] = alice[\"age\"] + 1\n&gt;&gt;&gt; print(alice)\n{'name': 'Alice', 'age': 43}\n</code></pre>"},{"location":"muuttujatyypit/sanakirja/#sanakirja-ja-operaatiot","title":"Sanakirja ja operaatiot","text":""},{"location":"muuttujatyypit/sanakirja/#aritmeettiset-vertailu-ja-loogiset","title":"Aritmeettiset, vertailu ja loogiset","text":"<p>Aritmeettiset ja vertailuoperaattorit, poislukien <code>==</code>, eiv\u00e4t toimi sanakirjojen kanssa. Loogiset toimivat samalla tavalla kuin sekvenssien ja joukkojen kanssa. Loogiset peraatiot kuten <code>and</code> k\u00e4sittelee <code>bool()</code>-funktion palauttamaa arvoa. Tyhj\u00e4 sanakirja eli <code>bool(dict())</code> palauttaa arvon False, ja mik\u00e4 tahansa ei-tyhj\u00e4 sanakirja palauttaa Truen.</p>"},{"location":"muuttujatyypit/sanakirja/#sanakirja","title":"Sanakirja","text":"<p>Aivan kuten joukolla, my\u00f6s sanakirjalla on nippu omia, hy\u00f6dyllisi\u00e4 operaatioita tai metodeja.</p> Operaatio Selite list(d) Palauttaa listan avaimista. len(d) Palauttaa avainten lukum\u00e4\u00e4r\u00e4n d[key] Palauttaa avaimen key arvon d.get(key) Palauttaa avaimen key arvon (tai None) d[key] = value Asettaa avaimen key arvoksi value del d[key] Poistaa avaimen key ja sen arvon key in d Palauttaa True, jos avain key on sanakirjassa d, muuten False iter(d) Palauttaa sanakirjan avaimet iteraattorina d.pop(key) Poistaa avaimen key ja palauttaa sen arvon d.popitem() Poistaa ja palauttaa viimeiseksi lis\u00e4tyn avaimen ja arvon d.reverse() K\u00e4\u00e4nt\u00e4\u00e4 sanakirjan avaimet d | other Palauttaa yhdistetyn, uuden sanakirjan, joka sis\u00e4lt\u00e4\u00e4 d:n ja other:n"},{"location":"muuttujatyypit/sanakirja/#sanakirjan-kaytto-stackna","title":"Sanakirjan k\u00e4ytt\u00f6 Stack:n\u00e4","text":"<p>Sanakirjaa voi k\u00e4ytt\u00e4\u00e4 <code>.popitem()</code>:n avulla st\u00e4kkin\u00e4. Tuoreissa Pythonin versioissa (3.7+) dictionary muistaa j\u00e4rjestyksen, jossa entiteetit on siihen lis\u00e4tty. Kokeile, mit\u00e4 alla oleva koodi tulostaa. Tutki, miss\u00e4 j\u00e4rjestyksess\u00e4 entiteetit tulostuvat, ja lis\u00e4ksi miss\u00e4 tietotyypiss\u00e4 ne ovat.</p> <pre><code>my_stack = dict()\nmy_stack['a'] = 1\nmy_stack['b'] = 2\nmy_stack['c'] = 3\n\nfor _ in range(2):\n    print(my_stack.popitem())\n\nmy_stack['z'] = 20\nmy_stack['x'] = 19\nmy_stack['y'] = 18\n\nwhile my_stack:\n    print(my_stack.popitem())\n</code></pre>"},{"location":"muuttujatyypit/sanakirja/#moduuli-json","title":"Moduuli: JSON","text":"<p>Sanakirja ja JSON ovat muodoltaan l\u00e4heist\u00e4 sukua toisilleen. JSON on JavaScript Object Notation, joka on JavaScriptin objektien ja sanakirjojen muotoiluun tarkoitettu notaatio. Pythonin JSON-moduuli tarjoaa kaksi funktiota, <code>json.dumps()</code> ja <code>json.loads()</code>, jotka muuntavat Pythonin sanakirjan JSON-muotoon ja takaisin.</p> <pre><code>import json\n\ningredients = [\n    {\"id\": 0, \"name\": \"Egg\", \"price\": 1.00},\n    {\"id\": 1, \"name\": \"Ham\", \"price\": 0.50},\n    {\"id\": 2, \"name\": \"Sp\u00e4m\", \"price\": 42.00},\n]\n\n# Python -&gt; JSON\ningredients_json = json.dumps(ingredients, indent=4)\nprint(\"JSON: \", ingredients_json)\n\n# JSON -&gt; Python\ningredients_dict = json.loads(ingredients_json)\nassert ingredients_dict == ingredients\n</code></pre> <p>Aja yll\u00e4 oleva koodi ja tutki, kuinka Sp\u00e4m-sanan \u00e4\u00e4kk\u00f6nen k\u00e4ytt\u00e4ytyy JSON-merkkijonoksi materialisoituna. Kokeile my\u00f6s, mit\u00e4 tapahtuu, jos k\u00e4yt\u00e4t parametri\u00e4 <code>ensure_ascii=False</code> <code>json.dumps()</code>-funktiolle. Huomaa, ett\u00e4 mik\u00e4li kirjoitat j\u00e4lkimm\u00e4isell\u00e4 tavalla JSON-tiedoston, joudut m\u00e4\u00e4ritt\u00e4m\u00e4\u00e4n tiedoston koodauksen, jotta \u00e4\u00e4kk\u00f6set tallentuvat oikein. UTF-8 on t\u00e4ll\u00f6in suositus.</p>"},{"location":"muuttujatyypit/sanakirja/#harjoittele","title":"Harjoittele","text":""},{"location":"muuttujatyypit/sanakirja/#harjoittele-jsonsta-objektiksi-ja-takaisin","title":"Harjoittele JSON:sta objektiksi ja takaisin","text":"<p>Tallenna wikipediasta l\u00f6ytyv\u00e4 JSON-esimerkki tiedostoon <code>input.json</code>. Voit tehd\u00e4 t\u00e4m\u00e4n vaiheen Visual Studio Codella, Pythonilla, vim:ll\u00e4 tai muulla valitsemallasi ty\u00f6kalulla. JSON kokonaisuudessaan alla:</p> <pre><code>{\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\",\n  \"is_alive\": true,\n  \"age\": 27,\n  \"address\": {\n    \"street_address\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postal_code\": \"10021-3100\"\n  },\n  \"phone_numbers\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"office\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"children\": [\n    \"Catherine\",\n    \"Thomas\",\n    \"Trevor\"\n  ],\n  \"spouse\": null\n}\n</code></pre> <p>Tee sitten seuraavat:</p> <ol> <li>Lue tiedosto <code>input.json</code> ja tallenna sen sis\u00e4lt\u00f6 muuttujaan <code>data</code>.</li> <li>Muunna <code>data</code> Pythonin sanakirjaksi.</li> <li>Lis\u00e4\u00e4 John:lle uusi lapsi, esimerkiksi \"Jane\".</li> <li>Lis\u00e4\u00e4 John:lle uusi puhelinnumero, esimerkiksi \"555-555-5555\"</li> <li>Muunna sanakirja takaisin JSON-muotoon.</li> <li>Tallenna JSON-tiedosto <code>output.json</code>-nimell\u00e4.</li> </ol>"},{"location":"muuttujatyypit/sanakirja/#harjoittele-pydantic-model","title":"Harjoittele: Pydantic Model","text":"<p>Tutustu Pydantic kirjastoon ja sen Model -luokkaan. Pydantic on Pythonin kirjasto, joka tarjoaa ty\u00f6kaluja tietotyyppien validointiin ja muuntamiseen. Se on erityisen hy\u00f6dyllinen REST API:en kanssa ty\u00f6skennelless\u00e4. Pydanticin Model-luokka tarjoaa ty\u00f6kaluja Pythonin sanakirjojen muuntamiseen Pythonin luokiksi ja takaisin. Alla esimerkki kirjaston k\u00e4yt\u00f6st\u00e4:</p> <pre><code>from pydantic import BaseModel, Field\nfrom enum import Enum\nfrom typing import List\n\nclass SpeciesEnum(str, Enum):\n    cat = \"cat\"\n    dog = \"dog\"\n\nclass Pet(BaseModel):\n    name: str\n    species: SpeciesEnum\n    # Age field is in years and must be between 0 and 40\n    age_years: int = Field(gt=-1, lt=41)\n\n\nclass Owner(BaseModel):\n    name: str\n    pets: List[Pet]\n\n# Define\nkitty = Pet(name=\"Kitty\", species=\"cat\", age_years=0)\npuppy = Pet(name=\"Puppy\", species=\"dog\", age_years=7)\nlisa = Owner(name=\"Lisa\", pets=[kitty, puppy])\n\n# Loop\nfor pet in lisa.pets:\n    print(f\"{pet.name} is a {pet.species} and is {pet.age_years} years old\")\n</code></pre> <p>Jatka harjoitusta siten, ett\u00e4 luet datan JSON-merkkijonon sis\u00e4lt\u00e4v\u00e4st\u00e4 muuttujasta. Alla pohja:</p> <pre><code># T\u00e4yt\u00e4 n\u00e4m\u00e4 tiedot. Voit halutessasi luoda JSON-tiedoston ja\n# lukea datan sielt\u00e4.\nowner_data = \"\"\"\n{\n  \"name\": \"Unknown\",\n  \"pets\": []\n}\n\"\"\"\n\n# Tutustu t\u00e4h\u00e4n metodiin\nOwner.model_validate_json(owner_data) \n</code></pre> <p>Tip</p> <p>Huomaathan, ett\u00e4 pydantic ei ole Pythonin sis\u00e4\u00e4nrakennettu kirjasto. Sinun tulee asentaa se paketinhallinnalla (pip tai poetry).</p>"},{"location":"muuttujatyypit/sekvenssit/","title":"Sekvenssit","text":"<p>Pythonissa on useita tietotyyppej\u00e4, jotka lukeutuvat sekvensseihin, kuten Yleist\u00e4-luvussa listattiin. Sekvenssit ovat joukkio elementtej\u00e4 tietyss\u00e4 j\u00e4rjestyksess\u00e4. Jokaisella elementill\u00e4 on indeksi. Ensimm\u00e4isen elementin indeksi on nolla (eli lista on <code>zero-indexed</code>). Yksi on jo sinulle aiemmin tuttu: merkkijonot eli <code>str</code>. T\u00e4ss\u00e4 luvussa k\u00e4sitell\u00e4\u00e4n kolme uutta: <code>list</code>, <code>tuple</code> ja <code>range</code>. Suomeksi n\u00e4m\u00e4 k\u00e4\u00e4ntyisiv\u00e4t listaksi, monikoksi ja kenties arvojoukoksi, mutta t\u00e4ss\u00e4 luvussa k\u00e4ytet\u00e4\u00e4n vain ja ainoastaan niiden alkuper\u00e4isi\u00e4 nimi\u00e4 Finglish-tyylisesti taivutettuna. Merkkijono on staattisesti tyypitetty sekvenssi, eli jokainen merkki on Unicode-koodipiste.</p> <p>Range poikkeaa tuplesta ja listasta siten, ett\u00e4 se on lasketaan auki vasta kun on pakko eli se on jossain m\u00e4\u00e4rin lazy evaluated. Kun edistyt Pythonissa, tulet oppimaan t\u00e4h\u00e4n liittyvien generaattoreiden k\u00e4yt\u00f6n. Toistaiseksi voit hyv\u00e4ksy\u00e4, ett\u00e4 range on tasav\u00e4linen sekvenssi, jota voi loopata ja jonka voi k\u00e4\u00e4nt\u00e4\u00e4 listaksi.</p>"},{"location":"muuttujatyypit/sekvenssit/#sekvenssien-luonti","title":"Sekvenssien luonti","text":"<pre><code># Lista\nitems = [\"abc\", 42, 42, 3.14]\n\n# Tuple - kaksi vaihtoehtoa\nitems = (\"abc\", 42, 42, 3.14)\nitems = \"abc\", 42, 42, 3.14\n\n# Range - harvoin oikeasti osoitetaan muuttujaan!\nthousand_elems = range(1000)\n\n# Range - alku ja loppu\ntwenty_to_thirty = range(20, 30)\n\n# Range - alku, loppu ja askelkoko\nodd_numbers_before_twenty = range(1, 20, 2)\n</code></pre> <p>Sekvenssin voi luoda my\u00f6s kutsumalla kyseisen tyypin konstruktoria. Huomaa, ett\u00e4 argumentin on oltava iteroitava objekti eli iterable. Mik\u00e4li termi on vieras, kannattaa lukaista Python Glossary: Iterable. Huomaa, ett\u00e4 t\u00e4m\u00e4 ei toimi rangen kanssa.</p> <pre><code># Listasta tupleksi\n&gt;&gt;&gt; my_list = [1, 2, 3]\n&gt;&gt;&gt; tuple(my_list)\n(1, 2, 3)\n\n# Tuplesta listaksi\nmy_tuple = (1, 2, 3)\ntuple(my_tuple)\n\n# Rangesta listaksi\nlist(range(6))\n[0, 1, 2, 3, 4, 5]\n</code></pre> <p>Huomaa, ett\u00e4 my\u00f6s merkkijono on iterable - seh\u00e4n on yksi sekvensseist\u00e4 itsekin.</p> <pre><code>&gt;&gt;&gt; list(\"spam\")\n['s', 'p', 'a', 'm']\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#immutability","title":"Immutability","text":"<p>Yll\u00e4 olevien esimerkkien perusteella lista ja tuple saattavat tuntua huomattavan samanlaisilta. On siis t\u00e4rke\u00e4\u00e4 painottaa heti alkuun, ett\u00e4 niill\u00e4 on merkitt\u00e4v\u00e4 eroavaisuus: immutability eli muuttumattomuus. Pythonin listaan voi lis\u00e4t\u00e4 ja siit\u00e4 voi poistaa elementtej\u00e4 luomisen j\u00e4lkeen, joten useimmissa ohjelmointikieliss\u00e4 sen vastine olisi \"dynamic array\".</p> <p>Tip</p> <p>Muistis\u00e4\u00e4nt\u00f6 saattaa auttaa t\u00e4ss\u00e4 ainakin aluksi. Muutettavia (eli mutable) tietotyyppej\u00e4 Pythonissa ovat LSD: List, Set, Dict.</p> <p>K\u00e4yt\u00e4nn\u00f6ss\u00e4 t\u00e4m\u00e4 tarkoittaa juuri sit\u00e4, milt\u00e4 se kuulostaa. Listaa voi muuttaa luomisen j\u00e4lkeen, tuplea ei.</p> <pre><code># Listan muuttaminen\n&gt;&gt;&gt; items = [\"a\", \"b\", \"c\"]\n&gt;&gt;&gt; items[0] = \"x\"\n&gt;&gt;&gt; print(items)\n['x', 'b', 'c']\n\n# Saman yritt\u00e4minen tuplelle\n&gt;&gt;&gt; items = (\"a\", \"b\", \"c\")\n&gt;&gt;&gt; items[0] = \"x\"\n&gt;&gt;&gt; print(items)\n??? # Kokeile, mit\u00e4 tulostuu !\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#sekvenssit-ja-operaatiot","title":"Sekvenssit ja operaatiot","text":""},{"location":"muuttujatyypit/sekvenssit/#aritmaattiset-vertailu-ja-loogiset","title":"Aritmaattiset, Vertailu ja Loogiset","text":"<p>N\u00e4m\u00e4 toimivat listan ja tuplen kanssa samalla tavalla kuin merkkijonojen kanssa. Rangen kanssa n\u00e4ist\u00e4 ei toimi mik\u00e4\u00e4n. Kokeile seuraavia kertauksen ja todistamisen vuoksi:</p> <pre><code># Operaattori: +\n(1, 2, 3) + (4, 5, 6)\n\n# Operaattori: *\n(1, 2, 3) * 5\n\n# Operaattori: &gt;\n(4, 5, 6) &gt; (1, 2, 3)\n\n# Operaattori: &lt;=\n(1, 1, 2) &gt; (1, 1, 3)\n\n# Operaattori: or\n() or (1, 2, 3)\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#sekvenssi-operaatiot","title":"Sekvenssi-operaatiot","text":"Operaatio Selite <code>4 in (3, 4, 5)</code> Tarkistaa, sis\u00e4ltyyk\u00f6 elementti sekvenssiin. <code>8 not in (3, 4, 5)</code> Yll\u00e4 olevan negaatio <code>(1, 2, 3)[i:j:k]</code> Indeksointi ja rajaus (eng. slicing). Lue alta lis\u00e4\u00e4. <code>len((1, 2, 3))</code> Elementtien m\u00e4\u00e4r\u00e4 <code>min((1, 2, 3))</code> Pienin elementti <code>max((1, 2, 3))</code> Suurin elementti <code>(1, 2, 3).index(2)</code> Etsityn elementin indeksi. <code>(2, 2, 2).count(2)</code> Kysytyn elementin lukum\u00e4\u00e4r\u00e4 <p>Teht\u00e4v\u00e4</p> <p>Kokeile yll\u00e4 olevia operaatioita listan tai rangen kanssa. N\u00e4in syntaksi j\u00e4\u00e4 paremmin mieleesi!</p>"},{"location":"muuttujatyypit/sekvenssit/#sekvenssin-kasittely","title":"Sekvenssin k\u00e4sittely","text":""},{"location":"muuttujatyypit/sekvenssit/#sekvenssin-pilkkominen","title":"Sekvenssin pilkkominen","text":"<p>Listan ja sekvenssin pilkkominen on huomattavasti monipuolisempi ominaisuus kuin muut yll\u00e4 listatut sekvenssioperaatiot. Sill\u00e4 voi n\u00e4pp\u00e4r\u00e4sti p\u00e4\u00e4st\u00e4 k\u00e4siksi haluttuihin elementteihin tai esimerkiksi k\u00e4\u00e4nt\u00e4\u00e4 listan edes-takaisin. Siksi t\u00e4lle operaatiolle on varattu oma otsikkonsa. Huomaa, ett\u00e4 <code>range(i, j, k)</code>-konstruktori toimii hyvin samalla tavalla kuin indeksointiin ja leikkelyyn k\u00e4ytetty syntaksi (<code>[i:j:k]</code>), jossa argumentit ovat:</p> <code>[i:j:k]</code> Selite <code>i</code> Start eli aloituspiste. Inklusiivinen. <code>j</code> End eli lopetuspiste. Eksklusiivinen eli kirjoitettu numero ei kuulu mukaan valintaan. <code>k</code> Step size eli askelkoko. Startin ja endin v\u00e4li k\u00e4yd\u00e4\u00e4n askelletaan l\u00e4pi t\u00e4ll\u00e4 v\u00e4lityksell\u00e4. <p>Lue alla oleva koodi huolella l\u00e4pi ja kokeile sit\u00e4 itse k\u00e4yt\u00e4nn\u00f6ss\u00e4.</p> <pre><code># Luodaan lista numeroista 0-20\n&gt;&gt;&gt; nums = list(range(21))\n\n# Kymmenes elementti listalla\n&gt;&gt;&gt; nums[10]\n10\n\n# Elementit kolmesta kuuteen asti (huom! eksklusiivisuus)\n&gt;&gt;&gt; nums[3:6]\n[3, 4, 5]\n\n# Negatiivinen indeksi\n&gt;&gt;&gt; nums[-1]\n20\n\n# Positiivinen ja negatiivinen indeksi\n&gt;&gt;&gt; nums[9:-9]\n[9, 10, 11]\n\n# Pelkk\u00e4 step size annettuna\n&gt;&gt;&gt; nums[::5]\n[0, 5, 10, 15, 20]\n\n# Samat stepit yhdest\u00e4 alkaen\n&gt;&gt;&gt; nums[1::5]\n[1, 6, 11, 16]\n\n# Negatiivinen step k\u00e4\u00e4nt\u00e4\u00e4 listan edestakaisin\n&gt;&gt;&gt; nums[:13:-1]\n[20, 19, 18, 17, 16, 15, 14]\n</code></pre> <p>Teht\u00e4v\u00e4</p> <p>Kokeile, mit\u00e4 pelkk\u00e4 <code>nums[::-1]</code> tekee!</p>"},{"location":"muuttujatyypit/sekvenssit/#sekvenssin-pakkaus-ja-purku","title":"Sekvenssin pakkaus ja purku","text":"<p>Sekvenssin <code>packing</code> ja <code>unpacking</code> ovat yll\u00e4tt\u00e4v\u00e4n n\u00e4pp\u00e4r\u00e4 tapa k\u00e4sitell\u00e4 listoja tai tupleja. Pakkaus tarkoittaa sit\u00e4, ett\u00e4 useasta muuttujasta luodaan yksi sekvenssi. Purku tarkoittaa sit\u00e4, ett\u00e4 sekvenssist\u00e4 luodaan useampi muuttuja. Pakkaus ja purku toimivat samalla tavalla listan ja tuplen kanssa. Pakkaus tuottaa tupleja, purku purkaa listoja.</p> <pre><code># Pakkaus\n&gt;&gt;&gt; my_tuple = 1, 2, 3  # tai (1, 2, 3)\n&gt;&gt;&gt; my_tuple\n(1, 2, 3)\n\n# Purku\n&gt;&gt;&gt; a, b, c = my_tuple\n&gt;&gt;&gt; a\n1\n\n# Purku ja pakkaus sekaisin\n&gt;&gt;&gt; eka, toka, *loput = 1, 2, 3, 4, 5\n&gt;&gt;&gt; loput\n[3, 4, 5]\n\n# Purku\n&gt;&gt;&gt; (*letters, ) = \"kissa\"\n&gt;&gt;&gt; letters\n['k', 'i', 's', 's', 'a']\n</code></pre> <p>Pakkauksen ja purun kanssa voi k\u00e4ytt\u00e4\u00e4 my\u00f6s t\u00e4hte\u00e4 (<code>*</code>) edustamaan n-kappaletta elementtej\u00e4.</p> <pre><code># Pakkaus\n&gt;&gt;&gt; eka, toka, *loput = 1, 2, 3, 4, 5\n&gt;&gt;&gt; loput\n[3, 4, 5]\n\n\n### Sekvenssin aggregointi\n\nMik\u00e4li haluat tiet\u00e4\u00e4 listan suurimman tai pienimm\u00e4n arvon, tai kaikkien arvojen summan, t\u00e4h\u00e4n l\u00f6ytyy valmiit funktiot min, max ja sum.\n\n```python\ngrades = [3, 4, 2, 5, 1, 1]\n\naverage = sum(grades) / len(grades)\nprint(f\"Average (mean) grade is {average:.2f}.\")\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#listalle-ominaiset-operaatiot","title":"Listalle ominaiset operaatiot","text":""},{"location":"muuttujatyypit/sekvenssit/#listan-jarjestaminen","title":"Listan j\u00e4rjest\u00e4minen","text":"<p>Listan voi j\u00e4rjest\u00e4\u00e4 sort metodilla. Mik\u00e4li listan elementti on iterable, se j\u00e4rjestet\u00e4\u00e4n vakiona sen ensimm\u00e4isen elementin mukaan. Huomaa, ett\u00e4 sort j\u00e4rjest\u00e4\u00e4 listan <code>in-place</code>-tyylisesti. Metodi ei siis palauta uutta, j\u00e4rjestetty\u00e4 listaa, vaan lista itsess\u00e4\u00e4n p\u00e4ivittyy.</p> <pre><code>scores = [(3, 5), (7,4), (2, 1), (5, 6)]\nscores.sort()\nprint(scores)\n[(2, 1), (3, 5), (5, 6), (7, 4)]\n</code></pre> <p>Mik\u00e4li haluat luoda uuden, j\u00e4rjestetyn listan, k\u00e4yd\u00e4 Pythonin sis\u00e4\u00e4nrakennettua funktiota sorted.</p> <pre><code>scores = [(3, 5), (7,4), (2, 1), (5, 6)]\nsorted_scores = sorted(scores)\n</code></pre> <p>Mik\u00e4li haluat j\u00e4rjest\u00e4\u00e4 listan elementit jollakin muulla tavalla kuin ensimm\u00e4isen entiteetin mukaan, sort-metodille tai sorted-funktiolle pit\u00e4\u00e4 antaa funktio, joka palauttaa j\u00e4rjestykseen k\u00e4ytett\u00e4v\u00e4n numeron. Funktiot opetetaan kurssilla my\u00f6hemmin, mutta alla on yksi tapa esiteltyn\u00e4 sek\u00e4 tavallisen funktion ett\u00e4 lambda-funktion avulla. Kummatkin tekev\u00e4t saman asian.</p> <pre><code># J\u00e4rjestysfunktion m\u00e4\u00e4rittely\ndef sort_by_second(x):\n    return x[1]\n\n# J\u00e4rjest\u00e4minen funktiolla\nscores = [(3, 5), (7,4), (2, 1), (5, 6)]\nprint(sorted(scores, key=sort_by_second))\n\n# J\u00e4rjest\u00e4minen lambda-funktiolla\nprint(sorted(scores, key=lambda x: x[1]))\n</code></pre> <p>J\u00e4rjestys on vakiona pienest\u00e4 suureen. Sen voi vaihtaa k\u00e4\u00e4nteiseksi avainsana-argumentin avulla. Alla esimerkki, jossa j\u00e4rjest\u00e4miseen k\u00e4ytet\u00e4\u00e4n Pythonin sis\u00e4\u00e4nrakennettua summafunktiota:</p> <pre><code>&gt;&gt;&gt; sorted(scores, key=sum, reverse=True)\n[(7, 4), (5, 6), (3, 5), (2, 1)]\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#listan-kopiointi","title":"Listan kopiointi","text":"<p>Listalla on oma metodeja, joita muut sekvenssit eiv\u00e4t toteuta. Tutustut n\u00e4ist\u00e4 useimpiin alla olevissa harjoituksissa. Alla k\u00e4sitell\u00e4\u00e4n niist\u00e4 yksi, joka on merkitt\u00e4v\u00e4sti monimutkaisempi kuin muut eli <code>copy</code>.</p> <pre><code># ab on lista, johon kuuluvat merkkijonot a ja b\na = \"egg\"\nb = \"ham\"\nab = [a, b]\n\n# Orig on kolmielementtinen lista. Kolmas elementti on lista ab.\norig = [0, 1, ab]\nprint(orig)\n</code></pre> <p>Yll\u00e4 oleva koodi tulostaa seuraavan. Listassa <code>orig</code> on siis kolme elementti\u00e4, joista kolmas on lista.:</p> <pre><code>[0, 1, ['egg', 'ham']]\n</code></pre> <p>Yritet\u00e4\u00e4n kopioida lista.</p> <pre><code># Luodaan listasta shallow copy\nshallow = orig.copy()\n\n# Ja deep copy, johon tarvitaan copy.deepcopy\nfrom copy import deepcopy\ndeep = deepcopy(orig)\n\n# Tulostetaan\nprint(f\"{'Original:':&gt;10} {orig}\")\nprint(f\"{'Shallow:':&gt;10} {shallow}\")\nprint(f\"{'Deep:':&gt;10} {deep}\")\n</code></pre> <p>T\u00e4m\u00e4 tulostaa arvatenkin kolme t\u00e4ysin samanlaista listaa:</p> <pre><code>[0, 1, ['egg', 'ham']]\n[0, 1, ['egg', 'ham']]\n[0, 1, ['egg', 'ham']]\n</code></pre> <p>Mit\u00e4 tapahtuu, jos me muokkaamme listoja, joista listat on kasattu ja/tai kopioitu?</p> <pre><code># Muokataan alkuper\u00e4ist\u00e4 ab-listan ensimm\u00e4ist\u00e4 elementti\u00e4\n# Vaihdetaan siis kananmuna v\u00e4h\u00e4n parempaan t\u00e4ytteseen\nab[0] = \"spam\"\n\n# Muokataan my\u00f6s alkuper\u00e4isen listan kolmannen elementin toista elementti\u00e4\n# Vaihdetaan siis kinkku v\u00e4h\u00e4n parempaan t\u00e4ytteeseen\norig[2][1] = \"SPAM\"\n\n# Tulostetaan\nprint(f\"{'Original:':&gt;10} {orig}\")\nprint(f\"{'Shallow:':&gt;10} {shallow}\")\nprint(f\"{'Deep:':&gt;10} {deep}\")\n</code></pre> <p>T\u00e4m\u00e4 tulostaa, ehk\u00e4 hieman yll\u00e4tt\u00e4en, kaksi identtist\u00e4 ja yhden uniikin listan:</p> <pre><code> Original: [0, 1, ['spam', 'SPAM']]\n  Shallow: [0, 1, ['spam', 'SPAM']]\n     Deep: [0, 1, ['egg', 'ham']]\n</code></pre> <p>Mit\u00e4 t\u00e4st\u00e4 opimme? Jos haluat listasta kopion, muista, ett\u00e4 <code>.copy()</code> palauttaa SHALLOW-tyyppisen kopion. T\u00e4m\u00e4 voi aiheuttaa vaikeasti debugattavia ongelmia, mik\u00e4li lista on moniulotteinen eli sis\u00e4lt\u00e4\u00e4 listoja (tai esimerkiksi dictionaryj\u00e4).</p>"},{"location":"muuttujatyypit/sekvenssit/#moduuli-itertools","title":"Moduuli: itertools","text":"<p>Listan ja tuplen yhteydess\u00e4 eritt\u00e4in hy\u00f6dyllinen kirjasto on itertools, josta l\u00f6yty metodit permutaation, kombinaation ja karteesisen tulon laskemiseen joukkojen osalta. Tutustu my\u00f6s muihin metodeihin: Python docs: itertools. Alla esimerkki, jossa generoidaan kaikki 3-t\u00e4ytteiset valkoiset tai punaiset pizzat.</p> <pre><code>import itertools\n\n# Tuples of ingredients\nbase = (\"tomato sauce\", \"french cream\")\ningredients = (\"egg\", \"ham\", \"spam\", \"pineapple\", \"blue cheese\")\n\n# Find all unique combinations of 3 ingredients\nunique_ingredient_sets = itertools.combinations(ingredients, 3)\n\n# Create all possible 3-ingredient pizzas\npairs = list(itertools.product(base, unique_ingredient_sets))\n\n# Print the pairs\nfor pair in pairs:\n    print(pair)\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#harjoituksia","title":"Harjoituksia","text":""},{"location":"muuttujatyypit/sekvenssit/#harjoittele-listan-omat-metodit","title":"Harjoittele: Listan omat metodit","text":"<p>Listalla on omia metodeita, joita muut sekvenssit toteuta. N\u00e4it\u00e4 ovat <code>append</code>, <code>clear</code>, <code>extend</code>, <code>insert</code>, <code>pop</code>, <code>remove</code> ja <code>reverse</code>. Tutustu funktioihin seuraavalla tavalla:</p> <pre><code># Katso metodin oma docstring\n# Kaava: help(nums.metodi)\n&gt;&gt;&gt; nums = [1, 2, 3, 4]\n&gt;&gt;&gt; help(nums.append)\n# Lue output !\n</code></pre> <p>Kun olet tutustunut kunkin metodin help-tekstiin eli docstringiin, kokeile kutakin k\u00e4yt\u00e4nn\u00f6ss\u00e4.</p>"},{"location":"muuttujatyypit/sekvenssit/#harjoittele-array","title":"Harjoittele: Array","text":"<p>Mik\u00e4li tarvitset sekvenssi\u00e4, joka koostuu vain yhden tyyppisist\u00e4 muuttujista, ja haluat olla varma ettei sinne vahingossakaan voi laittaa muita, Python tarjoaa my\u00f6s tyyppim\u00e4\u00e4ritellyn <code>array</code>:n. Koska kyseinen sekvenssi on tyypitetty, se on muistink\u00e4yt\u00f6n suhteen tehokkaampi kuin lista tai tuple. Tutustu t\u00e4h\u00e4n lyhyesti ja pohdi, miss\u00e4 sit\u00e4 voisi k\u00e4ytt\u00e4\u00e4.</p> <pre><code>import array\narr = array.array('d', [1, 2, 3])\narr.append(42)\narr.append(123)\nprint(arr)\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#harjoittele-statistiikka","title":"Harjoittele: Statistiikka","text":"<p>Pythonin statistics-kirjastosta l\u00f6ytyvat mode, mean ja median funktiot. K\u00e4yt\u00e4 n\u00e4it\u00e4 tarkistamaan oma laskelmasi assert:n avulla. Korvaa alla olevassa koodissa None omalla laskukaavallasi. Huomaa, ett\u00e4 saat luoda uusia muuttujia tarpeen mukaan.</p> <pre><code>import random\nfrom statistics import mode, mean, median\n\nnumbers = list(range(16))\nrandom.shuffle(numbers)\n\n# calculate mean\nmanual_mean = None # laske t\u00e4m\u00e4 itse\nassert manual_mean == mean(numbers)\n\n# calculate median\nmanual_median = None # laske t\u00e4m\u00e4 itse\nassert manual_mean == median(numbers), f\"Median is {manual_median}, should be {median(numbers)}\"\n\n# calculate mode\nmanual_mode = None # laske t\u00e4m\u00e4 itse\nassert manual_mode == mode(numbers), f\"Mode is {manual_mode}, should be {mode(numbers)}\"\n</code></pre>"},{"location":"muuttujatyypit/sekvenssit/#harjoittele-anagrammi","title":"Harjoittele: Anagrammi","text":"<p>Yll\u00e4 esiteltiin moduuli itertools. K\u00e4yt\u00e4 funktiota <code>itertools.permutations()</code> ja luo kaikki sanan \"kissa\" anagrammit \u2013 oli niiss\u00e4 suomen kielen kannalta j\u00e4rke\u00e4 tai ei.</p> <pre><code>import itertools\n\n# Example using a tuple\nletters = list(\"kissa\")\n\n# Create an iterator that generates permutations of the tuple\npermutations = None # Tee toteutus t\u00e4ss\u00e4\n\n# Print the permutations\nfor perm in permutations:\n    print(perm)\n</code></pre> <p>Pohdi, kuinka selvitt\u00e4isit, mitk\u00e4 n\u00e4ist\u00e4 sanoista ovat oikeasti suomen kielen sanoja.</p>"},{"location":"muuttujatyypit/tavut/","title":"Tavujono","text":"<p>Kaikki maailman data ei tietenk\u00e4\u00e4n koostu ihmiselle merkityksellisest\u00e4 UTF-8 enkoodatusta Unicode-merkist\u00f6st\u00e4. Osa datasta on bin\u00e4\u00e4ridataa eli per\u00e4kk\u00e4in kirjoitettuna tavuja tiedostossa. T\u00e4m\u00e4n datan k\u00e4sittelyyn Pythonista l\u00f6ytyy tyypit <code>bytes</code> ja <code>bytearray</code>.</p> <p>Tietotyypin bytes muuttujia voi luoda muun muassa seuraavin tavoin:</p> <pre><code>&gt;&gt;&gt; b\"Hello\"\nb'Hello'\n\n&gt;&gt;&gt; bytes([ord(\"H\"), ord(\"e\"), ord(\"l\"), ord(\"l\"), ord(\"o\")])\nb'Hello'\n\n&gt;&gt;&gt; bytes([72, 101, 108, 108, 111])\nb'Hello'\n\n&gt;&gt;&gt; bytes(\"Hello\", encoding=\"utf-8\")\nb'Hello'\n\n&gt;&gt;&gt; \"Hello\".encode()\nb'Hello'\n</code></pre> <p>Tietotyypin bytearray muuttujia voi luoda muun muassa seuraavin tavoin:</p> <pre><code>&gt;&gt;&gt; bytearray(b\"Hello\")\nbytearray(b'Hello')\n\n&gt;&gt;&gt; bytearray([72, 101, 108, 108, 111])\nbytearray(b'Hello')\n\n&gt;&gt;&gt; bytearray.fromhex(\"48 65 6c 6c 6f\")\nbytearray(b'Hello')\n</code></pre>"},{"location":"muuttujatyypit/tavut/#immutability","title":"Immutability","text":"<p>Tietotyypit <code>bytes</code> ja <code>bytearray</code> eroavat toisistaan siten, ett\u00e4 bytes on muuttumaton - aivan kuten aiemmin tutut sekvenssit merkkijono ja tuple, ja <code>bytearray</code> on muuttuva, aivan kuten lista. Jos tietoa ei ole tarve muuttaa luomisen j\u00e4lkeen, k\u00e4yt\u00e4 bytesi\u00e4.</p> <pre><code># T\u00e4m\u00e4 ei onnistu vaan nostaa TypeErrorin\n&gt;&gt;&gt; bytes([72, 101, 108, 108, 111])[0] = 0x59\n\n# T\u00e4m\u00e4 sen sijaan onnistuu\nbytearray([72, 101, 108, 108, 111])[0] = 0x59\n</code></pre>"},{"location":"muuttujatyypit/tavut/#harjoittele","title":"Harjoittele","text":""},{"location":"muuttujatyypit/tavut/#harjoitus-hashays-ja-salaus","title":"Harjoitus: H\u00e4sh\u00e4ys ja salaus","text":"<p>Kokeile sek\u00e4 h\u00e4sh\u00e4t\u00e4 ett\u00e4 salata jokin merkkijono. Alla on esitelty SHA-256 h\u00e4sh\u00e4ys. Kokeile salata ja purkaa valitsemasi merkkijono. K\u00e4yt\u00e4 t\u00e4h\u00e4n symmetrista salausalgoritmia Fernet. Teeth\u00e4n tarvittavat <code>pip</code>-asennukset virtuaaliymp\u00e4rist\u00f6ss\u00e4!</p> <pre><code>&gt;&gt;&gt; import hashlib\n&gt;&gt;&gt; hashlib.sha256(b\"Hello\").hexdigest()\n'185f8db32271fe25f561a6fc938b2e264306ec304eda518007d1764826381969'\n</code></pre>"},{"location":"muuttujatyypit/tavut/#harjoitus-luku-ja-kirjoitus","title":"Harjoitus: Luku ja kirjoitus","text":"<p>Kokeile lukea ja kirjoittaa bin\u00e4\u00e4ritiedostoja. Luo MS Paintilla, JSPaintilla tai vastaavalla grafiikkaty\u00f6kalulla pieni 24-bit Bitmap BMP-kuva. K\u00e4yt\u00e4 mieluiten kuvaa, joka on alle 100x100 pikseli\u00e4. Mik\u00e4li k\u00e4ytit JS Paintia ja tallensit kuvan k\u00e4sketyss\u00e4 muodossa, kuvan pikselidata alkaa bytest\u00e4 <code>image_data[54]</code>. Kolme per\u00e4kk\u00e4ist\u00e4 byte\u00e4 edustavat aina yhden pikselin RGB-arvoja k\u00e4\u00e4nteisess\u00e4 j\u00e4rjestyksess\u00e4 eli BRG.</p> <pre><code># Reading a binary file into bytes\nwith open(\"image.bmp\", \"rb\") as file:\n    image_data = file.read()\n\n# Do something to the image here\nprocessed_image_data = process(image_data)\n\n# Writing binary data to a file\nwith open(\"output.bin\", \"wb\") as file:\n    file.write(processed_image_data)\n</code></pre> <p>Toteuta oma prosessorisi haluamallasi tavalla. Alla on esimerkki, joka korvaa kaikki punaiset pikselit mustilla pikseleill\u00e4. Ensimm\u00e4isten 54 tavun oletetaan edustavan metadataa. Kaiken lopun oletetaan noudattavan kaavaa bytes[blue, green, red, ...] ja jokaisen kuvan pikselirivin olevan nelj\u00e4ll\u00e4 jaollisia. BMP-formaatissa ei-4-jaolliset rivit t\u00e4ytet\u00e4\u00e4n nollatavuilla.</p> <pre><code>def process(image:bytes, \n            pattern_to_replace=bytes.fromhex(\"00 00 ff\"), \n            replacement_pattern=bytes.fromhex(\"00 00 00\")\n           ) -&gt; bytes:\n    \"\"\" I see a red door and I want it to turn black.\"\"\"\n\n    # Leave pixels that are part of the header untouched.\n    HEADER_INDEX, PIXEL_SIZE = 54, 3\n\n    # Split to header and pixel data\n    header = image[0:HEADER_INDEX]\n    pixel_data = image[HEADER_INDEX:]\n\n    # Reveal the naiveness of this function\n    assert header[18] % 4 == 0, (\"This function only works with images \"\n                                 \"with width that is divisible with 4.\")\n\n    # Create pixel indicies 0, 3, 6, ... n-3\n    strides = range(0, len(pixel_data), 3)\n    output_bytes = bytearray()\n\n    # Loop and append\n    for i in strides:\n        chunk = pixel_data[i:i + PIXEL_SIZE]\n        if chunk == pattern_to_replace:\n            output_bytes.extend(replacement_pattern)\n        else:\n            output_bytes.extend(chunk)\n\n    return header + output_bytes\n</code></pre>"},{"location":"muuttujatyypit/tavut/#harjoitus-kayta-kirjastoa-kuvien-kasittelyyn","title":"Harjoitus: K\u00e4yt\u00e4 kirjastoa kuvien k\u00e4sittelyyn","text":"<p>Bin\u00e4\u00e4ridataa, kuten kuvia, k\u00e4sitell\u00e4\u00e4n useimmissa tapauksissa eri kirjastojen avulla. Kuvia voi k\u00e4sitell\u00e4 esimerkiksi kirjastoilla opencv ja Pillow. Kokeile j\u00e4lkimm\u00e4ist\u00e4. Huomaa, ett\u00e4 Pillow on fork vanhemmasta kirjastosta PIL. T\u00e4st\u00e4 johtuu se, ett\u00e4 paketti on pypiss\u00e4 eri nimell\u00e4 kuin mill\u00e4 se importattaan.</p> <p>Asenna kirjasto virtuaaliymp\u00e4rist\u00f6\u00f6si:</p> <pre><code># Bashiss\u00e4\n$ pip install Pillow\n\n# ...tai luo ja aja Jupyter Notebookissa magic cell\n%pip install Pillow\n</code></pre> <p>Jos haluat listata kaikki tiedostoformaatit, jotka voit Pillow:lla t\u00e4ll\u00e4 hetkell\u00e4 avata ja/tai kirjoittaa, aja komento:</p> <pre><code>&gt;&gt;&gt; from PIL import features\n&gt;&gt;&gt; PIL.features.pilinfo()\n</code></pre> <p>Kirjoita koodi:</p> <pre><code>from PIL import Image\n\n# Lataa kuva ja tarkista sen tietotyyppi\nimg = Image.open(\"image.bmp\")\nprint(type(img))\n\n# Suurenna kuva tasan 4x suuremmaksi k\u00e4ytt\u00e4m\u00e4tt\u00e4 interpolointia, jotta\n# kaunis pixel art pysyy pixel arttina eik\u00e4 m\u00f6ss\u00f6n\u00e4.\nresized = img.resize((img.width * 4, img.height * 4), resample=Image.NEAREST)\n\n# Hae pikselit listana tupleja. Huomaa type hint.\npixels: list[tuple[int, int, int]] = list(resized.getdata())\n\n# Prosessoi pikselit funktiolla, joka sinun tulee luoda\npixels = process(pixels)\n\n# Laita muokatut pikselit paikoilleen\nresized.putdata(new_pixels)\n</code></pre> <p>Pillow ja Jupyter Notebookin k\u00e4ytt\u00e4m\u00e4 IPython tarjoavat mahdollisuuksia my\u00f6s kuvan n\u00e4ytt\u00e4miseen. Jupyter Notebookissa kuvan voi katsoa ajamalla solun, jonka viimeinen rivi on kuvan sis\u00e4lt\u00e4v\u00e4 muuttuja, kuten <code>resized</code>, tai vaihtoehtoisesti <code>display()</code> funktion sis\u00e4lt\u00e4 esimerkiksi solun keskelt\u00e4:</p> <pre><code># GUI pop-up. Toimii my\u00f6s Python-skripteist\u00e4 laukaistuna:\nresized.show()\n\n# IPythonin display. Toimii Jupyter Notebookissa:\nfrom IPython.display import display\ndisplay(resized)\n</code></pre>"},{"location":"muuttujatyypit/yleist%C3%A4/","title":"Yleist\u00e4","text":""},{"location":"muuttujatyypit/yleist%C3%A4/#opiskeluohje","title":"Opiskeluohje","text":"<p>T\u00e4m\u00e4n otsakkeen luvut ovat tarkoituksella lyhyit\u00e4 ja tiiviit\u00e4. Oppimisk\u00e4yr\u00e4 saattaa siis tuntua hieman jyrk\u00e4lt\u00e4: t\u00e4m\u00e4 on tarkoitus. Luvut pyrkiv\u00e4t hy\u00f6dynt\u00e4m\u00e4\u00e4n kahta asiaa:</p> <ol> <li>Tyypillisesti koodin lukeminen on helpompaa kuin sen kirjoittaminen.</li> <li>Netti on pullollaan Python-tutoriaaleja. Luku toimii ponnahduslautana oikeaan suuntaan.</li> </ol> <p>Lue esimerkin koodi rauhallisesti, tulkitse mit\u00e4 se tekee, ja tarpeen mukaan lue lis\u00e4tietoa Pythonin dokumentaatiosta tai tutoriaaleista. Kokeile snippettej\u00e4 omassa ymp\u00e4rist\u00f6ss\u00e4 ja aja sit\u00e4 paloina. Lis\u00e4\u00e4 <code>print()</code>-lausekkeita koodin lomaan, kunnes koet ymm\u00e4rt\u00e4v\u00e4si, mit\u00e4 koodi tekee.</p> <p>Lukujen yhteydess\u00e4 esitell\u00e4\u00e4n my\u00f6s Pythonin sis\u00e4\u00e4nrakennettuja moduuleja, jotka liittyv\u00e4t vahvasti kyseiseen muuttujatyyppiin.</p> <p>Pythonin oma dokumentaatio listaa Pythonin sis\u00e4\u00e4nrakennetut tietotyypit t\u00e4\u00e4ll\u00e4: Built-in Types</p>"},{"location":"muuttujatyypit/yleist%C3%A4/#luvuissa-kasitellyt-tietotyypit","title":"Luvuissa k\u00e4sitellyt tietotyypit","text":"<p>T\u00e4m\u00e4n otsakkeen alla olevissa luvuissa k\u00e4sitell\u00e4\u00e4n osa Pythonin sis\u00e4\u00e4nrakennetuista tietotyypeist\u00e4. Kaksi niist\u00e4 esitell\u00e4\u00e4n jo t\u00e4ss\u00e4 luvussa. Alla taulukkomuodossa lista kaikista k\u00e4sitellyist\u00e4 tietotyypeist\u00e4.</p> Ryhm\u00e4 dokumentaatiossa K\u00e4sitell\u00e4\u00e4n luvussa Ei k\u00e4sitell\u00e4 Numeric Types int ja float <code>complex</code> Sequence Types list, tuple, range ja array Text Sequence Type str Binary Sequence Types bytes ja bytearray <code>memoryview</code> Set Types set ja frozenset Mapping Type dict Boolean Type <code>bool</code> (lue alta) None Type <code>NoneType</code> (lue alta)"},{"location":"muuttujatyypit/yleist%C3%A4/#boolean","title":"Boolean","text":"<p>Pythonin tietotyyppi <code>bool</code> edustaa Boolen algebran totuusarvoja tosi ja ep\u00e4tosi. Pythonissa boolean-muuttujat ovat sis\u00e4isesti numeroita, tarkemmin kokonaislukuja. Luku 0 vertautuu samaksi kuin False, luku 1 vertautuu samaksi kuin True.</p> <pre><code>&gt;&gt;&gt; 0 == False\nTrue\n\n&gt;&gt;&gt; 1 == True\nTrue\n\n&gt;&gt;&gt; False.real\n0\n\n&gt;&gt;&gt; True.real\n1\n\n# Huomaa, ett\u00e4 luku 2 ja muut luvut eiv\u00e4t ole True eiv\u00e4tk\u00e4 False\n&gt;&gt;&gt; 2 == True or 2 == False\nFalse\n</code></pre> <p>Tyypillisesti t\u00f6rm\u00e4\u00e4t boolean arvoisin Pythonissa, kun vertailet kahta tai useampaa arvoa kesken\u00e4\u00e4n.</p> <pre><code>&gt;&gt;&gt; 3 &gt; 2.0\nTrue\n</code></pre> <p>Python k\u00e4ytt\u00e4\u00e4 konstruktoria <code>bool()</code> aina kun k\u00e4yt\u00e4t <code>if</code> tai <code>while</code> kontrollirakenteita. Konstruktori k\u00e4sittelee nollaa edustavia lukuja sek\u00e4 tyhji\u00e4 sekvenssej\u00e4 Falsena. Seuraavat kaksi ovat siis t\u00e4ysin samoja komentoja:</p> <pre><code>my_name = \"Bond, James Bond\"\n\n# Vaihtoehto 1: Pythonista tuttu tiivis tapa tarkistaa, ett\u00e4\n# merkkijono ei ole tyhj\u00e4 eli pelkk\u00e4 \"\".\nif my_name:\n  print(\"I have a name\")\n\n# Vaihtoehto 2: t\u00e4ysin turhan \"verbose\"\nif bool(my_name):\n  print(\"I have a name\")\n</code></pre>"},{"location":"muuttujatyypit/yleist%C3%A4/#nonetype","title":"NoneType","text":"<p>Monissa muissa kieliss\u00e4 on <code>null</code>. Pythonissa on <code>None</code>. Nonea ei kuulu vertailla yht\u00e4 kuin (eli <code>==</code>) operaattorilla vaan identeetti\u00e4 vertailevalla operaattorilla <code>is</code>. None on singulariteetti Jos siis haluat tiet\u00e4\u00e4, onko jonkin arvo Pythonissa None, tarkista se n\u00e4in:</p> <pre><code>&gt;&gt;&gt; my_val = 2\n&gt;&gt;&gt; my_val is None\nFalse\n\n&gt;&gt;&gt; my_val = None\n&gt;&gt;&gt; my_val is None\nTrue\n</code></pre> <p>None itsess\u00e4\u00e4n on <code>bool</code>-konstruktorin n\u00e4k\u00f6kulmasta ep\u00e4tosi eli False, eli t\u00e4m\u00e4 toimii:</p> <pre><code>my_name = None\n\nif my_name:\n  print(\"I have a name\")\nelse:\n  print(\"I have no name\")\n</code></pre> <p>Miksik\u00f6 yll\u00e4 oleva toimii? Koska boolen konstruktori palauttaa Nonesta Falsen:</p> <pre><code>&gt;&gt;&gt; bool(None)\n&gt;&gt;&gt; False\n</code></pre> <p>Booleanilla ja NoneTypell\u00e4 ei tee paljoakaan ennen kuin osaa k\u00e4ytt\u00e4\u00e4 muita muuttujatyyppej\u00e4. N\u00e4m\u00e4, ja varsinkin boolen totuusarvo, tulevat toistuvasti vastaan seuraavissa luvuissa. T\u00e4rkeint\u00e4 on muistaa, ett\u00e4 None:n identiteetti kuuluu tarkistaa sanalla <code>is</code>. None on niin sanottu singleton, eli jokainen instanssi None:sta on se t\u00e4ysin sama None sinun tietokoneesi muistissa. K\u00e4yt\u00e4nn\u00f6ss\u00e4 None tulee sinulle tutuksi funktioiden my\u00f6t\u00e4 eli my\u00f6hemmiss\u00e4 luvuissa t\u00e4ll\u00e4 kurssilla.</p>"}]}